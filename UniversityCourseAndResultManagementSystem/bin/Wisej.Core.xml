<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Wisej.Core</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Ajax.Utilities.CommonData">
            <summary>
            Helper class to hold common data elements
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.CommonData.s_replacementToken">
            <summary>
            Regular expression to identifier replacement token syntax
            </summary>
        </member>
        <member name="T:Microsoft.Ajax.Utilities.OutputMode">
            <summary>
            Output mode setting
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.OutputMode.SingleLine">
            <summary>
            Output the minified code on a single line for maximum minification.
            LineBreakThreshold may still break the single line into multiple lines
            at a syntactically correct point after the given line length is reached.
            Not easily human-readable.
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.OutputMode.MultipleLines">
            <summary>
            Output the minified code on multiple lines to increase readability
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.OutputMode.None">
            <summary>
            Supress code output; typically used for linting or analysis of source code
            </summary>
        </member>
        <member name="T:Microsoft.Ajax.Utilities.BlockStart">
            <summary>
            Describes how to output the opening curly-brace for blocks when the OutputMode
            is set to MultipleLines. 
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.BlockStart.NewLine">
            <summary>
            Output the opening curly-brace block-start character on its own new line. Ex:
            if (condition)
            {
                ...
            }
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.BlockStart.SameLine">
            <summary>
            Output the opening curly-brace block-start character at the end of the previous line. Ex:
            if (condition) {
                ...
            }
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.BlockStart.UseSource">
            <summary>
            Output the opening curly-brace block-start character on the same line or a new line
            depending on how it was specified in the sources. 
            </summary>
        </member>
        <member name="T:Microsoft.Ajax.Utilities.CommonSettings">
            <summary>
            Common settings shared between CSS and JS settings objects
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CommonSettings.AllowEmbeddedAspNetBlocks">
            <summary>
            Returns or sets a boolean value indicating whether embedded asp.net blocks (&lt;% %>) should be recognized and output as is. Default is false.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CommonSettings.BlocksStartOnSameLine">
            <summary>
            Returns or sets whether the opening curly brace for blocks is
            on its own line (NewLine, default) or on the same line as the preceding code (SameLine)
            or taking a hint from the source code position (UseSource). Only relevant when OutputMode is 
            set to MultipleLines.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CommonSettings.IgnoreAllErrors">
            <summary>
            Returns or sets a flag for whether to ignore ALL errors found in the input code.
            Default is false.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CommonSettings.IndentSize">
            <summary>
            Returns or sets an integer value specifying the number of spaces per indent level when in MultipleLines output mode. (Default = 4)
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CommonSettings.LineBreakThreshold">
            <summary>
            Returns or sets the column position at which the line will be broken at the next available opportunity.
            Default value is int.MaxValue - 1000.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CommonSettings.OutputMode">
            <summary>
            Returns or sets a value indicating the output mode:
            SingleLine (default) - output all code on a single line;
            MultipleLines - break the output into multiple lines to be more human-readable;
            SingleLine mode may still result in multiple lines if the LineBreakThreshold is set to a small enough value.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CommonSettings.TermSemicolons">
            <summary>
            Returns or sets a boolean value indicting whether to add a semicolon at the end of the parsed code (true) or not (false, default)
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CommonSettings.KillSwitch">
            <summary>
            Returns or sets a long integer value containing kill switch flags for each individual mod to the parsed code tree. Allows for
            callers to turn off specific modifications if desired. Default is 0, meaning no kill switches are set.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CommonSettings.LineTerminator">
            <summary>
            Returns an appropriate line-terminator string given the output mode
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CommonSettings.IgnoreErrorCollection">
            <summary>
            Returns a collection of errors to ignore
            </summary>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.CommonSettings.SetIgnoreErrors(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Set the collection of errors to ignore
            </summary>
            <param name="ignoreErrors">collection of error code strings</param>
            <returns>number of error codes successfully added to the collection</returns>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CommonSettings.IgnoreErrorList">
            <summary>
            string representation of the list of debug lookups, comma-separated
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CommonSettings.PreprocessorValues">
            <summary>
            dictionary of defines and their values
            </summary>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.CommonSettings.SetPreprocessorDefines(System.String[])">
            <summary>
            Set the collection of defined names for the preprocessor
            </summary>
            <param name="definedNames">array of defined name strings</param>
            <returns>number of names successfully added to the collection</returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.CommonSettings.SetPreprocessorValues(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Set the dictionary of preprocessor defines and values
            </summary>
            <param name="defines">dictionary to set</param>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CommonSettings.PreprocessorDefineList">
            <summary>
            string representation of the list of names defined for the preprocessor, comma-separated
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CommonSettings.ResourceStrings">
            <summary>
            Collection of resource string objects
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CommonSettings.ReplacementTokens">
            <summary>
            Returns the mapping of replacement token to value
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CommonSettings.ReplacementFallbacks">
            <summary>
            Returns the mapping of replacement token fallback class to replacement value
            </summary>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.CommonSettings.ReplacementTokensApplyDefaults(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Only add items from the other set to the collection if the key doesn't already exist.
            (Previous sets are more specific than subsequent sets)
            </summary>
            <param name="otherSet">less-specific set of name/value replacement token pairs</param>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.CommonSettings.ReplacementTokensApplyOverrides(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Always add items from the other set, replacing any pre-existing items in the collection.
            (Subsequent sets are more specific than previous sets)
            </summary>
            <param name="otherSet">more-specific set of name/value replacement token pairs</param>
        </member>
        <member name="T:Microsoft.Ajax.Utilities.CommonStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CommonStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CommonStrings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CommonStrings.ContextSeparator">
            <summary>
              Looks up a localized string similar to : .
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CommonStrings.FallbackEncodingFailed">
            <summary>
              Looks up a localized string similar to Fallback character encoding failed.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CommonStrings.InvalidJSONOutput">
            <summary>
              Looks up a localized string similar to Invalid JSON JavaScript nodes encountered during output.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CommonStrings.Severity0">
            <summary>
              Looks up a localized string similar to run-time.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CommonStrings.Severity1">
            <summary>
              Looks up a localized string similar to coding.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CommonStrings.Severity2">
            <summary>
              Looks up a localized string similar to code.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CommonStrings.Severity3">
            <summary>
              Looks up a localized string similar to performance.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CommonStrings.Severity4">
            <summary>
              Looks up a localized string similar to improper technique.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CommonStrings.SeverityUnknown">
            <summary>
              Looks up a localized string similar to unknown ({0}).
            </summary>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.ContextError.ToString">
            <summary>
            Convert the exception to a VisualStudio format error message
            file(startline[-endline]?,startcol[-endcol]?):[ subcategory] category [errorcode]: message
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Ajax.Utilities.CssEncoderFallback">
            <summary>
            CssFallback encodes invalid encoder characters as Unicode escapes:
                  \123456
            up to six hexadecimal characters. If less then six characters, we'll
            suffix the encoding with a space character, just un case the next character 
            could be mistaken for another hexadecimal digit.
            
            To use this class, create an instance of it and set it to the EncoderFallback
            property of your Encoding object. You may have to clone the Encoding object
            in order to get write access to the EncoderFallback property. 
            <example>
                var encoding = (Encoding)Encoding.ASCII.Clone();
                encoding.EncoderFallback = new CssEncoderFallback();
                var bytes = encoding.GetBytes(crunchedCode);
                Console.WriteLine(encoding.GetString(bytes));
            </example>
            </summary>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.CssEncoderFallback.CreateFallbackBuffer">
            <summary>
            return a fallback buffer for this encoding fallback
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssEncoderFallback.MaxCharCount">
            <summary>
            the maximum number of characters we'll expand a single character into
            </summary>
        </member>
        <member name="T:Microsoft.Ajax.Utilities.CssEncoderFallbackBuffer">
            <summary>
            fallback buffer for encoding unknown characters into CSS Unicode escapes
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssEncoderFallbackBuffer.Remaining">
            <summary>
            Number of characters remaining in the buffer
            </summary>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.CssEncoderFallbackBuffer.GetEncoding(System.Int32)">
            <summary>
            Get the single-character encoding string
            </summary>
            <param name="charValue">character to encode</param>
            <returns>encoded string</returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.CssEncoderFallbackBuffer.Fallback(System.Char,System.Int32)">
            <summary>
            Prepare the unknown character for encoding
            </summary>
            <param name="charUnknown">character to process</param>
            <param name="index">position in input string</param>
            <returns>true if characters to process placed in buffer</returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.CssEncoderFallbackBuffer.Fallback(System.Char,System.Char,System.Int32)">
            <summary>
            Prepare the unknown surrogate pair for encoding
            </summary>
            <param name="charUnknownHigh">high surrogate pair character</param>
            <param name="charUnknownLow">low surrogate pair character</param>
            <param name="index">index of character in the stream</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.CssEncoderFallbackBuffer.GetNextChar">
            <summary>
            return the next character
            </summary>
            <returns>(char)0 if no character</returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.CssEncoderFallbackBuffer.MovePrevious">
            <summary>
            back the character position up one character
            </summary>
            <returns>false if already at front; true otherwise</returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.CssEncoderFallbackBuffer.Reset">
            <summary>
            reset the fallback buffer to initial state
            </summary>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.CssEncoderFallbackBuffer.ToString">
            <summary>
            Return string representation of this object
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Ajax.Utilities.ColorSlice">
            <summary>
            ColorSlice class
            </summary>
        </member>
        <member name="T:Microsoft.Ajax.Utilities.CssParser">
            <summary>
            Parser takes Tokens and parses them into rules and statements
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.CssParser.s_regexHack1">
            <summary>
            regular expression for matching first comment hack
            This is the MacIE ignore bug: /*(anything or nothing inside)\*/.../*(anything or nothing inside)*/
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.CssParser.s_regexHack2">
            <summary>
            Regular expression for matching second comment hack
            Hide from everything EXCEPT Netscape 4 and Opera 5
            Format: /*/*//*/.../*(anything or nothing inside)*/
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.CssParser.s_regexHack3">
            <summary>
            Regular expression for matching third comment hack
            Hide from Netscape 4
            Format: /*/*/.../*(anything or nothing inside)*/
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.CssParser.s_regexHack4">
            <summary>
            Regular expression for matching fourth comment hack
            Hide from IE6
            Format: property /*(anything or nothing inside)*/:value
            WARNING: This does not actually parse the property/value -- it simply looks for a
            word character followed by at least one whitespace character, followed
            by a simple comment, followed by optional space, followed by a colon.
            Does not match the simple word, the space or the colon (just the comment) 
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.CssParser.s_regexHack5">
            <summary>
            Regular expression for matching fifth comment hack
            Hide from IE5.5
            Format: property:/* (anything or nothing inside) */value
            WARNING: This does not actually parse the property/value -- it simply looks for a
            word character followed by optional whitespace character, followed
            by a colon, followed by optional whitespace, followed by a simple comment.
            Does not match initial word or the colon, just the comment.
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.CssParser.s_regexHack6">
            <summary>
            Regular expression for matching sixth comment hack -- although not a real hack
            Hide from IE6, NOT
            Format: property/*(anything or nothing inside)*/:value
            NOTE: This doesn't actually hide from IE6; it needs a space before the comment to actually work.
            but enoough people code this in their CSS and expect it to be output that I recieved enough
            requests to add it to the allowed "hacks"
            WARNING: This does not actually parse the property/value -- it simply looks for a
            word character followed by a simple comment, followed by optional space, followed by a colon.
            Does not match the simple word or the colon (just initial whitespace and comment) 
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.CssParser.s_regexHack7">
            <summary>
            Regular expression for empty comments
            These comments don't really do anything. But if the developer wrote an empty
            comment (/**/ or /* */), then it has no documentation value and might possibly be
            an attempted comment hack.
            Format: /**/ or /* */ (single space)
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.CssParser.s_rrggbb">
            <summary>
            matches 6-digit RGB color value where both r digits are the same, both
            g digits are the same, and both b digits are the same (but r, g, and b
            values are not necessarily the same). Used to identify #rrggbb values
            that can be collapsed to #rgb
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.CssParser.s_valueReplacement">
            <summary>
            regular expression for matching css comments containing special formatted identifiers
            for value-replacement matching
            Format: /* [id] */
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.CssParser.s_sharepointReplacement">
            <summary>
            regular expression for matching Sharepoint Theme css comments
            Format: /* [ReplaceBGImage] */
                    /* [id(parameters)] */
                where id is one of: ReplaceColor, ReplaceFont, or RecolorImage
                and parameters is anything other than a close square-bracket
            </summary>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.CssParser.PushWaypoint">
            <summary>
            Push a new string builder onto the builders stack
            </summary>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.CssParser.PopWaypoint(System.Boolean)">
            <summary>
            Pop the top waypoint off the stack.
            If the Settings RemoveEmptyBlocks property is false, will keep the text, regardless of the passed-in setting.
            </summary>
            <param name="keepText">true if push the text of the popped waypoint onto the new top waypoint; false to discard</param>
            <returns>true if the popped builder has any text within it</returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.CssParser.UnwindStackCompletely">
            <summary>
            Get all the text that has been accumulting in the string builders
            on the stack, unwinding the stack until it's empty
            </summary>
            <returns>string representation of all parsed text</returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.CssParser.IsExcludedVendorPrefix(System.String)">
            <summary>
            Returns true if the given property is vendor-specific and the vendor prefix
            is in the list of excluded prefixes.
            </summary>
            <param name="propertyName">The property name</param>
            <returns>true if excluded; false otherwise</returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.CssParser.SkipSpace">
            <summary>
            This method advances to the next token FIRST -- effectively skipping the current one -- 
            and then skips any space tokens that FOLLOW it.
            </summary>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.CssParser.SkipIfSpace">
            <summary>
            This method only skips the space that is already the current token.
            </summary>
            <returns>true if space was skipped; false if the current token is not space</returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.CssParser.AddNewLine">
            <summary>
            Always add new line to the stream
            </summary>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.CssParser.NormalizedValueReplacementComment(System.String)">
            <summary>
            regular expression for matching newline characters
            </summary>
        </member>
        <member name="T:Microsoft.Ajax.Utilities.CssScanner">
            <summary>
            Scanner takes input stream and breaks it into Tokens
            </summary>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.CssScanner.EatOneLineBreak">
            <summary>
            If the current character is a linebreak, eat it without advancing
            our position.
            </summary>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.CssScanner.PreprocessingDirective(System.String)">
            <summary>
            Scan a preprocessing directive.
            </summary>
            <param name="comment">comment text</param>
            <returns>true if this is one of our preprocessing directives; false otherwise</returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.CssScanner.IsValidVendorPrefix(System.String)">
            <summary>
            Determines whether a given string is a valid vendor prefix. No hyphens allowed.
            </summary>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.CssScanner.GetReplacementToken(System.Boolean)">
            <summary>
            Given the current character is a %, see if it's followed by a syntax
            that creates a valid replacement token. If so, return the token text.
            </summary>
            <param name="advancePastDelimiter">if true, the current char is the delimiter and needs to be advanced; 
            false means we are already at the next character and shouldn't advance</param>
            <returns>valid token text, or null</returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.CssScanner.GetUnicodeEncodingValue(System.Boolean@)">
            <summary>
            returns the VALUE of a unicode number, up to six hex digits
            </summary>
            <returns>int value representing up to 6 hex digits</returns>
        </member>
        <member name="T:Microsoft.Ajax.Utilities.CssType">
            <summary>
            Enumeration for the type of CSS that will be parsed
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.CssType.FullStyleSheet">
            <summary>
            Default setting: expecting a full CSS stylesheet
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.CssType.DeclarationList">
            <summary>
            Expecting just a declaration list, for instance: the value of an HTML style attribute
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.CssComment.Important">
            <summary>
            Remove all comments except those marked as important (//! or /*!)
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.CssComment.None">
            <summary>
            Remove all source comments from the output
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.CssComment.All">
            <summary>
            Keep all source comments in the output
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.CssComment.Hacks">
            <summary>
            Remove all source comments except those for approved comment-based hacks. (See documentation)
            </summary>
        </member>
        <member name="T:Microsoft.Ajax.Utilities.CssColor">
            <summary>
            Enumeration for how to treat known color names
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.CssColor.Strict">
            <summary>
            Convert strict names to hex values if shorter; hex values to strict names if shorter. Leave all other
            color names or hex values as-specified.
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.CssColor.Hex">
            <summary>
            Always use hex values; do not convert any hex values to color names
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.CssColor.Major">
            <summary>
            Convert known hex values to major-browser color names if shorter; and known major-browser color
            names to hex if shorter.
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.CssColor.NoSwap">
            <summary>
            Don't swap names for hex or hex for names, whether or not one is shorter.
            </summary>
        </member>
        <member name="T:Microsoft.Ajax.Utilities.CssSettings">
            <summary>
            Settings Object for CSS Minifier
            </summary>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.CssSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Ajax.Utilities.CssSettings"/> class with default settings.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssSettings.ColorNames">
            <summary>
            Returns or sets ColorNames setting. Default is Strict.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssSettings.CommentMode">
            <summary>
            Returns or sets CommentMode setting. Default is Important.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssSettings.MinifyExpressions">
            <summary>
            Returns or sets whether to minify the javascript within expression functions. Deault is true.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssSettings.CssType">
            <summary>
            Returns or sets a value indicating how to treat the input source. Default is FullStyleSheet.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssSettings.RemoveEmptyBlocks">
            <summary>
            Returns or sets whether empty blocks removes the corresponding rule or directive. Default is true.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssSettings.FixIE8Fonts">
            <summary>
            Returns or sets whether IE8 .EOT fonts should get a question-mark appended to the URL
            (if not there already) to prevent the browser from generating invalid HTTP requests to the server. Default is true.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssSettings.ExcludeVendorPrefixes">
            <summary>
            Returns or sets a list of vendor-specific prefixes ("ms", "webkit", "moz") that will be omitted from the output.
            Default is no exclusions.
            </summary>
        </member>
        <member name="T:Microsoft.Ajax.Utilities.CssStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.ColorCanBeCollapsed">
            <summary>
              Looks up a localized string similar to Color {0} can be collapsed to {1}.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.DecimalNoDigit">
            <summary>
              Looks up a localized string similar to Decimal point not followed by numeric digit.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.DeclarationIgnored">
            <summary>
              Looks up a localized string similar to declaration ignored.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.DeclarationIgnoredFormat">
            <summary>
              Looks up a localized string similar to {0} ({1}).
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.DuplicateNamespaceDeclaration">
            <summary>
              Looks up a localized string similar to Duplicate namespace declaration; already declared &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.EquivalentNumbers">
            <summary>
              Looks up a localized string similar to Numeric value contains unnecessary characters: {0} is equivalent to {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.ExpectedCharset">
            <summary>
              Looks up a localized string similar to Expected charset string, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.ExpectedClosingBrace">
            <summary>
              Looks up a localized string similar to Expected closing curly-brace, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.ExpectedClosingBracket">
            <summary>
              Looks up a localized string similar to Expected closing bracket, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.ExpectedClosingParenthesis">
            <summary>
              Looks up a localized string similar to Expected closing parenthesis, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.ExpectedColon">
            <summary>
              Looks up a localized string similar to Expected colon, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.ExpectedComma">
            <summary>
              Looks up a localized string similar to Expect comma, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.ExpectedCommaOrOpenBrace">
            <summary>
              Looks up a localized string similar to Expected comma or open brace, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.ExpectedCommaOrSemicolon">
            <summary>
              Looks up a localized string similar to Expected comma or semi-colon, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.ExpectedEndOfFile">
            <summary>
              Looks up a localized string similar to Expected end of file; invalid input file.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.ExpectedEqualSign">
            <summary>
              Looks up a localized string similar to Expected equal sign, found {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.ExpectedExpression">
            <summary>
              Looks up a localized string similar to Expected expression, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.ExpectedFunction">
            <summary>
              Looks up a localized string similar to Expected function, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.ExpectedHexColor">
            <summary>
              Looks up a localized string similar to Expected hex color, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.ExpectedIdentifier">
            <summary>
              Looks up a localized string similar to Expected identifier, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.ExpectedIdentifierOrString">
            <summary>
              Looks up a localized string similar to Expected identifier or string, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.ExpectedImport">
            <summary>
              Looks up a localized string similar to Expected import string or uri, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.ExpectedMediaFeature">
            <summary>
              Looks up a localized string similar to Expected media feature, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.ExpectedMediaIdentifier">
            <summary>
              Looks up a localized string similar to Expected media identifier, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.ExpectedMediaQuery">
            <summary>
              Looks up a localized string similar to Expected media query, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.ExpectedMediaQueryExpression">
            <summary>
              Looks up a localized string similar to Expected media-query expression, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.ExpectedNamespace">
            <summary>
              Looks up a localized string similar to Expected namespace string or uri, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.ExpectedNumber">
            <summary>
              Looks up a localized string similar to Expected number, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.ExpectedOpenBrace">
            <summary>
              Looks up a localized string similar to Expected open brace, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.ExpectedOpenParenthesis">
            <summary>
              Looks up a localized string similar to Expected opening parenthesis.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.ExpectedPercentageFromOrTo">
            <summary>
              Looks up a localized string similar to Expected percentage, &apos;from&apos;, or &apos;to&apos;; found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.ExpectedProduct">
            <summary>
              Looks up a localized string similar to Expected calculation product, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.ExpectedProgId">
            <summary>
              Looks up a localized string similar to Expected progid, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.ExpectedRgbNumberOrPercentage">
            <summary>
              Looks up a localized string similar to Expected number or percentage value in rgb function, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.ExpectedSelector">
            <summary>
              Looks up a localized string similar to Expected selector, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.ExpectedSemicolon">
            <summary>
              Looks up a localized string similar to Expected semi-colon, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.ExpectedSemicolonOrClosingBrace">
            <summary>
              Looks up a localized string similar to Expected semicolon or closing curly-brace, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.ExpectedSemicolonOrOpenBrace">
            <summary>
              Looks up a localized string similar to Expected semi-colon or close brace, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.ExpectedSum">
            <summary>
              Looks up a localized string similar to Expected calculation sum, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.ExpectedTerm">
            <summary>
              Looks up a localized string similar to Expected term, found {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.ExpectedUnit">
            <summary>
              Looks up a localized string similar to Expected calculation unit, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.ExpressionError">
            <summary>
              Looks up a localized string similar to JavaScript error in expression property: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.HackGeneratesInvalidCss">
            <summary>
              Looks up a localized string similar to Browser hack generates invalid CSS.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.HashAfterUnaryNotAllowed">
            <summary>
              Looks up a localized string similar to Hash ({0}) not allowed after unary operator.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.HighSurrogateNoLow">
            <summary>
              Looks up a localized string similar to Unicode high-surrogate value (0x{0:x}) not immediately followed by unicode-escaped low-surrogate value.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.InvalidLowSurrogate">
            <summary>
              Looks up a localized string similar to Unicode high-surrogate value (0x{0:x}) followed by invalid low-surrogate value: 0x{1:x}.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.InvalidUnicodeRange">
            <summary>
              Looks up a localized string similar to Invalid Unicode Range Token: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.MediaQueryRequiresSpace">
            <summary>
              Looks up a localized string similar to Media queries require a space between &apos;and&apos; and the opening parenthesis: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.ParserSubsystem">
            <summary>
              Looks up a localized string similar to Parser.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.PossibleCharsetError">
            <summary>
              Looks up a localized string similar to Byte-order mark at front of source indicates possible encoding issue..
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.PossibleInvalidClassName">
            <summary>
              Looks up a localized string similar to Possible cross-browser invalid class name: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.ProgIdIEOnly">
            <summary>
              Looks up a localized string similar to &apos;progid:&apos; is an IE-only construct that generates invalid CSS.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.ScannerSubsystem">
            <summary>
              Looks up a localized string similar to Scanner.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.TokenAfterUnaryNotAllowed">
            <summary>
              Looks up a localized string similar to Token not allowed after unary operator: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.UndeclaredNamespace">
            <summary>
              Looks up a localized string similar to Namespace used but not declared in a @namespace statement: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.UnderscoreNotValid">
            <summary>
              Looks up a localized string similar to An underscore is not a valid CSS1 or CSS2 identifier character.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.UnexpectedAtKeyword">
            <summary>
              Looks up a localized string similar to Unexpected at-keyword, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.UnexpectedCharset">
            <summary>
              Looks up a localized string similar to @charset must be very first token in file.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.UnexpectedDimension">
            <summary>
              Looks up a localized string similar to Unexpected dimension: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.UnexpectedEndOfFile">
            <summary>
              Looks up a localized string similar to Unexpected end of file encountered.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.UnexpectedEscape">
            <summary>
              Looks up a localized string similar to Unexpected escape sequence: \{0}.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.UnexpectedFunction">
            <summary>
              Looks up a localized string similar to Unexpected function; only calc( or attr( allowed here, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.UnexpectedNumberCharacter">
            <summary>
              Looks up a localized string similar to Unexpected number character: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.UnexpectedStringCharacter">
            <summary>
              Looks up a localized string similar to Unexpected string character: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.UnexpectedToken">
            <summary>
              Looks up a localized string similar to Unexpected token, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.UnknownCharacterEncoding">
            <summary>
              Looks up a localized string similar to ?.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.UnknownError">
            <summary>
              Looks up a localized string similar to Unknown error.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.UnnecessaryUnits">
            <summary>
              Looks up a localized string similar to Unnecessary units on a value of zero.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.UnterminatedComment">
            <summary>
              Looks up a localized string similar to Unterminated comment..
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CssStrings.UnterminatedString">
            <summary>
              Looks up a localized string similar to Unterminated string: {0}.
            </summary>
        </member>
        <member name="T:Microsoft.Ajax.Utilities.CssToken">
            <summary>
            Token class represents a parsed token of information consumed by the parser
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.ActivationObject.Existing">
            <summary>
            Returns or sets a boolean value for whether this is an existing scope or a new one
            generated during the current run.
            </summary>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.ActivationObject.DeleteFromBindingPattern(Microsoft.Ajax.Utilities.AstNode,System.Boolean)">
            <summary>
            Delete a binding from its parent pattern
            </summary>
            <param name="binding">binding to delete</param>
            <param name="normalizePattern">true to normalize the parent pattern and possibly delete it if now empty</param>
            <returns>true if deleted, otherwise false</returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.ActivationObject.DeclareScope">
            <summary>
            Set up this scope's fields from the declarations it contains
            </summary>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.ActivationObject.GetParentBlock(Microsoft.Ajax.Utilities.AstNode)">
            <summary>
            Return the first Block node in the tree starting from the given node and working up through the parent nodes.
            </summary>
            <param name="node">initial node</param>
            <returns>first block node in the node tree</returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.ActivationObject.CanReference(System.String)">
            <summary>
            See if the given name will resolve to a field; do not create any inner fields
            or unknown global fields along the way.
            </summary>
            <param name="name">name to resolve</param>
            <returns>an existing resolved field, or null if nothing exists</returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.ActivationObject.FindReference(System.String)">
            <summary>
            Resolve the name in this scope, or go up the chain adding inner fields
            along the way until the final reference is found, creating an unknown global
            field if necessary.
            </summary>
            <param name="name">name to resolve</param>
            <returns>resolved variable field (should never be null)</returns>
        </member>
        <member name="T:Microsoft.Ajax.Utilities.AstNode">
            <summary>
            Abstract syntax tree node
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.AstNode.Parent">
            <summary>
            Returns or sets the parent node of this node in the abstract syntax tree
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.AstNode.Context">
            <summary>
            Returns or sets the source context of this node
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.AstNode.TerminatingContext">
            <summary>the context of any terminating character parsed after this node
            e.g. the semicolon after a statement or a comma in a parameter list</summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.AstNode.IsExpression">
            <summary>
            Returns a boolean flag indicating whether this node is an expression
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.AstNode.IsConstant">
            <summary>
            Returns a boolean flag indicating whether this node is a constant expression
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.AstNode.IsDebugOnly">
            <summary>
            Returns or sets a flag indicating whether we have analyzed this statement and determined it
            to be for a debug-only build 
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.AstNode.Index">
            <summary>
            Returns or sets the order-execution index for the node's function scope
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.AstNode.Precedence">
            <summary>
            Returns the order precedence of this node, if it is an expression
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.AstNode.IsDeclaration">
            <summary>
            Returns or sets a flag indicting whether this node is a declaration
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.AstNode.IsWindowLookup">
            <summary>
            Returns a boolean value representing whether this node is a Lookup node resolving to the global predefined window object.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.AstNode.LeftHandSide">
            <summary>
            Returns the syntax tree node representing the leftmost portion of this node's subtree.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.AstNode.EnclosingScope">
            <summary>
            Get the enclosing lexical scope for this node.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.AstNode.HasOwnScope">
            <summary>
            Returns a flag indicating whether or not this node has its own associated scope, or relies on a parent node's scope
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.AstNode.Children">
            <summary>
            Returns an enumeration representing the child nodes of this node in the abstract syntax tree
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.AstNode.ContainsInOperator">
            <summary>
            Returns true if the node contains an in-operator
            </summary>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.AstNode.FindPrimitiveType">
            <summary>
            Returns a valid indicating the primitive JavaScript type of this node, if known.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.AstNode.ReplaceChild(Microsoft.Ajax.Utilities.AstNode,Microsoft.Ajax.Utilities.AstNode)">
            <summary>
            Replace this node's specified child with another given node. 
            </summary>
            <param name="oldNode">Child node to be replaced</param>
            <param name="newNode">New node with which to replace the existing child node</param>
            <returns>true if the replacement succeeded; false otherwise</returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.AstNode.IsEquivalentTo(Microsoft.Ajax.Utilities.AstNode)">
            <summary>
            Abstract method to be implemented by every concrete class.
            Returns true of the other object is equivalent to this object
            </summary>
            <param name="otherNode"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.AstNode.IsGlobalNamed(System.String)">
            <summary>
            Returns a boolean value representing whether this node is a Lookup node resolving to the global name, or
            a member off the global window object with the given name.
            </summary>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.AstNode.Accept(Microsoft.Ajax.Utilities.IVisitor)">
            <summary>
            Abstract method to be implemented by every concrete node class
            </summary>
            <param name="visitor">visitor to accept</param>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.AstNodeList.IsEquivalentTo(Microsoft.Ajax.Utilities.AstNode)">
            <summary>
            an astlist is equivalent to another astlist if they both have the same number of
            items, and each item is equivalent to the corresponding item in the other
            </summary>
            <param name="otherNode"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.BinaryOperator.ContainsInOperator">
            <summary>
            Returns true if the expression contains an in-operator
            </summary>
        </member>
        <member name="T:Microsoft.Ajax.Utilities.BindingIdentifier">
            <summary>
            Simple Binding identifier node class. Represents a name that is declared in a binding (parameter, vardecl, catch, etc)
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.BindingIdentifier.Name">
            <summary>
            Returns or sets the name of the binding
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.BindingIdentifier.VariableField">
            <summary>
            Returns or sets the field corresponding to this declaration
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.BindingIdentifier.RenameNotAllowed">
            <summary>
            Returns or sets whether or not this declaration can be renamed
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.BindingIdentifier.ScopeType">
            <summary>
            Returns or sets the scope type for this declaration (lexical or variable)
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.BindingIdentifier.Initializer">
            <summary>
            Returns any initializer that may be associated with this binding identifier
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.BindingIdentifier.IsParameter">
            <summary>
            Returns or sets whether this binding identifier is a parameter name
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.BindingIdentifier.OriginalName">
            <summary>
            Returns the original name of the identifier, before any renaming
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.BindingIdentifier.WasRenamed">
            <summary>
            Returns whether the item was renamed
            </summary>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.BindingsVisitor.Bindings(Microsoft.Ajax.Utilities.AstNode)">
            <summary>
            For the given binding node, return a collection of individual INameDeclaration
            nodes that represent the names being declared for this binding element.
            </summary>
            <param name="node">binding node</param>
            <returns>collection of INameDeclaration nodes</returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.BindingsVisitor.References(Microsoft.Ajax.Utilities.AstNode)">
            <summary>
            For the given binding node, return a collection of individual lookup
            nodes that represent the names being referenced.
            </summary>
            <param name="node">binding node</param>
            <returns>collection of Lookup nodes</returns>
        </member>
        <member name="T:Microsoft.Ajax.Utilities.Block">
            <summary>
            Block of statements
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.Block.Item(System.Int32)">
            <summary>
            Returns a particular statement in the list of statements making up this block
            </summary>
            <param name="index">zero-based index of the desired statement</param>
            <returns>abstract syntax tree node</returns>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.Block.Count">
            <summary>
            Returns the count of statements making up this block
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.Block.BraceOnNewLine">
            <summary>
            Returns or sets a boolean value indicating whether the brace for this block (if there was one) started
            on a newline (true) or the same line as the statement to which it belongs (false)
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.Block.IsModule">
            <summary>
            Returns or sets a flag indicating this this block is a module body
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.Block.ForceBraces">
            <summary>
            Returns or sets whether to force this block to always have curly-braces around it
            and never to optimize them away.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.Block.IsConcise">
            <summary>
            Returns or sets whether this block is a concise block (has no braces)
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.Block.IsExpression">
            <summary>
            Returns false unless the block constains only a single statement that is itself an expression.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.Block.Children">
            <summary>
            Returns an enumerator for the syntax tree nodes making up this block
            </summary>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.Block.Clear">
            <summary>
            Remove all statements from the Block
            </summary>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.Block.ReplaceChild(Microsoft.Ajax.Utilities.AstNode,Microsoft.Ajax.Utilities.AstNode)">
            <summary>
            Replace the existing direct child node of the block with a new node.
            </summary>
            <param name="oldNode">existing statement node to replace.</param>
            <param name="newNode">node with which to replace the existing node.</param>
            <returns>true if the replacement was a succeess; false otherwise</returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.Block.Append(Microsoft.Ajax.Utilities.AstNode)">
            <summary>
            Append the given statement node to the end of the block
            </summary>
            <param name="item">node to add to the block</param>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.Block.IndexOf(Microsoft.Ajax.Utilities.AstNode)">
            <summary>
            Returns the zero-based index of the given syntax tree node within the block, or -1 if the node is not a direct child of the block
            </summary>
            <param name="item">node to find</param>
            <returns>zero-based index of the node in the block, or -1 if the node is not a direct child of the block</returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.Block.InsertAfter(Microsoft.Ajax.Utilities.AstNode,Microsoft.Ajax.Utilities.AstNode)">
            <summary>
            Insert the given statement node after an existing node in the block.
            </summary>
            <param name="after">exisitng child node of the block</param>
            <param name="item">node to insert after the existing node</param>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.Block.Insert(System.Int32,Microsoft.Ajax.Utilities.AstNode)">
            <summary>
            Insert a new node into the given position index within the block
            </summary>
            <param name="index">zero-based index into which the new node will be inserted</param>
            <param name="item">new node to insert into the block</param>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.Block.RemoveLast">
            <summary>
            Remove the last node in the block
            </summary>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.Block.RemoveAt(System.Int32)">
            <summary>
            Remove the node at the given position index.
            </summary>
            <param name="index">Zero-based position index</param>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.Block.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Microsoft.Ajax.Utilities.AstNode})">
            <summary>
            Insert a set of nodes into the block at the given position
            </summary>
            <param name="index">Zero-based position into which the new nodes will be inserted.</param>
            <param name="newItems">Collection of statements to insert</param>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.BlockScope.DeclareScope">
            <summary>
            Set up this scopes lexically-declared fields
            </summary>
        </member>
        <member name="T:Microsoft.Ajax.Utilities.ClassNode">
            <summary>
            Class represents an EcmaScript 6 class node
            </summary>
        </member>
        <member name="T:Microsoft.Ajax.Utilities.LocalRenaming">
            <summary>
            Settings for how local variables and functions can be renamed
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.LocalRenaming.KeepAll">
            <summary>
            Keep all names; don't rename anything
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.LocalRenaming.KeepLocalizationVars">
            <summary>
            Rename all local variables and functions that do not begin with "L_"
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.LocalRenaming.CrunchAll">
            <summary>
            Rename all local variables and functions. (default)
            </summary>
        </member>
        <member name="T:Microsoft.Ajax.Utilities.EvalTreatment">
            <summary>
            Settings for how to treat eval statements
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.EvalTreatment.Ignore">
            <summary>
            Ignore all eval statements (default). This assumes that code that is eval'd will not attempt
            to access any local variables or functions, as those variables and function may be renamed.
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.EvalTreatment.MakeImmediateSafe">
            <summary>
            Assume any code that is eval'd will attempt to access local variables and functions declared
            in the same scope as the eval statement. This will turn off local variable and function renaming
            in any scope that contains an eval statement.
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.EvalTreatment.MakeAllSafe">
            <summary>
            Assume that any local variable or function in any accessible scope chain may be referenced by 
            code that is eval'd. This will turn off local variable and function renaming for all scopes that
            contain an eval statement, and all their parent scopes up the chain to the global scope.
            </summary>
        </member>
        <member name="T:Microsoft.Ajax.Utilities.JavaScriptSourceMode">
            <summary>
            Enum describing the type of input expected
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.JavaScriptSourceMode.Program">
            <summary>Default input mode: a program, a block of top-level global statements</summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.JavaScriptSourceMode.Expression">
            <summary>Input is a single JavaScript Expression</summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.JavaScriptSourceMode.EventHandler">
            <summary>Input is an implicit function block, as in the value of an HTML onclick attribute</summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.JavaScriptSourceMode.Module">
            <summary>Input is an implicit module block, as referenced by an import statement</summary>
        </member>
        <member name="T:Microsoft.Ajax.Utilities.JavaScriptFormat">
            <summary>
            Enum describing how to treat the output JavaScript
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.JavaScriptFormat.Normal">
            <summary>normal JavaScript code</summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.JavaScriptFormat.JSON">
            <summary>JSON code</summary>
        </member>
        <member name="T:Microsoft.Ajax.Utilities.CodeSettings">
            <summary>
            Object used to store code settings for JavaScript parsing, minification, and output
            </summary>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.CodeSettings.#ctor">
            <summary>
            Instantiate a CodeSettings object with the default settings
            </summary>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.CodeSettings.Clone">
            <summary>
            Instantiate a new CodeSettings object with the same settings as the current object.
            </summary>
            <returns>a copy CodeSettings object</returns>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.CodeSettings.m_identifierReplacementMap">
            <summary>
            dictionary of identifiers we want to manually rename
            </summary>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.CodeSettings.AddRenamePair(System.String,System.String)">
            <summary>
            Add a rename pair to the identifier rename map
            </summary>
            <param name="sourceName">name of the identifier in the source code</param>
            <param name="newName">new name with which to replace the source name</param>
            <returns>true if added; false if either name is not a valid JavaScript identifier</returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.CodeSettings.ClearRenamePairs">
            <summary>
            Clear any rename pairs from the identifier rename map
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CodeSettings.HasRenamePairs">
            <summary>
            returns whether or not there are any rename pairs in this settings object
            </summary>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.CodeSettings.GetNewName(System.String)">
            <summary>
            Given a source identifier, return a new name for it, if one has already been added
            </summary>
            <param name="sourceName">source name to check</param>
            <returns>new name if it exists, null otherwise</returns>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CodeSettings.RenamePairs">
            <summary>
            Returns or sets a string representation of all the indentifier replacements as a comma-separated
            list of "source=target" identifiers.
            </summary>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.CodeSettings.SetNoAutoRenames(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            sets the collection of known global names to the enumeration of strings passed to this method
            </summary>
            <param name="noRenameNames">array of known global names</param>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CodeSettings.NoAutoRenameList">
            <summary>
            Get or sets the no-automatic-renaming list as a single string of comma-separated identifiers
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CodeSettings.KnownGlobalCollection">
            <summary>
            Returns the known global name collection
            </summary>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.CodeSettings.SetKnownGlobalIdentifiers(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            sets the collection of known global names to the array of string passed to this method
            </summary>
            <param name="globalArray">collection of known global names</param>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.CodeSettings.AddKnownGlobal(System.String)">
            <summary>
            Add a known global identifier to the list
            </summary>
            <param name="identifier">global identifier</param>
            <returns>true if valid identifier; false if invalid identifier</returns>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CodeSettings.KnownGlobalNamesList">
            <summary>
            Returns or sets the known global names list as a single comma-separated string
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CodeSettings.DebugLookupCollection">
            <summary>
            Returns the set of debug lookups
            </summary>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.CodeSettings.SetDebugNamespaces(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Set the collection of debug "lookup" identifiers
            </summary>
            <param name="debugLookups">collection of debug lookup identifier strings</param>
            <returns>number of names successfully added to the collection</returns>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CodeSettings.DebugLookupList">
            <summary>
            string representation of the list of debug lookups, comma-separated
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CodeSettings.AlwaysEscapeNonAscii">
            <summary>
            Returns or sets a flag indicating whether to always escape non-ASCII characters as \uXXXX
            or to let the output encoding object handle that via the JsEncoderFallback object for the
            specified output encoding format. Default is false (let the Encoding object handle it).
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CodeSettings.AmdSupport">
            <summary>
            Returns or sets whether to perform extra tasks on AMD-style defines.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CodeSettings.CollapseToLiteral">
            <summary>
            collapse new Array() to [] and new Object() to {} [true]
            or leave ais [false]. Default is true.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CodeSettings.ConstStatementsMozilla">
            <summary>
            Returns or sets a boolean value indicating whether to use old-style const statements (just var-statements that
            define unchangeable fields) or new EcmaScript 6 lexical declarations.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CodeSettings.ErrorIfNotInlineSafe">
            <summary>
            Throw an error if a source string is not safe for inclusion 
            in an HTML inline script block. Default is false.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CodeSettings.EvalLiteralExpressions">
            <summary>
            Evaluate expressions containing only literal bool, string, numeric, or null values [true]
            Leave literal expressions alone and do not evaluate them [false]. Default is true.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CodeSettings.EvalTreatment">
            <summary>
            Returns or sets a settings value indicating how "safe" eval-statements are to be assumed.
            Ignore (default) means we can assume eval-statements will not reference any local variables and functions.
            MakeImmediateSafe assumes eval-statements will reference local variables and function within the same scope.
            MakeAllSafe assumes eval-statements will reference any accessible local variable or function.
            Local variables that we assume may be referenced by eval-statements cannot be automatically renamed.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CodeSettings.Format">
            <summary>
            Returns or sets the format to use for the JavaScript processing.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CodeSettings.IgnoreConditionalCompilation">
            <summary>
            Returns or sets a boolean value indicating whether or not to ignore conditional-compilation comment syntax (true) or
            to try to retain the comments in the output (false; default)
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CodeSettings.IgnorePreprocessorDefines">
            <summary>
            Returns or sets a boolean value indicating whether or not to ignore preprocessor defines comment syntax (true) or
            to evaluate them (false; default)
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CodeSettings.InlineSafeStrings">
            <summary>
            Returns or sets a boolean value indicating whether to break up string literals containing &lt;/script&gt; so inline code won't break [true, default]
            or to leave string literals as-is [false]
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CodeSettings.LocalRenaming">
            <summary>
            Returns or sets a boolean value indicating whether/how local variables and functions should be automatically renamed:
            KeepAll - do not rename local variables and functions; 
            CrunchAll - rename all local variables and functions to shorter names; 
            KeepLocalizationVars - rename all local variables and functions that do NOT start with L_
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CodeSettings.MacSafariQuirks">
            <summary>
            Returns or sets a boolean value indicating whether to add characters to the output to make sure Mac Safari bugs are not generated [true, default], or to
            disregard potential known Mac Safari bugs in older versions [false]
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CodeSettings.MinifyCode">
            <summary>
            Returns or sets a boolean value indicating whether any operations are to be applied to the parsed tree [true, default],
            or whether to return it as-is [false]. 
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CodeSettings.ManualRenamesProperties">
            <summary>
            Returns or sets a boolean value indicating whether object property names with the specified "from" names will
            get renamed to the corresponding "to" names (true, default) when using the manual-rename feature, or left alone (false)
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CodeSettings.PreprocessOnly">
            <summary>
            Returns or sets a boolean value indicating whether or not the input files should be preprocessed only (default is false)
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CodeSettings.PreserveFunctionNames">
            <summary>
            Returns or sets whether all function names must be preserved and remain as-named (true),
            or can be automatically renamed (false, default).
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CodeSettings.PreserveImportantComments">
            <summary>
            Returns or sets whether to preserve important comments in the output.
            Default is true, preserving important comments. Important comments have an exclamation
            mark as the very first in-comment character (//! or /*!).
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CodeSettings.QuoteObjectLiteralProperties">
            <summary>
            Returns or sets whether to always quote object literal property names.
            Default is false.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CodeSettings.ReorderScopeDeclarations">
            <summary>
            Returns or sets whether or not to reorder function and variable
            declarations within scopes (true, default), or to leave the order as specified in 
            the original source.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CodeSettings.RemoveFunctionExpressionNames">
            <summary>
            Returns or sets whether or not to remove unreferenced function expression names (true, default)
            or to leave the names of function expressions, even if they are unreferenced (false).
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CodeSettings.RemoveUnneededCode">
            <summary>
            Returns or sets a boolean value indicating whether to remove unneeded code, such as uncalled local functions or unreachable code [true, default], 
            or to keep such code in the output [false].
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CodeSettings.ScriptVersion">
            <summary>
            Returns or sets an enumeration that gives the parser a hint as to which version of EcmaScript standards to parse the source as.
            See <see cref="P:Microsoft.Ajax.Utilities.JSParser.ParsedVersion"/> after parsing for which version the parser thought it had based on features found in the script.
            Errors/warnings, and optimized output may change based on this settings value.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CodeSettings.SourceMode">
            <summary>
            Returns or sets the source mode
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CodeSettings.StrictMode">
            <summary>
            Returns or sets a boolean value indicating whether or not to force the input code into strict mode (true)
            or rely on the sources to turn on strict mode via the "use strict" prologue directive (false, default).
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CodeSettings.StripDebugStatements">
            <summary>
            Returns or sets a boolean value indicating whether to strip debug statements [true, default],
            or leave debug statements in the output [false]
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CodeSettings.SymbolsMap">
            <summary>
            Returns or sets the <see cref="T:Microsoft.Ajax.Utilities.ISourceMap"/> instance. Default is null, which won't output a symbol map.
            </summary>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.CodeSettings.IsModificationAllowed(Microsoft.Ajax.Utilities.TreeModifications)">
            <summary>
            Determine whether a particular AST tree modification is allowed, or has
            been squelched (regardless of any other settings)
            </summary>
            <param name="modification">one or more tree modification settings</param>
            <returns>true only if NONE of the passed modifications have their kill bits set</returns>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.TreeModifications.None">
            <summary>
            Default. No specific tree modification
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.TreeModifications.PreserveImportantComments">
            <summary>
            Preserve "important" comments in output: /*! ... */
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.TreeModifications.BracketMemberToDotMember">
            <summary>
            Replace a member-bracket call with a member-dot construct if the member
            name is a string literal that can be an identifier.
            A["B"] ==&gt; A.B
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.TreeModifications.NewObjectToObjectLiteral">
            <summary>
            Replace a new Object constructor call with an object literal
            new Object() ==&gt; {}
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.TreeModifications.NewArrayToArrayLiteral">
            <summary>
            Change Array constructor calls with array literals.
            Does not replace constructors called with a single numeric parameter
            (could be a capacity contructor call).
            new Array() ==&gt; []
            new Array(A,B,C) ==&gt; [A,B,C]
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.TreeModifications.RemoveEmptyDefaultCase">
            <summary>
            Remove the default case in a switch statement if the block contains
            only a break statement.
            remove default:break;
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.TreeModifications.RemoveEmptyCaseWhenNoDefault">
            <summary>
            If there is no default case, remove any case statements that contain
            only a single break statement.
            remove case A:break;
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.TreeModifications.RemoveBreakFromLastCaseBlock">
            <summary>
            Remove the break statement from the last case block of a switch statement.
            switch(A){case B: C;break;} ==&gt; switch(A){case B:C;}
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.TreeModifications.RemoveEmptyFinally">
            <summary>
            Remove an empty finally statement if there is a non-empty catch block.
            try{...}catch(E){...}finally{} ==&gt; try{...}catch(E){...}
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.TreeModifications.RemoveDuplicateVar">
            <summary>
            Remove duplicate var declarations in a var statement that have no initializers.
            var A,A=B  ==&gt;  var A=B
            var A=B,A  ==&gt;  var A=B
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.TreeModifications.CombineVarStatements">
            <summary>
            Combine adjacent var statements.
            var A;var B  ==&gt;  var A,B
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.TreeModifications.MoveVarIntoFor">
            <summary>
            Move preceeding var statement into the initializer of the for statement.
            var A;for(var B;;);  ==&gt;  for(var A,B;;);
            var A;for(;;)  ==&gt; for(var A;;)
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.TreeModifications.VarInitializeReturnToReturnInitializer">
            <summary>
            Combine adjacent var statement and return statement to a single return statement
            var A=B;return A  ==&gt; return B
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.TreeModifications.IfEmptyToExpression">
            <summary>
            Replace an if-statement that has empty true and false branches with just the 
            condition expression.
            if(A);else;  ==&gt; A;
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.TreeModifications.IfConditionCallToConditionAndCall">
            <summary>
            replace if-statement that only has a single call statement in the true branch
            with a logical-and statement
            if(A)B() ==&gt; A&amp;&amp;B()
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.TreeModifications.IfElseReturnToReturnConditional">
            <summary>
            Replace an if-else-statement where both branches are only a single return
            statement with a single return statement and a conditional operator.
            if(A)return B;else return C  ==&gt;  return A?B:C 
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.TreeModifications.IfConditionReturnToCondition">
            <summary>
            If a function ends in an if-statement that only has a true-branch containing
            a single return statement with no operand, replace the if-statement with just
            the condition expression.
            function A(...){...;if(B)return}  ==&gt; function A(...){...;B}
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.TreeModifications.IfConditionFalseToIfNotConditionTrue">
            <summary>
            If the true-block of an if-statment is empty and the else-block is not,
            negate the condition and move the else-block to the true-block.
            if(A);else B  ==&gt;  if(!A)B
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.TreeModifications.CombineAdjacentStringLiterals">
            <summary>
            Combine adjacent string literals.
            "A"+"B"  ==&gt; "AB"
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.TreeModifications.RemoveUnaryPlusOnNumericLiteral">
            <summary>
            Remove unary-plus operators when the operand is a numeric literal
            +123  ==&gt;  123
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.TreeModifications.ApplyUnaryMinusToNumericLiteral">
            <summary>
            Apply (and cascade) unary-minus operators to the value of a numeric literal
            -(4)  ==&gt;  -4   (unary minus applied to a numeric 4 ==&gt; numeric -4)
            -(-4)  ==&gt;  4   (same as above, but cascading)
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.TreeModifications.MinifyStringLiterals">
            <summary>
            Apply minification technics to string literals
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.TreeModifications.MinifyNumericLiterals">
            <summary>
            Apply minification techniques to numeric literals
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.TreeModifications.RemoveUnusedParameters">
            <summary>
            Remove unused function parameters
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.TreeModifications.StripDebugStatements">
            <summary>
            remove "debug" statements
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.TreeModifications.LocalRenaming">
            <summary>
            Rename local variables and functions
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.TreeModifications.RemoveFunctionExpressionNames">
            <summary>
            Remove unused function expression names
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.TreeModifications.RemoveUnnecessaryLabels">
            <summary>
            Remove unnecessary labels from break or continue statements
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.TreeModifications.RemoveUnnecessaryCCOnStatements">
            <summary>
            Remove unnecessary @cc_on statements
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.TreeModifications.DateGetTimeToUnaryPlus">
            <summary>
            Convert (new Date()).getTime() to +new Date
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.TreeModifications.EvaluateNumericExpressions">
            <summary>
            Evaluate numeric literal expressions.
            1 + 2  ==&gt; 3
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.TreeModifications.SimplifyStringToNumericConversion">
            <summary>
            Simplify a common method on converting string to numeric: 
            lookup - 0  ==&gt; +lookup
            (Subtracting zero converts lookup to number, then doesn't modify
            it; unary plus also converts operand to numeric)
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.TreeModifications.PropertyRenaming">
            <summary>
            Rename properties in object literals, member-dot, and member-bracket operations
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.TreeModifications.RemoveQuotesFromObjectLiteralNames">
            <summary>
            Remove the quotes arounf objectl literal property names when
            the names are valid identifiers.
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.TreeModifications.BooleanLiteralsToNotOperators">
            <summary>
            Change boolean literals to not operators.
            true  -> !0
            false -> !1
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.TreeModifications.IfExpressionsToExpression">
            <summary>
            Change if-statements with expression statements as their branches to expressions
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.TreeModifications.CombineAdjacentExpressionStatements">
            <summary>
            Combine adjacent expression statements into a single expression statement
            using the comma operator
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.TreeModifications.ReduceStrictOperatorIfTypesAreSame">
            <summary>
            If the types of both sides of a strict operator (=== or !==) are known
            to be the same, we can reduce the operators to == or !=
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.TreeModifications.ReduceStrictOperatorIfTypesAreDifferent">
            <summary>
            If the types of both sides of a strict operator (=== or !==) are known
            to be different, than we can reduct the binary operator to false or true (respectively)
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.TreeModifications.MoveFunctionToTopOfScope">
            <summary>
            Move function declarations to the top of the containing scope
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.TreeModifications.CombineVarStatementsToTopOfScope">
            <summary>
            Combine var statements at the top of the containing scope
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.TreeModifications.IfNotTrueFalseToIfFalseTrue">
            <summary>
            If the condition of an if-statement or conditional starts with a not-operator,
            get rid of the not-operator and swap the true/false branches.
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.TreeModifications.MoveInExpressionsIntoForStatement">
            <summary>
            Whether it's okay to move an expression containing an in-operator into a for-statement.
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.TreeModifications.InvertIfReturn">
            <summary>
            Whether it's okay to convert function...{...if(cond)return;s1;s2} to function...{...if(!cond){s1;s2}}
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.TreeModifications.CombineNestedIfs">
            <summary>
            Whether it's okay to combine nested if-statments if(cond1)if(cond2){...} to if(cond1&amp;&amp;cond2){...}
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.TreeModifications.CombineEquivalentIfReturns">
            <summary>
            Whether it's okay to combine equivalent if-statments that return the same expression.
            if(cond1)return expr;if(cond2)return expr; =&gt; if(cond1||cond2)return expr;
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.TreeModifications.ChangeWhileToFor">
            <summary>
            Whether to convert certain while-statements to for-statements.
            while(1)... => for(;;)...
            var ...;while(1)... => for(var ...;;)
            var ...;while(cond)... => for(var ...;cond;)...
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.TreeModifications.InvertIfContinue">
            <summary>
            Whether to invert iterator{if(cond)continue;st1;st2} to iterator{if(!cond){st1;st2}}
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.TreeModifications.EvaluateLiteralJoins">
            <summary>
            Whether to convert [a,b,c].join(s) to "asbsc" if all items are constants.
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.TreeModifications.RemoveUnusedVariables">
            <summary>
            Whether we should remove unused variable, or variables assigned a constant in their
            initializer and referenced only once.
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.TreeModifications.UnfoldCommaExpressionStatements">
            <summary>
            Whether we should unfold comma-separated expressions statements into separate statements
            as a final minification step (if it doesn't create more bytes)
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.TreeModifications.EvaluateLiteralLengths">
            <summary>
            Whether to convert [a,b,c].length to 3 (if all items are constants)
            and "123".length to 3 
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.TreeModifications.RemoveWindowDotFromTypeOf">
            <summary>
            Whether to remove the "window." portion of a typeof operand
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.TreeModifications.CultureInfoTokenReplacement">
            <summary>
            Whether to perform CultureInfo.CurrentCulture replacements on stand-alone and full-string tokens
            </summary>
        </member>
        <member name="T:Microsoft.Ajax.Utilities.ComprehensionClause">
            <summary>
            Base class for ComprehensionForClause and ComprehensionIfClause
            </summary>
        </member>
        <member name="T:Microsoft.Ajax.Utilities.ConstStatement">
            <summary>
            Old-style const-statement, pre-ES6, for those browsers that basically implemented
            a var that can't be assigned to outside the declaration. Have to set the 
            <see cref="P:Microsoft.Ajax.Utilities.CodeSettings.ConstStatementsMozilla" /> property to true to get these objects
            parsed, because we default to the ES6 behavior.
            </summary>
        </member>
        <member name="T:Microsoft.Ajax.Utilities.StringList">
            <summary>
            Array of strings which can be converted to string using a single allocation and single copy
            </summary>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.ConstantWrapper.Concat(Microsoft.Ajax.Utilities.ConstantWrapper)">
            <summary>
            Optimized string literal concatenation for repeat usage pattern, avoiding multiple copying and allocation
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.Context.OutputLine">
            <summary>
            Returns and sets the output start line after running an AST through an output visitor 
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.Context.OutputColumn">
            <summary>
            Returns and sets the output start column after running an AST through an output visitor
            </summary>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.Context.CombineWith(Microsoft.Ajax.Utilities.Context)">
            <summary>
            Create a new context by combining the current and other contexts
            </summary>
            <param name="other">other context</param>
            <returns>new context instance</returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.Context.SplitStart(System.Int32)">
            <summary>
            Trim off the first few characters of the context and return those characters
            as a new context. Doesn't work if the length crosses a line boundary!
            </summary>
            <param name="length">number of characters to trim off the front of this token</param>
            <returns>context for the trimmed-off portion</returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.Context.UpdateWith(Microsoft.Ajax.Utilities.Context)">
            <summary>
            updates the current context with the other context
            </summary>
            <param name="other">other context</param>
            <returns>current context for chaining purposes</returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.Context.GetSeverity(Microsoft.Ajax.Utilities.JSError)">
            <summary>
            Return the default severity for a given JSError value
            guide: 0 == there will be a run-time error if this code executes
                   1 == the programmer probably did not intend to do this
                   2 == this can lead to cross-browser or future problems.
                   3 == this can lead to performance problems
                   4 == this is just not right
            </summary>
            <param name="errorCode">error code</param>
            <returns>severity</returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.CrunchEnumerator.GenerateNameFromNumber(System.Int32)">
            <summary>
            get the algorithmically-generated minified variable name based on the given number
            zero is the first name, 1 is the next, etc. This method needs to be tuned to
            get better gzip results.
            </summary>
            <param name="index">integer position of the name to retrieve</param>
            <returns>minified variable name</returns>
        </member>
        <member name="T:Microsoft.Ajax.Utilities.ReferenceComparer">
            <summary>
            this class is used to sort the crunchable local fields in a scope so that the fields
            most in need of crunching get crunched first, therefore having the smallest-length
            crunched variable name.
            Highest priority are the fields most-often referenced.
            Among fields with the same reference count, the longest fields get priority.
            Lastly, alphabetize.
            </summary>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.ReferenceComparer.Compare(Microsoft.Ajax.Utilities.JSVariableField,Microsoft.Ajax.Utilities.JSVariableField)">
            <summary>
            sorting method for fields that will be renamed in the minification process.
            The order of the fields determines which minified name it will receive --
            the earlier in the list, typically the smaller, more-common the minified name.
            Tune this method to get better gzip results.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Ajax.Utilities.CustomNode">
            <summary>
            This is a base-class for any custom AST nodes someone may want to implement. It allows 
            these nodes to be hooked into the IVisitor framework. If you wish to create custom AST nodes,
            derive from this class.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CustomNode.RequiresSeparator">
            <summary>
            Returns if to add a semicolon after the node when another node follows this inside a block
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.CustomNode.IsDebuggerStatement">
            <summary>
            Returns if the custom node is a debugger statement and should be stripped for release builds
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.Declaration.ContainsInOperator">
            <summary>
            Returns true if any of the variable declarations contain initializers using the in-operator
            </summary>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.DocumentContext.#ctor(System.String)">
            <summary>
            Create a new document context from the given source
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.EvaluateLiteralVisitor.ReplaceMemberBracketWithDot(Microsoft.Ajax.Utilities.BinaryOperator,Microsoft.Ajax.Utilities.ConstantWrapper)">
            <summary>
            If the new literal is a string literal, then we need to check to see if our
            parent is a CallNode. If it is, and if the string literal can be an identifier,
            we'll replace it with a Member-Dot operation.
            </summary>
            <param name="node">the operator node</param>
            <param name="newLiteral">newLiteral we intend to replace this binary op node with</param>
            <returns>true if we replaced the parent call node with a member-dot operation</returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.EvaluateLiteralVisitor.ReplaceNodeWithLiteral(Microsoft.Ajax.Utilities.AstNode,Microsoft.Ajax.Utilities.ConstantWrapper)">
            <summary>
            replace the node with a literal. If the node was wrapped in a grouping operator
            before (parentheses around it), then we can get rid of the parentheses too, since
            we are replacing the node with a single literal entity.
            </summary>
            <param name="node">node to replace</param>
            <param name="newLiteral">literal to replace the node with</param>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.EvaluateLiteralVisitor.EvalThisOperator(Microsoft.Ajax.Utilities.BinaryOperator,Microsoft.Ajax.Utilities.ConstantWrapper,Microsoft.Ajax.Utilities.ConstantWrapper)">
            <summary>
            Both the operands of this operator are constants. See if we can evaluate them
            </summary>
            <param name="node">the operator node</param>
            <param name="left">left-side operand</param>
            <param name="right">right-side operand</param>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.EvaluateLiteralVisitor.RotateFromLeft(Microsoft.Ajax.Utilities.BinaryOperator,Microsoft.Ajax.Utilities.BinaryOperator,Microsoft.Ajax.Utilities.ConstantWrapper)">
            <summary>
            We have determined that our left-hand operand is another binary operator, and its
            right-hand operand is a constant that can be combined with our right-hand operand.
            Now we want to set the right-hand operand of that other operator to the newly-
            combined constant value, and then rotate it up -- replace our binary operator
            with this newly-modified binary operator, and then attempt to re-evaluate it.
            </summary>
            <param name="node">the operator node</param>
            <param name="binaryOp">the binary operator that is our left-hand operand</param>
            <param name="newLiteral">the newly-combined literal</param>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.EvaluateLiteralVisitor.RotateFromRight(Microsoft.Ajax.Utilities.BinaryOperator,Microsoft.Ajax.Utilities.BinaryOperator,Microsoft.Ajax.Utilities.ConstantWrapper)">
            <summary>
            We have determined that our right-hand operand is another binary operator, and its
            left-hand operand is a constant that can be combined with our left-hand operand.
            Now we want to set the left-hand operand of that other operator to the newly-
            combined constant value, and then rotate it up -- replace our binary operator
            with this newly-modified binary operator, and then attempt to re-evaluate it.
            </summary>
            <param name="node">the operator node</param>
            <param name="binaryOp">the binary operator that is our right-hand operand</param>
            <param name="newLiteral">the newly-combined literal</param>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.EvaluateLiteralVisitor.NoMultiplicativeOverOrUnderFlow(Microsoft.Ajax.Utilities.ConstantWrapper,Microsoft.Ajax.Utilities.ConstantWrapper,Microsoft.Ajax.Utilities.ConstantWrapper)">
            <summary>
            Return true is not an overflow or underflow, for multiplication operations
            </summary>
            <param name="left">left operand</param>
            <param name="right">right operand</param>
            <param name="result">result</param>
            <returns>true if result not overflow or underflow; false if it is</returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.EvaluateLiteralVisitor.NoOverflow(Microsoft.Ajax.Utilities.ConstantWrapper)">
            <summary>
            Return true if the result isn't an overflow condition
            </summary>
            <param name="result">result constant</param>
            <returns>true is not an overflow; false if it is</returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.EvaluateLiteralVisitor.EvalToTheLeft(Microsoft.Ajax.Utilities.BinaryOperator,Microsoft.Ajax.Utilities.ConstantWrapper,Microsoft.Ajax.Utilities.ConstantWrapper,Microsoft.Ajax.Utilities.BinaryOperator)">
            <summary>
            Evaluate: (OTHER [op] CONST) [op] CONST
            </summary>
            <param name="node">the operator node</param>
            <param name="thisConstant">second constant</param>
            <param name="otherConstant">first constant</param>
            <param name="leftOperator">first operator</param>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.EvaluateLiteralVisitor.EvalFarToTheLeft(Microsoft.Ajax.Utilities.BinaryOperator,Microsoft.Ajax.Utilities.ConstantWrapper,Microsoft.Ajax.Utilities.ConstantWrapper,Microsoft.Ajax.Utilities.BinaryOperator)">
            <summary>
            Evaluate: (CONST [op] OTHER) [op] CONST
            </summary>
            <param name="node">the operator node</param>
            <param name="thisConstant">second constant</param>
            <param name="otherConstant">first constant</param>
            <param name="leftOperator">first operator</param>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.EvaluateLiteralVisitor.EvalToTheRight(Microsoft.Ajax.Utilities.BinaryOperator,Microsoft.Ajax.Utilities.ConstantWrapper,Microsoft.Ajax.Utilities.ConstantWrapper,Microsoft.Ajax.Utilities.BinaryOperator)">
            <summary>
            Evaluate: CONST [op] (CONST [op] OTHER)
            </summary>
            <param name="node">the operator node</param>
            <param name="thisConstant">first constant</param>
            <param name="otherConstant">second constant</param>
            <param name="rightOperator">second operator</param>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.EvaluateLiteralVisitor.EvalFarToTheRight(Microsoft.Ajax.Utilities.BinaryOperator,Microsoft.Ajax.Utilities.ConstantWrapper,Microsoft.Ajax.Utilities.ConstantWrapper,Microsoft.Ajax.Utilities.BinaryOperator)">
            <summary>
            Evaluates the two constants: CONST [op] (OTHER [op] CONST)
            </summary>
            <param name="node">the operator node</param>
            <param name="thisConstant">first constant</param>
            <param name="otherConstant">second constant</param>
            <param name="rightOperator">second operator</param>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.ForNode.Separator1Context">
            <summary>Context for the first semicolon, separating the initializer and the condition</summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.ForNode.Separator2Context">
            <summary>Context for the second semicolon, separating the condition and the incrementor</summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.FunctionObject.IsGenerator">
            <summary>
            Returns or sets whether this function object is a generator
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.FunctionObject.IsReferenced">
            <summary>
            Check to see if this function is referenced. Perform a cyclic check
            because being referenced by an unreferenced function is still unreferenced.
            </summary>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.FunctionScope.DeclareScope">
            <summary>
            Set up this scopes lexically- and var-declared fields, plus formal parameters and the arguments object
            </summary>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.GlobalScope.DeclareScope">
            <summary>
            Set up this scope's fields from the declarations it contains
            </summary>
        </member>
        <member name="T:Microsoft.Ajax.Utilities.GroupingOperator">
            <summary>
            Implementation of parenthetical '(' expr ')' operators
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.ImportExportSpecifier.Name">
            <summary>
            Returns the name that is declared for this specifier.
            Only used if there was no local identifier defined and we added the external name to our scope.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.ImportExportSpecifier.Initializer">
            <summary>
            Returns null; import specifiers are not parameters.
            Only used if there was no local identifier defined and we added the external name to our scope.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.ImportExportSpecifier.IsParameter">
            <summary>
            Returns a flag indicating that this is not a parameter
            Only used if there was no local identifier defined and we added the external name to our scope.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.ImportExportSpecifier.RenameNotAllowed">
            <summary>
            Returns a flag to indicate that imported external named cannot be renamed.
            Only used if there was no local identifier defined and we added the external name to our scope.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.ImportExportSpecifier.VariableField">
            <summary>
            Returns or sets a variable field corresponding to an import specifiers imported external name
            Only used if there was no local identifier defined and we added the external name to our scope.
            </summary>
        </member>
        <member name="T:Microsoft.Ajax.Utilities.InitializerNode">
            <summary>
            Initializer used in bindings
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.IRenameable.OriginalName">
            <summary>Gets the original name of the item, before renaming</summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.IRenameable.WasRenamed">
            <summary>Gets whether or not the item was renamed.</summary>
        </member>
        <member name="T:Microsoft.Ajax.Utilities.JScript">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.AmbiguousCatchVar">
            <summary>
              Looks up a localized string similar to Ambiguous catch identifier. Cross-browser behavior difference. .
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.AmbiguousNamedFunctionExpression">
            <summary>
              Looks up a localized string similar to Ambiguous reference to named function expression. Cross-browser behavior difference.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.ApplicationError">
            <summary>
              Looks up a localized string similar to Application failed. Please report this issue..
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.ArgumentNotReferenced">
            <summary>
              Looks up a localized string similar to Argument defined but not referenced.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.ArrayLiteralTrailingComma">
            <summary>
              Looks up a localized string similar to Trailing comma in array literal; cross-browser difference.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.ArrowCannotBeConstructor">
            <summary>
              Looks up a localized string similar to Arrow functions cannot be constructors.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.AssignmentToConstant">
            <summary>
              Looks up a localized string similar to Assignment to constant.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.BadBindingSyntax">
            <summary>
              Looks up a localized string similar to Invalid binding syntax.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.BadBreak">
            <summary>
              Looks up a localized string similar to Can&apos;t have &apos;break&apos; outside of loop.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.BadContinue">
            <summary>
              Looks up a localized string similar to Can&apos;t have &apos;continue&apos; outside of loop.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.BadHexEscapeSequence">
            <summary>
              Looks up a localized string similar to Invalid hexadecimal escape sequence.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.BadLabel">
            <summary>
              Looks up a localized string similar to Label redefined.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.BadNumericLiteral">
            <summary>
              Looks up a localized string similar to Invalid numeric literal.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.BadReturn">
            <summary>
              Looks up a localized string similar to &apos;return&apos; statement outside of function.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.BadSwitch">
            <summary>
              Looks up a localized string similar to Missing &apos;case&apos; or &apos;default&apos; statement.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.BindingPatternRequiresInitializer">
            <summary>
              Looks up a localized string similar to Binding pattern requires initializer.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.CCInvalidElse">
            <summary>
              Looks up a localized string similar to Unmatched &apos;@else&apos;; no &apos;@if&apos; defined.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.CCInvalidElseIf">
            <summary>
              Looks up a localized string similar to Unmatched &apos;@elif&apos;; no &apos;@if&apos; defined.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.CCInvalidEnd">
            <summary>
              Looks up a localized string similar to Unmatched &apos;@end&apos;; no &apos;@if&apos; defined.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.CCOff">
            <summary>
              Looks up a localized string similar to Conditional compilation is turned off.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.ClassElementExpected">
            <summary>
              Looks up a localized string similar to Expected class element.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.ConditionalCompilationTooComplex">
            <summary>
              Looks up a localized string similar to Conditional compilation expression not supported. Comment ignored.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.DupDefault">
            <summary>
              Looks up a localized string similar to &apos;default&apos; can only appear once in a &apos;switch&apos; statement.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.DuplicateCatch">
            <summary>
              Looks up a localized string similar to Variable or function declaration redefines the catch error name.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.DuplicateClassElementName">
            <summary>
              Looks up a localized string similar to Duplicate class element name.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.DuplicateConstantDeclaration">
            <summary>
              Looks up a localized string similar to Constant declaration already declared.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.DuplicateLexicalDeclaration">
            <summary>
              Looks up a localized string similar to Duplicate lexical declaration; cannot redefine let or const variables.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.DuplicateModuleDeclaration">
            <summary>
              Looks up a localized string similar to Duplicate module declaration.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.DuplicateName">
            <summary>
              Looks up a localized string similar to Name is already defined.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.ErrorEndOfFile">
            <summary>
              Looks up a localized string similar to Expecting more source characters.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.ExportNotAtModuleLevel">
            <summary>
              Looks up a localized string similar to Export statements must be at top level of module.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.ExpressionExpected">
            <summary>
              Looks up a localized string similar to Expected expression.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.FunctionExpressionExpected">
            <summary>
              Looks up a localized string similar to Function expression expected.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.FunctionNameMustBeIdentifier">
            <summary>
              Looks up a localized string similar to Function name should be a simple identifier; possible browser-specific implementation.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.FunctionNotReferenced">
            <summary>
              Looks up a localized string similar to Function defined but not referenced.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.HighSurrogate">
            <summary>
              Looks up a localized string similar to High-surrogate pair value not followed by low-surrogate value.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.IllegalAssignment">
            <summary>
              Looks up a localized string similar to Illegal assignment.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.IllegalChar">
            <summary>
              Looks up a localized string similar to Invalid character.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.ImplicitPropertyNameMustBeIdentifier">
            <summary>
              Looks up a localized string similar to Implicit property name must be identifier.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.ImportNoModuleName">
            <summary>
              Looks up a localized string similar to Import statement must include module name.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.InvalidElse">
            <summary>
              Looks up a localized string similar to Unmatched &apos;else&apos;; no &apos;if&apos; defined.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.JSParserException">
            <summary>
              Looks up a localized string similar to JSParser Exception.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.KeywordUsedAsIdentifier">
            <summary>
              Looks up a localized string similar to Reserved words and should not be used as an identifier; cross-browser differences.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.LowSurrogate">
            <summary>
              Looks up a localized string similar to Low-surrogate pair value not following a high-surrogate value.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.MethodsNotAllowedInBindings">
            <summary>
              Looks up a localized string similar to Methods not allowed in object literal bindings.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.MisplacedFunctionDeclaration">
            <summary>
              Looks up a localized string similar to Function declaration should not be inside a statement. Cross-browser behavior difference.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.MultipleDefaultExports">
            <summary>
              Looks up a localized string similar to Multiple default exports.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.NewLineNotAllowed">
            <summary>
              Looks up a localized string similar to New line not allowed.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.NoBinding">
            <summary>
              Looks up a localized string similar to Expected binding syntax.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.NoCatch">
            <summary>
              Looks up a localized string similar to Expected &apos;catch&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.NoCCEnd">
            <summary>
              Looks up a localized string similar to Expected &apos;@end&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.NoColon">
            <summary>
              Looks up a localized string similar to Expected &apos;:&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.NoComma">
            <summary>
              Looks up a localized string similar to Expected &apos;,&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.NoCommentEnd">
            <summary>
              Looks up a localized string similar to Unterminated comment.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.NoDefaultModuleExport">
            <summary>
              Looks up a localized string similar to Imported module has no default export.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.NoEndDebugDirective">
            <summary>
              Looks up a localized string similar to Expected ///#ENDDEBUG directive.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.NoEndIfDirective">
            <summary>
              Looks up a localized string similar to Expected ///#ENDIF directive.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.NoEqual">
            <summary>
              Looks up a localized string similar to Expected &apos;=&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.NoExpectedFrom">
            <summary>
              Looks up a localized string similar to Expected &quot;from&quot;.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.NoForOrIf">
            <summary>
              Looks up a localized string similar to Expected &apos;for&apos; or &apos;if&apos; keyword.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.NoIdentifier">
            <summary>
              Looks up a localized string similar to Expected identifier.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.NoLabel">
            <summary>
              Looks up a localized string similar to Label not found.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.NoLeftCurly">
            <summary>
              Looks up a localized string similar to Expected &apos;{&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.NoLeftParenthesis">
            <summary>
              Looks up a localized string similar to Expected &apos;(&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.NoMemberIdentifier">
            <summary>
              Looks up a localized string similar to Expected identifier or string.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.NoModuleExport">
            <summary>
              Looks up a localized string similar to Imported module does not export name.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.NoRightBracket">
            <summary>
              Looks up a localized string similar to Expected &apos;]&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.NoRightBracketOrComma">
            <summary>
              Looks up a localized string similar to Expected &apos;,&apos; or &apos;]&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.NoRightCurly">
            <summary>
              Looks up a localized string similar to Expected &apos;}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.NoRightParenthesis">
            <summary>
              Looks up a localized string similar to Expected &apos;)&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.NoRightParenthesisOrComma">
            <summary>
              Looks up a localized string similar to Expected &apos;,&apos; or &apos;)&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.NoSemicolon">
            <summary>
              Looks up a localized string similar to Expected &apos;;&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.NoSource">
            <summary>
              Looks up a localized string similar to No source set on parser.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.NoSpecifierSet">
            <summary>
              Looks up a localized string similar to Expected specifier set.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.NoStringLiteral">
            <summary>
              Looks up a localized string similar to Expected string literal.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.NoWhile">
            <summary>
              Looks up a localized string similar to Expected &apos;while&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.NumericMaximum">
            <summary>
              Looks up a localized string similar to Consider replacing maximum numeric literal with Number.MAX_VALUE.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.NumericMinimum">
            <summary>
              Looks up a localized string similar to Consider replacing minimum numeric literal with Number.MIN_VALUE.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.NumericOverflow">
            <summary>
              Looks up a localized string similar to Numeric literal evaluates to Number.POSITIVE_INFINITY or Number.NEGATIVE_INFINITY.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.ObjectConstructorTakesNoArguments">
            <summary>
              Looks up a localized string similar to Object constructor should take no arguments.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.ObjectLiteralKeyword">
            <summary>
              Looks up a localized string similar to Reserved word used as object literal property name; cross-browser issue..
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.OctalLiteralsDeprecated">
            <summary>
              Looks up a localized string similar to Octal literals are deprecated. Possible cross-browser behavior difference.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.ParameterListNotLast">
            <summary>
              Looks up a localized string similar to A variable argument list must be the last argument.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.RegExpSyntax">
            <summary>
              Looks up a localized string similar to Syntax error in regular expression.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.ResourceReferenceMustBeConstant">
            <summary>
              Looks up a localized string similar to Resource reference must be single constant argument.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.RestParameterNotLast">
            <summary>
              Looks up a localized string similar to Rest parameter can only be in last position.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.SemicolonInsertion">
            <summary>
              Looks up a localized string similar to Semicolon insertion rules applied.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.SetterMustHaveOneParameter">
            <summary>
              Looks up a localized string similar to Setter methods must have a single formal argument.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.SpecialConstructor">
            <summary>
              Looks up a localized string similar to Class constructor must be normal method.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.StatementBlockExpected">
            <summary>
              Looks up a localized string similar to Always use full statement blocks.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.StaticPrototype">
            <summary>
              Looks up a localized string similar to Class static method cannot be named &quot;prototype&quot;.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.StrictComparisonIsAlwaysTrueOrFalse">
            <summary>
              Looks up a localized string similar to Strict operator always evaluates to true or false.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.StrictModeArgumentName">
            <summary>
              Looks up a localized string similar to Strict-mode does not allow certain argument names.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.StrictModeCatchName">
            <summary>
              Looks up a localized string similar to Strict-mode does not allow certain catch binding names.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.StrictModeDuplicateArgument">
            <summary>
              Looks up a localized string similar to Strict-mode does not allow duplicate argument names.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.StrictModeDuplicateProperty">
            <summary>
              Looks up a localized string similar to Strict-mode does not allow duplicate property names.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.StrictModeFunctionName">
            <summary>
              Looks up a localized string similar to Strict-mode does not allow certain function names.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.StrictModeInvalidAssign">
            <summary>
              Looks up a localized string similar to Strict-mode does not allow assignment to certain variables.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.StrictModeInvalidDelete">
            <summary>
              Looks up a localized string similar to Strict-mode does not allow certain delete operands.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.StrictModeInvalidPreOrPost">
            <summary>
              Looks up a localized string similar to Strict-mode does not allow ++ or -- on certain objects.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.StrictModeNoWith">
            <summary>
              Looks up a localized string similar to Strict-mode does not allow with-statements.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.StrictModeUndefinedVariable">
            <summary>
              Looks up a localized string similar to Strict-mode does not allow assignment to undefined variables.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.StrictModeVariableName">
            <summary>
              Looks up a localized string similar to Strict-mode does not allow certain variable names.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.StringNotInlineSafe">
            <summary>
              Looks up a localized string similar to String literal is not safe for inline.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.SuspectAssignment">
            <summary>
              Looks up a localized string similar to Suspect assignment operator.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.SuspectEquality">
            <summary>
              Looks up a localized string similar to Suspect equality comparison.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.SuspectSemicolon">
            <summary>
              Looks up a localized string similar to Suspect semicolon.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.SyntaxError">
            <summary>
              Looks up a localized string similar to Syntax error.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.TooManyTokensSkipped">
            <summary>
              Looks up a localized string similar to Too many errors. The file might not be a JavaScript file.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.UnableToConvertFromBinding">
            <summary>
              Looks up a localized string similar to Unable to convert from binding to reference.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.UnableToConvertToBinding">
            <summary>
              Looks up a localized string similar to Unable to convert from reference to binding.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.UnclosedFunction">
            <summary>
              Looks up a localized string similar to End of file encountered before function is properly closed.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.UndeclaredFunction">
            <summary>
              Looks up a localized string similar to Function has not been defined.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.UndeclaredVariable">
            <summary>
              Looks up a localized string similar to Variable has not been declared.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.UnexpectedSemicolon">
            <summary>
              Looks up a localized string similar to Unexpected &apos;;&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.UnterminatedAspNetBlock">
            <summary>
              Looks up a localized string similar to Unterminated ASP.NET block.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.UnterminatedString">
            <summary>
              Looks up a localized string similar to Unterminated string constant.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.UnusedLabel">
            <summary>
              Looks up a localized string similar to Statement label never referenced.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.VariableDefinedNotReferenced">
            <summary>
              Looks up a localized string similar to Variable defined but not referenced.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JScript.WithNotRecommended">
            <summary>
              Looks up a localized string similar to &apos;with&apos; statement not recommended.
            </summary>
        </member>
        <member name="T:Microsoft.Ajax.Utilities.JSON">
            <summary>
            super-simple JSON parser/validator. Exposes a Validate method
            that takes a string and returns NULL if it isn't valid JSON, or
            a string representing the original JSON text with any whitespace
            removed.
            </summary>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.JSON.Validate(System.String)">
            <summary>
            Validate the given JSON string
            </summary>
            <param name="jsonText">JSON string to validate</param>
            <returns>null if not valid JSON; otherwise the original JSON text with whitespace removed</returns>
        </member>
        <member name="T:Microsoft.Ajax.Utilities.JSONOutputVisitor">
            <summary>
            output JSON-compatible code
            </summary>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.JSONOutputVisitor.NewLine">
            <summary>
             output a new line and setup the proper indent level
            </summary>
        </member>
        <member name="T:Microsoft.Ajax.Utilities.JSParser">
            <summary>
            Class used to parse JavaScript source code into an abstract syntax tree.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JSParser.EchoWriter">
            <summary>
            Returns or sets a TextWriter instance to which raw preprocessed input will be
            written when Parse is called.
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.JSParser.m_timingPoints">
            <summary>
            Returns the array of timing points from a Parse run
            </summary>
        </member>
        <member name="E:Microsoft.Ajax.Utilities.JSParser.CompilerError">
            <summary>
            Event sent whenever an error or warning is encountered during parsing
            </summary>
        </member>
        <member name="E:Microsoft.Ajax.Utilities.JSParser.UndefinedReference">
            <summary>
            Sent for undefined references found during parsing
            </summary>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.JSParser.#ctor">
            <summary>
            Creates an instance of the JavaScript parser object
            </summary>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.JSParser.#ctor(System.String)">
            <summary>
            Creates an instance of the JSParser class that can be used to parse the given source code.
            </summary>
            <param name="source">Source code to parse.</param>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.JSParser.Parse(Microsoft.Ajax.Utilities.DocumentContext)">
            <summary>
            Parse the given source context into an abstract syntax tree
            </summary>
            <param name="sourceContext">source code with context</param>
            <returns>a Block object representing the series of statements in abstract syntax tree form</returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.JSParser.Parse(Microsoft.Ajax.Utilities.DocumentContext,Microsoft.Ajax.Utilities.CodeSettings)">
            <summary>
            Parse the given source with context into an abstract syntax tree using the given settings
            </summary>
            <param name="sourceContext">source code with context</param>
            <param name="settings">settings to use for the parse operation</param>
            <returns>a Block object representing the series of statements in abstract syntax tree form</returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.JSParser.Parse(System.String)">
            <summary>
            Parse the given source into an abstract syntax tree with no context
            </summary>
            <param name="source">source code with no context</param>
            <returns>a Block object representing the series of statements in abstract syntax tree form</returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.JSParser.Parse(System.String,Microsoft.Ajax.Utilities.CodeSettings)">
            <summary>
            Parse the given source into an abstract syntax tree using the given settings
            </summary>
            <param name="source">source code to parse</param>
            <param name="settings">settings to use for the parse operation</param>
            <returns>a Block object representing the series of statements in abstract syntax tree form</returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.JSParser.Parse(Microsoft.Ajax.Utilities.CodeSettings)">
            <summary>
            Parse the source code using the given settings, getting back an abstract syntax tree Block node as the root
            representing the list of statements in the source code.
            </summary>
            <param name="settings">code settings to use to process the source code</param>
            <returns>root Block node representing the top-level statements</returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.JSParser.InternalParse">
            <summary>
            Parse the document source using the scanner and settings that have all been set up already
            through various combinations of constructor/properties/Parse methods.
            </summary>
            <returns>Parsed Block node</returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.JSParser.RemoveDuplicateDefines(Microsoft.Ajax.Utilities.Block)">
            <summary>
            Remove duplicate define calls, defined as defines with the same module name specified as the first
            parameter, if it's a string literal. Only the last define with a given name is preserved.
            </summary>
            <param name="scriptBlock">script block to remove defines from; not recursed</param>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.JSParser.SetDocumentContext(Microsoft.Ajax.Utilities.DocumentContext)">
            <summary>
            set the source by creating a document from the actual source and its context,
            then create and initialize a scanner for that document.
            </summary>
            <param name="documentContext">optional context for the source code</param>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.JSParser.ConvertNumericLiteralToDouble(System.String,System.Boolean,System.Double@)">
            <summary>
            Convert the given numeric string to a double value
            </summary>
            <param name="str">string representation of a number</param>
            <param name="isInteger">we should know alreasdy if it's an integer or not</param>
            <param name="doubleValue">output value</param>
            <returns>true if there were no problems; false if there were</returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.JSParser.ExpectSemicolon(Microsoft.Ajax.Utilities.AstNode)">
            <summary>
            Handle the expected semicolon at the current position for the given node.
            </summary>
            <param name="node">node that should end with a semicolon</param>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.JSParser.ReportError(Microsoft.Ajax.Utilities.JSError,Microsoft.Ajax.Utilities.Context,System.Boolean)">
            <summary>
             Generate a parser error.
             The function is told whether or not next call to GetToken() should return the same
             token or not
            </summary>
            <param name="errorId">Error to report</param>
            <param name="context">context to report against, or current token if null</param>
            <param name="forceToError">whether to force to an error, or use the default severity</param>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JSScanner.UsePreprocessorDefines">
            <summary>
            Returns or sets whether to use AjaxMin preprocessor defines or ignore them
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JSScanner.IgnoreConditionalCompilation">
            <summary>
            Returns or sets whether to completely ignore IE conditional-compilation comments
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JSScanner.AllowEmbeddedAspNetBlocks">
            <summary>
            Returns or sets whether to allow ASP.NET syntax within the script
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JSScanner.StripDebugCommentBlocks">
            <summary>
            Returns or sets whether to strip debug comment blocks entirely
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JSScanner.SuppressErrors">
            <summary>
            Returns or sets whether to suppress all scanning errors
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JSScanner.CurrentLine">
            <summary>
            Returns the current line of the input file
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JSScanner.IsEndOfFile">
            <summary>
            Returns if we have passed the end of the input source
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JSScanner.StartLinePosition">
            <summary>
            Returns the position within the source of the start of the current line
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JSScanner.LiteralHasIssues">
            <summary>
            Returns if the scanned literal has potential cross-browser issues
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JSScanner.StringLiteralValue">
            <summary>
            Returns the current decoded string literal value
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JSScanner.Identifier">
            <summary>
            Returns the current decoded identifier string
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JSScanner.CurrentToken">
            <summary>
            Returns the current token reference
            </summary>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.JSScanner.PeekClone">
            <summary>
            Clone for peek, reuse the same instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.JSScanner.SetPreprocessorDefines(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Set the list of preprocessor defined names and values
            </summary>
            <param name="defines">dictionary of name/value pairs</param>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.JSScanner.ScanNextToken">
            <summary>
            main method for the scanner; scans the next token from the input stream.
            </summary>
            <returns>next token from the input</returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.JSScanner.IsDigit(System.Char)">
            <summary>
            Returns true if the character is between '0' and '9' inclusive.
            Can't use char.IsDigit because that returns true for decimal digits in other language scripts as well.
            </summary>
            <param name="character">character to test</param>
            <returns>true if in ['0' '1' '2' '3' '4' '5' '6' '7' '8' '9']; false otherwise</returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.JSScanner.IsValidIdentifier(System.String)">
            <summary>
            Determines whether an unescaped string is a valid identifier.
            escape sequences and surrogate pairs are accounted for.
            </summary>
            <param name="name">potential identifier string</param>
            <returns>true if a valid JavaScript identifier; otherwise false</returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.JSScanner.IsValidIdentifierStart(System.String,System.Int32)">
            <summary>
            Determines if the character(s) at the given index is a valid identifier start
            </summary>
            <param name="text">potential identifier string</param>
            <param name="index">index of the starting character</param>
            <returns>true if the character at the given position is a valid identifier start</returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.JSScanner.IsValidIdentifierStart(System.String,System.Int32@)">
            <summary>
            Determines if the character(s) at the given index is a valid identifier start,
            and adjust the index to point to the following character
            </summary>
            <param name="name">potential identifier string</param>
            <param name="startIndex">index of the starting character on entry; index of the NEXT character on exit</param>
            <returns>true if the character at the given position is a valid identifier start</returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.JSScanner.IsValidIdentifierPart(System.String,System.Int32)">
            <summary>
            Determines if the character(s) at the given index is a valid identifier part
            </summary>
            <param name="text">potential identifier string</param>
            <param name="index">index of the starting character</param>
            <returns>true if the character at the given position is a valid identifier part</returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.JSScanner.IsValidIdentifierPart(System.String,System.Int32@)">
            <summary>
            Determines if the character(s) at the given index is a valid identifier part,
            and adjust the index to point to the following character
            </summary>
            <param name="name">potential identifier string</param>
            <param name="startIndex">index of the starting character on entry; index of the NEXT character on exit</param>
            <returns>true if the character at the given position is a valid identifier part</returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.JSScanner.StartsWithValidIdentifierPart(System.String)">
            <summary>
            Determines whether the first character, surrogate pair, or escape sequence of the 
            given string represents a valid identifier part.
            </summary>
            <param name="text">one or more characters</param>
            <returns>true if the first character represents a valid identifier part.</returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.JSScanner.IsValidIdentifierPart(System.Char)">
            <summary>
            Determines if the given charater is a valid identifier part.
            Does not work with extended UNICODE character
            </summary>
            <param name="letter">UTF-16 codepoint to test</param>
            <returns>true if the given character is a valid identifier part</returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.JSScanner.IsAssignmentOperator(Microsoft.Ajax.Utilities.JSToken)">
            <summary>
            Returns true of the given token is an assignment operator
            </summary>
            <param name="token">token to test</param>
            <returns>true if the token is an assignment operator</returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.JSScanner.IsRightAssociativeOperator(Microsoft.Ajax.Utilities.JSToken)">
            <summary>
            Returns true if the given token is a right-associative operator
            </summary>
            <param name="token">token to test</param>
            <returns>true if right-associative</returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.JSScanner.IsReplacementToken(System.String)">
            <summary>
            determines whether a string is a replacement token value
            </summary>
            <param name="value">string to tet</param>
            <returns>true if in the format %name(.name)*(:ident)?%</returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.JSScanner.ScanIdentifier(System.Boolean)">
            <summary>
            Scan an identifier starting at the current location, escaping any escape sequences
            </summary>
            <returns>token scanned</returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.JSScanner.ScanAspNetBlock">
            <summary>
            Scans for the end of an Asp.Net block.
             On exit this.currentPos will be at the next char to scan after the asp.net block.
            </summary>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.JSScanner.SkipToEndOfLineOrComment">
            <summary>
            skip to either the end of the line or the comment, whichever comes first, but
            DON'T consume either of them.
            </summary>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.JSScanner.DecodeOneUnicodeEscapeSequence(System.String,System.Int32@)">
            <summary>
            Given a string and a start index, return the integer value of the UNICODE escape
            sequence at the starting position. Can be '\' 'u' hex hex hex hex or '\' 'u' '{' hex+ '}'
            </summary>
            <param name="text">text to convert</param>
            <param name="index">starting position of the escape backslash character on entry; 
            index of the next character after the escape sequence on exit</param>
            <returns>integer conversion of the valid escape sequence, or -1 if invalid</returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.JSScanner.StripAssignment(Microsoft.Ajax.Utilities.JSToken)">
            <summary>
            Given an assignment operator (=, +=, -=, *=, /=, %=, &amp;=, |=, ^=, &lt;&lt;=, &gt;&gt;=, &gt;&gt;&gt;=), strip
            the assignment to return (+, -, *, /, %, &amp;, |, ^, &lt;&lt;, &gt;&gt;, &gt;&gt;&gt;). For all other operators,
            include the normal assign (=), just return the same operator token.
            This only works if the two groups of tokens are actually defined in those orders!!! 
            </summary>
            <param name="assignOp"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Ajax.Utilities.JSScanner.PPOperators">
            <summary>
            Class for associating an operator with a function for ///#IF directives
            in a lazy-loaded manner. Doesn't create and initialize the dictionary
            until the scanner actually encounters syntax that needs it.
            The keys are sorted by length, decreasing (longest operators first).
            </summary>
        </member>
        <member name="T:Microsoft.Ajax.Utilities.JSScanner.PPOperators.LengthComparer">
            <summary>
            Sorting class for the sorted dictionary base to make sure the operators are
            enumerated with the LONGEST strings first, before the shorter strings.
            </summary>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.JSScanner.PPOperators.ConvertToNumeric(System.String,System.String,System.Double@,System.Double@)">
            <summary>
            Try converting the two strings to doubles
            </summary>
            <param name="left">first string</param>
            <param name="right">second string</param>
            <param name="leftNumeric">first string converted to double</param>
            <param name="rightNumeric">second string converted to double</param>
            <returns>true if the conversion was successful; false otherwise</returns>
        </member>
        <member name="T:Microsoft.Ajax.Utilities.FieldType">
            <summary>
            Field type enumeration
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JSVariableField.OnlyReference">
            <summary>
            returns the only reference IF there is only ONE reference
            in the collection; otherwise returns false.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JSVariableField.OnlyDeclaration">
            <summary>
            returns the only declaration IF there is only ONE name declaration
            in the collection; otherwise returns null.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JSVariableField.IsReferencedInnerScope">
            <summary>
            Returns a value that indicates whether this field is ever referenced in a scope
            other than the one in which it is defined
            </summary>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.JSVariableField.GetHashCode">
            <returns>
            The hash code for the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.JSVariableField.IsSameField(Microsoft.Ajax.Utilities.JSVariableField)">
            <summary>
            returns true if the fields point to the same ultimate reference object.
            Needs to walk up the outer-reference chain for each field in order to
            find the ultimate reference
            </summary>
            <param name="otherField"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.Lookup.OriginalName">
            <summary>
            Returns the original name of the identifier, before any renaming
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.Lookup.WasRenamed">
            <summary>
            Returns whether the item was renamed
            </summary>
        </member>
        <member name="T:Microsoft.Ajax.Utilities.MatchPropertiesVisitor">
            <summary>
            This visitor has a Match method that takes a node and an string representing an identifier list separated by periods: IDENT(.IDENT)*
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.ModuleDeclaration.Binding">
            <summary>
            Returns or sets the identifier used when binding all of an external modules exports as properties on a local object
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.ModuleDeclaration.ModuleName">
            <summary>
            Returns or sets the module name
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.ModuleDeclaration.IsImplicit">
            <summary>
            Returns or sets a flag indicating whether or not this module is an implicit module,
            parsed as an external file that gets referenced by an import statement
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.ModuleScope.HasDefaultExport">
            <summary>
            Returns or sets a flag to indicate whether this module exports a default expression
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.ModuleScope.IsNotComplete">
            <summary>
            Returns or sets a flag to indicate whether this module re-exports all exports from an unknown external module
            </summary>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.ModuleScope.DeclareScope">
            <summary>
            Set up this scope's fields from the declarations it contains
            </summary>
        </member>
        <member name="T:Microsoft.Ajax.Utilities.NewParensVisitor">
            <summary>
            Determines whether or not a node needs parentheses around it within a new operator
            </summary>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.OutputVisitor.Apply(System.IO.TextWriter,Microsoft.Ajax.Utilities.AstNode,Microsoft.Ajax.Utilities.CodeSettings)">
            <summary>
            Render a node tree to a text writer
            </summary>
            <param name="writer">writer to which to send output</param>
            <param name="node">node to render</param>
            <param name="settings">settings to use for output</param>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.OutputVisitor.Apply(Microsoft.Ajax.Utilities.AstNode,Microsoft.Ajax.Utilities.CodeSettings)">
            <summary>
            Render a node tree as a string
            </summary>
            <param name="node">node to render</param>
            <param name="settings">settings to use for output</param>
            <returns>string representation of the node</returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.OutputVisitor.OutputFunctionArgsAndBody(Microsoft.Ajax.Utilities.FunctionObject)">
            <summary>
            Output everything for a function except the initial keyword
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.OutputVisitor.OutputBlock(Microsoft.Ajax.Utilities.Block)">
            <summary>
            outputs a semicolon for an empty block, just the statement for a single-statement block,
            and recurses to the Block visitor for mutiple-statement blocks
            </summary>
            <param name="block">block to output</param>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.OutputVisitor.QuoteFactor(System.String)">
            <summary>
            Counts the number of double-quotes and single-quotes in a string
            and returns a numeric indicator for which one should be used as
            the string delimiter.
            </summary>
            <param name="text">string to test</param>
            <returns>less than zero use single-quotes, zero or more, use double-quotes</returns>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.ParameterDeclaration.Position">
            <summary>
            Returns or sets parameter order position, zero-based
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.ParameterDeclaration.HasRest">
            <summary>
            Returns or sets whether this parameter is prefixed with the rest token (...)
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.ParameterDeclaration.RestContext">
            <summary>
            Returns or sets the source context for the rest token (if any)
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.ParameterDeclaration.Binding">
            <summary>
            Gets or sets the binding node
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.ParameterDeclaration.AssignContext">
            <summary>
            Returns or sets the context for the optional default-value assignment token
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.ParameterDeclaration.Initializer">
            <summary>
            Returns or sets the optional default value for the parameter
            </summary>
        </member>
        <member name="T:Microsoft.Ajax.Utilities.ResolutionVisitor">
            <summary>
            Traverse the tree to build up scope lexically-declared names, var-declared names,
            and lookups, then resolve everything.
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.ResolutionVisitor.m_orderIndex">
            <summary>index to use for ordering the statements in this scope</summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.ResolutionVisitor.m_isUnreachable">
            <summary>flag indicating whether we've encountered some unreachable code</summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.ResolutionVisitor.m_withDepth">
            <summary>depth level of with-statements, needed so we can treat decls within with-scopes specially</summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.ResolutionVisitor.m_lexicalStack">
            <summary>stack to maintain the current lexical scope as we traverse the tree</summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.ResolutionVisitor.m_variableStack">
            <summary>stack to maintain the current variable scope as we traverse the tree</summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.ResolutionVisitor.m_settings">
            <summary>code setings</summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.ResolutionVisitor.m_scriptVersion">
            <summary>language version of the script</summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.ResolutionVisitor.CurrentLexicalScope">
            <summary>Current lexical scope</summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.ResolutionVisitor.CurrentVariableScope">
            <summary>current variable scope</summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.ResolutionVisitor.NextOrderIndex">
            <summary>retrieve the next order index</summary>
        </member>
        <member name="T:Microsoft.Ajax.Utilities.StatementStartVisitor">
            <summary>
            Determines if a node at the beginning of a statement needs parentheses around it
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.StatementStartVisitor.m_isSafe">
            <summary>
            This is the flag that we are going to return to indicate whether or not
            the statement start is safe (true) or requires parens (false)
            </summary>
        </member>
        <member name="T:Microsoft.Ajax.Utilities.V3SourceMap">
            <summary>
            Standard JSON source map format, version 3
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.V3SourceMap.m_hasProperty">
            <summary>whether we have output a property yet</summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.V3SourceMap.SourceRoot">
            <summary>
            Returns or sets an optional source root URI that will be added to the map object as the sourceRoot property if set
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.V3SourceMap.SafeHeader">
            <summary>
            Returns or sets a flag indicating whether or not to prepend the map file with an XSSI (cross-site script injection) protection string
            </summary>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.V3SourceMap.StartPackage(System.String,System.String)">
            <summary>
            Called when we start a new minified output file
            </summary>
            <param name="sourcePath">source file path</param>
            <param name="mapPath">output file path</param>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.V3SourceMap.EndPackage">
            <summary>
            Called when we end a minified output file. write all the accumulated 
            data to the stream.
            </summary>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.V3SourceMap.NewLineInsertedInOutput">
            <summary>
            A new line has been inserted into the output code, so adjust the offsets accordingly
            for the next run.
            </summary>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.V3SourceMap.EndOutputRun(System.Int32,System.Int32)">
            <summary>
            Signal the end of an output run by sending the NEXT position in the output
            </summary>
            <param name="lineNumber">0-based line number</param>
            <param name="columnPosition">0-based column position</param>
        </member>
        <member name="T:Microsoft.Ajax.Utilities.Var">
            <summary>
            Summary description for variablestatement.
            </summary>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.WithScope.DeclareScope">
            <summary>
            Set up this scopes lexically-declared fields
            </summary>
        </member>
        <member name="T:Microsoft.Ajax.Utilities.JSEncoderFallback">
            <summary>
            JSEncoderFallback encodes invalid encoder characters as Unicode escapes:
                  \uXXXX
            up to six characters per escape. If the UNICODE character is in the upper
            range, we need to encode it as a surrogate pair:
                  \uUUUU\uLLLL
            
            To use this class, create an instance of it and set it to the EncoderFallback
            property of your Encoding object. You may have to clone the Encoding object
            in order to get write access to the EncoderFallback property.
            <example>
                var encoding = (Encoding)Encoding.ASCII.Clone();
                encoding.EncoderFallback = new JSEncoderFallback();
                var bytes = encoding.GetBytes(crunchedCode);
                Console.WriteLine(encoding.GetString(bytes));
            </example>
            </summary>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.JSEncoderFallback.CreateFallbackBuffer">
            <summary>
            return a fallback buffer for this encoding fallback
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JSEncoderFallback.MaxCharCount">
            <summary>
            the maximum number of characters we'll expand a single character into
            </summary>
        </member>
        <member name="T:Microsoft.Ajax.Utilities.JSEncoderFallbackBuffer">
            <summary>
            fallback buffer for encoding unknown characters into JS Unicode escapes
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.JSEncoderFallbackBuffer.Remaining">
            <summary>
            Number of characters remaining in the buffer
            </summary>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.JSEncoderFallbackBuffer.GetEncoding(System.Int32)">
            <summary>
            Get the single-character encoding string
            </summary>
            <param name="charValue">character to encode</param>
            <returns>encoded string</returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.JSEncoderFallbackBuffer.Fallback(System.Char,System.Int32)">
            <summary>
            Prepare the unknown character for encoding
            </summary>
            <param name="charUnknown">character to process</param>
            <param name="index">position in input string</param>
            <returns>true if characters to process placed in buffer</returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.JSEncoderFallbackBuffer.Fallback(System.Char,System.Char,System.Int32)">
            <summary>
            Prepare the unknown surrogate pair for encoding
            </summary>
            <param name="charUnknownHigh">high surrogate pair character</param>
            <param name="charUnknownLow">low surrogate pair character</param>
            <param name="index">index of character in the stream</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.JSEncoderFallbackBuffer.GetNextChar">
            <summary>
            return the next character
            </summary>
            <returns>(char)0 if no character</returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.JSEncoderFallbackBuffer.MovePrevious">
            <summary>
            back the character position up one character
            </summary>
            <returns>false if already at front; true otherwise</returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.JSEncoderFallbackBuffer.Reset">
            <summary>
            reset the fallback buffer to initial state
            </summary>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.JSEncoderFallbackBuffer.ToString">
            <summary>
            Return string representation of this object
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Ajax.Utilities.Minifier">
            <summary>
            Minifier class for quick minification of JavaScript or Stylesheet code without needing to
            access or modify any abstract syntax tree nodes. Just put in source code and get our minified
            code as strings.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.Minifier.WarningLevel">
            <summary>
            Warning level threshold for reporting errors.
            Default value is zero: syntax/run-time errors.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.Minifier.FileName">
            <summary>
            File name to use in error reporting.
            Default value is null: use Minify... method name.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.Minifier.ErrorList">
            <summary>
            Collection of ContextError objects found during minification process
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.Minifier.Errors">
            <summary>
            Collection of any error strings found during the crunch process.
            </summary>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.Minifier.MinifyJavaScript(System.String)">
            <summary>
            MinifyJavaScript JS string passed to it using default code minification settings.
            The ErrorList property will be set with any errors found during the minification process.
            </summary>
            <param name="source">source Javascript</param>
            <returns>minified Javascript</returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.Minifier.MinifyJavaScript(System.String,Microsoft.Ajax.Utilities.CodeSettings)">
            <summary>
            Crunched JS string passed to it, returning crunched string.
            The ErrorList property will be set with any errors found during the minification process.
            </summary>
            <param name="source">source Javascript</param>
            <param name="codeSettings">code minification settings</param>
            <returns>minified Javascript</returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.Minifier.MinifyStyleSheet(System.String)">
            <summary>
            MinifyJavaScript CSS string passed to it using default code minification settings.
            The ErrorList property will be set with any errors found during the minification process.
            </summary>
            <param name="source">source Javascript</param>
            <returns>minified Javascript</returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.Minifier.MinifyStyleSheet(System.String,Microsoft.Ajax.Utilities.CssSettings)">
            <summary>
            Minifies the CSS stylesheet passes to it using the given settings, returning the minified results
            The ErrorList property will be set with any errors found during the minification process.
            </summary>
            <param name="source">CSS Source</param>
            <param name="settings">CSS minification settings</param>
            <returns>Minified StyleSheet</returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.Minifier.MinifyStyleSheet(System.String,Microsoft.Ajax.Utilities.CssSettings,Microsoft.Ajax.Utilities.CodeSettings)">
            <summary>
            Minifies the CSS stylesheet passes to it using the given settings, returning the minified results
            The ErrorList property will be set with any errors found during the minification process.
            </summary>
            <param name="source">CSS Source</param>
            <param name="settings">CSS minification settings</param>
            <param name="scriptSettings">JS minification settings to use for expression-minification</param>
            <returns>Minified StyleSheet</returns>
        </member>
        <member name="T:Microsoft.Ajax.Utilities.StringBuilderPool">
            <summary>
            Static class for caching StringBuilders so we don't have to keep creating/destroying them all the time
            </summary>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.StringBuilderPool.Acquire">
            <summary>
            Acquire a possibly-shared string builder instance
            </summary>
            <returns>an empty string builder instance</returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.StringBuilderPool.Acquire(System.Int32)">
            <summary>
            Acquire a tringBuilder object with at least the given capacity. If the capacity
            is less than or equal to our normal capacity, just return something from the pool.
            Otherwise create a new string builder that will just get discarded when released.
            </summary>
            <param name="capacity">minimum capacity</param>
            <returns>StringBuilder object</returns>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.StringBuilderPool.Release(System.Text.StringBuilder)">
            <summary>
            Extension method to add a method to StringBuilders that will release them back into the thread pool
            </summary>
            <param name="builder">StringBuilder instance to add back to the thread pool</param>
        </member>
        <member name="T:Microsoft.Ajax.Utilities.ExistingFileTreatment">
            <summary>
            Enumeration indicating how existing files will be treated
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.ExistingFileTreatment.Auto">
            <summary>
            Existing files will be overwritten, but existing files marked with the read-only flag will not
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.ExistingFileTreatment.Overwrite">
            <summary>
            Any existing file will be overwritten, regardless of the state of its read-only flag
            </summary>
        </member>
        <member name="F:Microsoft.Ajax.Utilities.ExistingFileTreatment.Preserve">
            <summary>
            
            Existing files will be preserved (not overwritten)
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.SwitchParser.JSSettings">
            <summary>
            Returns the parsed JavaScript code settings object
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.SwitchParser.CssSettings">
            <summary>
            Returns the parsed CSS settings object
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.SwitchParser.AnalyzeMode">
            <summary>
            Returns a boolean value indicating whether or not Analyze mode is specified (default is false)
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.SwitchParser.ReportFormat">
            <summary>
            Returns a string value indication the report format specified for analyze more (default is null)
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.SwitchParser.ReportPath">
            <summary>
            Returns the path for the analyze scope report file (default is null, output to console)
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.SwitchParser.PrettyPrint">
            <summary>
            Returns a boolean value indicating whether or not Pretty-Print mode is specified (default is false)
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.SwitchParser.WarningLevel">
            <summary>
            Returns or sets an integer value indicating the warning severity threshold for reporting. Default is zero (syntax errors only).
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.SwitchParser.Clobber">
            <summary>
            Returns or sets a flag indicating how existing files should be treated.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.SwitchParser.EncodingOutputName">
            <summary>
            Returns the string output encoding name. Default is null, indicating the default output encoding should be used.
            </summary>
        </member>
        <member name="P:Microsoft.Ajax.Utilities.SwitchParser.EncodingInputName">
            <summary>
            Returns the string input encoding name. Default is null, indicating the default output encoding should be used.
            </summary>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.SwitchParser.Parse(System.String)">
            <summary>
            Takes a full command-line string and parses the switches into the appropriate settings objects
            </summary>
            <param name="commandLine"></param>
        </member>
        <member name="M:Microsoft.Ajax.Utilities.SwitchParser.Parse(System.String[])">
            <summary>
            Takes an array of arguments and parses the switches into the appropriate settings objects
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:Wisej.Base.CloseReason">
            <summary>
            Specifies the reason that a form was closed.
            </summary>
        </member>
        <member name="F:Wisej.Base.CloseReason.None">
            <summary>
            The cause of the closure was not defined.
            </summary>
        </member>
        <member name="F:Wisej.Base.CloseReason.MdiFormClosing">
            <summary>
            The parent form of this mdi child window is closing.
            </summary>
        </member>
        <member name="F:Wisej.Base.CloseReason.UserClosing">
            <summary>
            The user is closing the window.
            </summary>
        </member>
        <member name="F:Wisej.Base.CloseReason.FormOwnerClosing">
            <summary>
            The owner window is closing.
            </summary>
        </member>
        <member name="F:Wisej.Base.CloseReason.ApplicationExit">
            <summary>
            The application has terminated.
            </summary>
        </member>
        <member name="T:Wisej.Base.Cookie">
            <summary>
            Represents an individual HTTP cookie.
            </summary>
        </member>
        <member name="M:Wisej.Base.Cookie.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Wisej.Base.Cookie"/>.
            </summary>
        </member>
        <member name="M:Wisej.Base.Cookie.#ctor(System.String,System.String)">
            <summary>
             Creates a new instance of <see cref="T:Wisej.Base.Cookie"/>.
            </summary>
            <param name="name">The name of the cookie.</param>
            <param name="value">The value of the cookie.</param>
        </member>
        <member name="M:Wisej.Base.Cookie.#ctor(System.String,System.String,System.String)">
            <summary>
             Creates a new instance of <see cref="T:Wisej.Base.Cookie"/>.
            </summary>
            <param name="name">The name of the cookie.</param>
            <param name="value">The value of the cookie.</param>
            <param name="domain">The domain, or partial domain, associated with the cookie.</param>
        </member>
        <member name="M:Wisej.Base.Cookie.#ctor(System.String,System.String,System.DateTime)">
            <summary>
             Creates a new instance of <see cref="T:Wisej.Base.Cookie"/>.
            </summary>
            <param name="name">The name of the cookie.</param>
            <param name="value">The value of the cookie.</param>
            <param name="expires">The expiration date/time of the cookie.</param>
        </member>
        <member name="M:Wisej.Base.Cookie.#ctor(System.String,System.String,System.String,System.DateTime)">
            <summary>
             Creates a new instance of <see cref="T:Wisej.Base.Cookie"/>.
            </summary>
            <param name="name">The name of the cookie.</param>
            <param name="value">The value of the cookie.</param>
            <param name="domain">The domain, or partial domain, associated with the cookie.</param>
            <param name="expires">The expiration date/time of the cookie.</param>
        </member>
        <member name="M:Wisej.Base.Cookie.#ctor(System.Web.HttpCookie)">
            <summary>
             Creates a new instance of <see cref="T:Wisej.Base.Cookie"/>.
            </summary>
            <param name="httpCookie">The original http cookie coming from the server.</param>
        </member>
        <member name="P:Wisej.Base.Cookie.Owner">
            <summary>
            Reference to the collection that owns this cookie.
            </summary>
        </member>
        <member name="P:Wisej.Base.Cookie.New">
            <summary>
            Returns or sets a flag indicating that the cookie is a new cookie (not received from the server).
            </summary>
        </member>
        <member name="P:Wisej.Base.Cookie.Deleted">
            <summary>
            Returns or sets a flag indicating that the cookie has been deleted.
            </summary>
        </member>
        <member name="P:Wisej.Base.Cookie.Changed">
            <summary>
            Returns or sets a flag indicating that the cookie has been changed.
            </summary>
        </member>
        <member name="P:Wisej.Base.Cookie.Name">
            <summary>
            Returns or sets the name for the <see cref="T:Wisej.Base.Cookie" />.
            </summary>
            <returns>The name for the <see cref="T:Wisej.Baset.Cookie" />.</returns>
        </member>
        <member name="P:Wisej.Base.Cookie.Path">
            <summary>
            Returns or sets the path of the <see cref="T:Wisej.Base.Cookie" />.
            </summary>
            <returns>The path of the <see cref="T:Wisej.Baset.Cookie" />.</returns>
        </member>
        <member name="P:Wisej.Base.Cookie.Domain">
            <summary>
            Returns or sets the domain to associate the cookie with.
            </summary>
            <returns>The name of the domain to associate the cookie with. The default value is the current domain.</returns>
        </member>
        <member name="P:Wisej.Base.Cookie.Expires">
            <summary>
            Returns or sets the expiration date and time for the cookie.
            </summary>
            <returns>The time of day (on the client) at which the cookie expires.</returns>
        </member>
        <member name="P:Wisej.Base.Cookie.Secure">
            <summary>
            Returns or sets whether to transmit the cookie using Secure Sockets Layer (SSL)--that is, over HTTPS only.
            </summary>
            <returns>true to transmit the cookie over an SSL connection (HTTPS); otherwise, false. The default value is false.</returns>
        </member>
        <member name="P:Wisej.Base.Cookie.Value">
            <summary>
            Returns or sets an individual cookie value.
            </summary>
            <returns>The value of the cookie. The default value is a null reference.</returns>
        </member>
        <member name="M:Wisej.Base.Cookie.ToString">
            <summary>
            Returns a string that represents the <see cref="T:Wisej.Base.Cookie" /> values.
            </summary>
            <returns>A <see cref="T:System.String" /> that represent the type and state of the instance.</returns>
        </member>
        <member name="M:Wisej.Base.Cookie.ToServerString">
            <summary>
            Returns the string representation of the cookie.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Wisej.Base.CookieCollection">
            <summary>
            Manages the collection of cookies for the current application.
            </summary>
        </member>
        <member name="M:Wisej.Base.CookieCollection.#ctor(System.Web.HttpCookieCollection)">
            <summary>
            Constructs a new instance of <see cref="T:Wisej.Base.CookieCollection"/> and initializes
            it with the cookies coming from the web request.
            </summary>
            <param name="httpCookies"></param>
        </member>
        <member name="P:Wisej.Base.CookieCollection.Changed">
            <summary>
            Returns or sets a flag indicating that the cookie collection or a contained cookie has been changed.
            </summary>
        </member>
        <member name="P:Wisej.Base.CookieCollection.Item(System.String)">
            <summary>
            Returns the <see cref="T:Wisej.Base.Cookie" /> with a specific name from a <see cref="T:Wisej.Base.CookieCollection" />.
            </summary>
            <returns>The <see cref="T:Wisej.Base.Cookie" /> with a specific name.</returns>
            <param name="name">The case-sensitive name of the <see cref="T:Wisej.Base.Cookie" /> to be found. </param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="name" /> is null. </exception>
        </member>
        <member name="P:Wisej.Base.CookieCollection.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:Wisej.Base.Cookie" /> with a specific name from a <see cref="T:Wisej.Base.CookieCollection" />.
            </summary>
            <returns>The <see cref="T:Wisej.Base.Cookie" /> with a specific name.</returns>
            <param name="index">The index of the <see cref="T:Wisej.Base.Cookie" /> to return. </param>
            <exception cref="T:System.IndexOutOfRangeException">
              <paramref name="index" /> is out of range. </exception>
        </member>
        <member name="P:Wisej.Base.CookieCollection.Count">
            <summary>
            Returns the number of <see cref="T:Wisej.Base.Cookie" /> items in the collection. 
            </summary>
        </member>
        <member name="M:Wisej.Base.CookieCollection.Get(System.String)">
            <summary>
            Returns the cookie with the specified name.
            </summary>
            <param name="name">The case-sensitive name of the cookie to locate.</param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Base.CookieCollection.Add(Wisej.Base.Cookie)">
            <summary>
            Adds a cookie to the collection.
            </summary>
            <param name="cookie">The cookie to add.</param>
        </member>
        <member name="M:Wisej.Base.CookieCollection.Add(System.String,System.String)">
            <summary>
            Adds a new cookie to the collection.
            </summary>
            <param name="name">The case-sensitive name of the cookie.</param>
            <param name="value">The value of the new cookie to add.</param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Base.CookieCollection.Add(System.String,System.String,System.String)">
            <summary>
            Adds a new cookie to the collection.
            </summary>
            <param name="name">The case-sensitive name of the cookie.</param>
            <param name="value">The value of the new cookie to add.</param>
            <param name="domain">The domain, or partial domain, associated with the cookie.</param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Base.CookieCollection.Add(System.String,System.String,System.DateTime)">
            <summary>
            Adds a new cookie to the collection.
            </summary>
            <param name="name">The case-sensitive name of the cookie.</param>
            <param name="value">The value of the new cookie.</param>
            <param name="expires">The expiration date/time of the new cookie.</param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Base.CookieCollection.Add(System.String,System.String,System.String,System.DateTime)">
            <summary>
            Adds a new cookie to the collection.
            </summary>
            <param name="name">The case-sensitive name of the cookie.</param>
            <param name="value">The value of the new cookie.</param>
            <param name="domain">The value of the new cookie.</param>
            <param name="expires">The expiration date/time of the new cookie.</param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Base.CookieCollection.Clear">
            <summary>
            Delete all cookies from the collection.
            NOTE: Cookies are only removed from the collection, not from the client. You need to set the expiration date to remove it from the client.
            </summary>
        </member>
        <member name="M:Wisej.Base.CookieCollection.Contains(Wisej.Base.Cookie)">
            <summary>
            Determines whether the cookie is present in the collection.
            </summary>
            <param name="cookie">The cookie to locate.</param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Base.CookieCollection.IndexOf(Wisej.Base.Cookie)">
            <summary>
            Searches for the specified cookie and returns the zero-based index of the first occurrence.
            </summary>
            <param name="cookie">The cookie to locate.</param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Base.CookieCollection.IndexOf(System.String)">
            <summary>
            Searches for the specified cookie by name and returns the zero-based index of the first occurrence.
            </summary>
            <param name="name">The case-sensitive name cookie to locate.</param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Base.CookieCollection.Remove(Wisej.Base.Cookie)">
            <summary>
            Removes the specified cookie from the collection.
            NOTE: Cookies are only removed from the collection, not from the client. You need to set the expiration date to remove it from the client.
            </summary>
            <param name="cookie">The cookie to remove from the collection.</param>
            <returns>true if item is successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:Wisej.Base.CookieCollection.Remove(System.String)">
            <summary>
            Removes the specified cookie from the collection.
            NOTE: Cookies are only removed from the collection, not from the client. You need to set the expiration date to remove it from the client.
            </summary>
            <param name="name">The case-sensitive name of the cookie to remove from the collection.</param>
            <returns>true if item is successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:Wisej.Base.CookieCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the cookie at the specified index.
            NOTE: Cookies are only removed from the collection, not from the client. You need to set the expiration date to remove it from the client.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:Wisej.Base.CookieCollection.CopyTo(Wisej.Base.Cookie[],System.Int32)">
            <summary>
            Copies the cookie collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional System.Array that is the destination of the elements copied.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="T:Wisej.Base.Keys">
            <summary>
            Specifies key codes and modifiers.
            </summary>
            <exclude/>
        </member>
        <member name="F:Wisej.Base.Keys.KeyCode">
            <summary>
            The mask to extract a key code from a key value.
            </summary>
        </member>
        <member name="F:Wisej.Base.Keys.Modifiers">
            <summary>
            The mask to extract modifiers from a key value.
            </summary>
        </member>
        <member name="F:Wisej.Base.Keys.None">
            <summary>No key pressed.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.LButton">
            <summary>The left mouse button.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.RButton">
            <summary>The right mouse button.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.Cancel">
            <summary>The CANCEL key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.MButton">
            <summary>The middle mouse button (three-button mouse).</summary>
        </member>
        <member name="F:Wisej.Base.Keys.XButton1">
            <summary>The first x mouse button (five-button mouse).</summary>
        </member>
        <member name="F:Wisej.Base.Keys.XButton2">
            <summary>The second x mouse button (five-button mouse).</summary>
        </member>
        <member name="F:Wisej.Base.Keys.Back">
            <summary>The BACKSPACE key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.Backspace">
            <summary>The BACKSPACE key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.Tab">
            <summary>The TAB key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.LineFeed">
            <summary>The LINEFEED key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.Clear">
            <summary>The CLEAR key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.Return">
            <summary>The RETURN key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.Enter">
            <summary>The ENTER key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.ShiftKey">
            <summary>The SHIFT key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.ControlKey">
            <summary>The CTRL key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.Menu">
            <summary>The ALT key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.Pause">
            <summary>The PAUSE key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.Capital">
            <summary>The CAPS LOCK key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.CapsLock">
            <summary>The CAPS LOCK key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.KanaMode">
            <summary>The IME Kana mode key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.HanguelMode">
            <summary>The IME Hanguel mode key. (maintained for compatibility; use HangulMode) </summary>
        </member>
        <member name="F:Wisej.Base.Keys.HangulMode">
            <summary>The IME Hangul mode key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.JunjaMode">
            <summary>The IME Junja mode key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.FinalMode">
            <summary>The IME final mode key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.HanjaMode">
            <summary>The IME Hanja mode key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.KanjiMode">
            <summary>The IME Kanji mode key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.Escape">
            <summary>The ESC key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.IMEConvert">
            <summary>The IME convert key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.IMENonconvert">
            <summary>The IME nonconvert key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.IMEAccept">
            <summary>The IME accept key, replaces <see cref="F:Wisej.Web.Keys.IMEAceept" />.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.IMEAceept">
            <summary>The IME accept key. Obsolete, use <see cref="F:Wisej.Web.Keys.IMEAccept" /> instead.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.IMEModeChange">
            <summary>The IME mode change key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.Space">
            <summary>The SPACEBAR key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.Prior">
            <summary>The PAGE UP key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.PageUp">
            <summary>The PAGE UP key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.Next">
            <summary>The PAGE DOWN key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.PageDown">
            <summary>The PAGE DOWN key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.End">
            <summary>The END key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.Home">
            <summary>The HOME key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.Left">
            <summary>The LEFT ARROW key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.Up">
            <summary>The UP ARROW key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.Right">
            <summary>The RIGHT ARROW key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.Down">
            <summary>The DOWN ARROW key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.Select">
            <summary>The SELECT key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.Print">
            <summary>The PRINT key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.Execute">
            <summary>The EXECUTE key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.Snapshot">
            <summary>The PRINT SCREEN key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.PrintScreen">
            <summary>The PRINT SCREEN key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.Insert">
            <summary>The INS key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.Delete">
            <summary>The DEL key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.Help">
            <summary>The HELP key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.D0">
            <summary>The 0 key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.D1">
            <summary>The 1 key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.D2">
            <summary>The 2 key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.D3">
            <summary>The 3 key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.D4">
            <summary>The 4 key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.D5">
            <summary>The 5 key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.D6">
            <summary>The 6 key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.D7">
            <summary>The 7 key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.D8">
            <summary>The 8 key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.D9">
            <summary>The 9 key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.A">
            <summary>The A key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.B">
            <summary>The B key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.C">
            <summary>The C key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.D">
            <summary>The D key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.E">
            <summary>The E key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.F">
            <summary>The F key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.G">
            <summary>The G key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.H">
            <summary>The H key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.I">
            <summary>The I key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.J">
            <summary>The J key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.K">
            <summary>The K key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.L">
            <summary>The L key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.M">
            <summary>The M key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.N">
            <summary>The N key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.O">
            <summary>The O key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.P">
            <summary>The P key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.Q">
            <summary>The Q key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.R">
            <summary>The R key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.S">
            <summary>The S key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.T">
            <summary>The T key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.U">
            <summary>The U key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.V">
            <summary>The V key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.W">
            <summary>The W key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.X">
            <summary>The X key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.Y">
            <summary>The Y key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.Z">
            <summary>The Z key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.LWin">
            <summary>The left Windows logo key (Microsoft Natural Keyboard).</summary>
        </member>
        <member name="F:Wisej.Base.Keys.RWin">
            <summary>The right Windows logo key (Microsoft Natural Keyboard).</summary>
        </member>
        <member name="F:Wisej.Base.Keys.Apps">
            <summary>The application key (Microsoft Natural Keyboard).</summary>
        </member>
        <member name="F:Wisej.Base.Keys.Sleep">
            <summary>The computer sleep key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.NumPad0">
            <summary>The 0 key on the numeric keypad.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.NumPad1">
            <summary>The 1 key on the numeric keypad.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.NumPad2">
            <summary>The 2 key on the numeric keypad.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.NumPad3">
            <summary>The 3 key on the numeric keypad.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.NumPad4">
            <summary>The 4 key on the numeric keypad.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.NumPad5">
            <summary>The 5 key on the numeric keypad.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.NumPad6">
            <summary>The 6 key on the numeric keypad.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.NumPad7">
            <summary>The 7 key on the numeric keypad.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.NumPad8">
            <summary>The 8 key on the numeric keypad.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.NumPad9">
            <summary>The 9 key on the numeric keypad.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.Multiply">
            <summary>The multiply key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.Add">
            <summary>The add key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.Separator">
            <summary>The separator key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.Subtract">
            <summary>The subtract key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.Decimal">
            <summary>The decimal key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.Divide">
            <summary>The divide key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.F1">
            <summary>The F1 key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.F2">
            <summary>The F2 key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.F3">
            <summary>The F3 key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.F4">
            <summary>The F4 key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.F5">
            <summary>The F5 key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.F6">
            <summary>The F6 key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.F7">
            <summary>The F7 key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.F8">
            <summary>The F8 key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.F9">
            <summary>The F9 key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.F10">
            <summary>The F10 key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.F11">
            <summary>The F11 key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.F12">
            <summary>The F12 key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.F13">
            <summary>The F13 key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.F14">
            <summary>The F14 key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.F15">
            <summary>The F15 key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.F16">
            <summary>The F16 key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.F17">
            <summary>The F17 key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.F18">
            <summary>The F18 key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.F19">
            <summary>The F19 key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.F20">
            <summary>The F20 key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.F21">
            <summary>The F21 key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.F22">
            <summary>The F22 key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.F23">
            <summary>The F23 key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.F24">
            <summary>The F24 key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.NumLock">
            <summary>The NUM LOCK key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.Scroll">
            <summary>The SCROLL LOCK key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.LShiftKey">
            <summary>The left SHIFT key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.RShiftKey">
            <summary>The right SHIFT key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.LControlKey">
            <summary>The left CTRL key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.RControlKey">
            <summary>The right CTRL key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.LMenu">
            <summary>The left ALT key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.RMenu">
            <summary>The right ALT key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.BrowserBack">
            <summary>The browser back key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.BrowserForward">
            <summary>The browser forward key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.BrowserRefresh">
            <summary>The browser refresh key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.BrowserStop">
            <summary>The browser stop key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.BrowserSearch">
            <summary>The browser search key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.BrowserFavorites">
            <summary>The browser favorites key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.BrowserHome">
            <summary>The browser home key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.VolumeMute">
            <summary>The volume mute key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.VolumeDown">
            <summary>The volume down key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.VolumeUp">
            <summary>The volume up key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.MediaNextTrack">
            <summary>The media next track key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.MediaPreviousTrack">
            <summary>The media previous track key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.MediaStop">
            <summary>The media Stop key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.MediaPlayPause">
            <summary>The media play pause key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.LaunchMail">
            <summary>The launch mail key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.SelectMedia">
            <summary>The select media key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.LaunchApplication1">
            <summary>The start application one key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.LaunchApplication2">
            <summary>The start application two key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.OemSemicolon">
            <summary>The OEM Semicolon key on a US standard keyboard.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.Oem1">
            <summary>The OEM 1 key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.Oemplus">
            <summary>The OEM plus key on any country/region keyboard.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.Oemcomma">
            <summary>The OEM comma key on any country/region keyboard.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.OemMinus">
            <summary>The OEM minus key on any country/region keyboard.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.OemPeriod">
            <summary>The OEM period key on any country/region keyboard.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.OemQuestion">
            <summary>The OEM question mark key on a US standard keyboard.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.Oem2">
            <summary>The OEM 2 key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.Oemtilde">
            <summary>The OEM tilde key on a US standard keyboard.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.Oem3">
            <summary>The OEM 3 key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.OemOpenBrackets">
            <summary>The OEM open bracket key on a US standard keyboard.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.Oem4">
            <summary>The OEM 4 key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.OemPipe">
            <summary>The OEM pipe key on a US standard keyboard.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.Oem5">
            <summary>The OEM 5 key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.OemCloseBrackets">
            <summary>The OEM close bracket key on a US standard keyboard.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.Oem6">
            <summary>The OEM 6 key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.OemQuotes">
            <summary>The OEM singled/double quote key on a US standard keyboard.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.Oem7">
            <summary>The OEM 7 key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.Oem8">
            <summary>The OEM 8 key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.OemBackslash">
            <summary>The OEM angle bracket or backslash key on the RT 102 key keyboard.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.Oem102">
            <summary>The OEM 102 key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.ProcessKey">
            <summary>The PROCESS KEY key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.Packet">
            <summary>Used to pass Unicode characters as if they were keystrokes. The Packet key value is the low word of a 32-bit virtual-key value used for non-keyboard input methods.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.Attn">
            <summary>The ATTN key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.Crsel">
            <summary>The CRSEL key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.Exsel">
            <summary>The EXSEL key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.EraseEof">
            <summary>The ERASE EOF key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.Play">
            <summary>The PLAY key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.Zoom">
            <summary>The ZOOM key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.NoName">
            <summary>A constant reserved for future use.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.Pa1">
            <summary>The PA1 key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.OemClear">
            <summary>The CLEAR key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.Shift">
            <summary>The SHIFT modifier key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.Control">
            <summary>The CTRL modifier key.</summary>
        </member>
        <member name="F:Wisej.Base.Keys.Alt">
            <summary>The ALT modifier key.</summary>
        </member>
        <member name="T:Wisej.Base.ModalResult">
            <summary>
            Specifies the return value of a modal control.
            </summary>
            <exclude/>
        </member>
        <member name="F:Wisej.Base.ModalResult.None">
            <summary>
            Nothing is returned from the dialog box.
            </summary>
        </member>
        <member name="F:Wisej.Base.ModalResult.OK">
            <summary>
            The dialog box return value is OK (usually sent from a button labeled OK).
            </summary>
        </member>
        <member name="F:Wisej.Base.ModalResult.Cancel">
            <summary>
            The dialog box return value is Cancel (usually sent from a button labeled Cancel).
            </summary>
        </member>
        <member name="F:Wisej.Base.ModalResult.Abort">
            <summary>
            The dialog box return value is Abort (usually sent from a button labeled Abort).
            </summary>
        </member>
        <member name="F:Wisej.Base.ModalResult.Retry">
            <summary>
            The dialog box return value is Retry (usually sent from a button labeled Retry).
            </summary>
        </member>
        <member name="F:Wisej.Base.ModalResult.Ignore">
            <summary>
            The dialog box return value is Ignore (usually sent from a button labeled Ignore).
            </summary>
        </member>
        <member name="F:Wisej.Base.ModalResult.Yes">
            <summary>
            The dialog box return value is Yes (usually sent from a button labeled Yes).
            </summary>
        </member>
        <member name="F:Wisej.Base.ModalResult.No">
            <summary>
            The dialog box return value is No (usually sent from a button labeled No).
            </summary>
        </member>
        <member name="T:Wisej.Base.MouseButtons">
            <summary>
            Specifies which mouse button was pressed.
            </summary>
            <exclude/>
        </member>
        <member name="F:Wisej.Base.MouseButtons.None">
            <summary>
            No mouse button was pressed.
            </summary>
        </member>
        <member name="F:Wisej.Base.MouseButtons.Left">
            <summary>
            The left mouse button was pressed.
            </summary>
        </member>
        <member name="F:Wisej.Base.MouseButtons.Right">
            <summary>The right mouse button was pressed.</summary>
        </member>
        <member name="F:Wisej.Base.MouseButtons.Middle">
            <summary>
            The middle mouse button (wheel) was pressed.
            </summary>
        </member>
        <member name="F:Wisej.Base.MouseButtons.Wheel">
            <summary>
            The middle mouse button (wheel) was pressed.
            </summary>
        </member>
        <member name="F:Wisej.Base.MouseButtons.XButton1">
            <summary>
            The first XButton was pressed.
            </summary>
        </member>
        <member name="F:Wisej.Base.MouseButtons.XButton2">
            <summary>
            The second XButton was pressed.
            </summary>
        </member>
        <member name="T:Wisej.Base.NamespaceDoc">
            <summary>
            <para>
            Wisej.Base is the namespace for base classes used in Wisej.Web.
            </para>
            </summary>
        </member>
        <member name="T:Wisej.Base.PostbackPropertyAttribute">
            <summary>
            Allows the property to return its value to postback requests.
            </summary>
        </member>
        <member name="M:Wisej.Base.PostbackPropertyAttribute.#ctor">
            <summary>
            Initializes the <see cref="T:Wisej.Base.PostbackPropertyAttribute"/> attribute.
            </summary>
        </member>
        <member name="M:Wisej.Base.PostbackPropertyAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the <see cref="T:Wisej.Base.PostbackPropertyAttribute"/> attribute.
            </summary>
            <param name="allow">Indicates whether the property is allowed or disallowed to return its value to postback requests.</param>
        </member>
        <member name="P:Wisej.Base.PostbackPropertyAttribute.Allow">
            <summary>
            Returns or sets whether the property is allows to return its value to postback requests.
            </summary>
        </member>
        <member name="M:Wisej.Base.PostbackPropertyAttribute.IsPostbackProperty(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Returns true if the property allows postback requests.
            </summary>
            <param name="property">Property to check.</param>
            <returns>True if the <paramref name="property"/> allows postback requests.</returns>
        </member>
        <member name="T:Wisej.Base.PropertyNames">
            <summary>
            Some layout code in WinForms checks for property names by reference equality.
            We can't use strings like "Parent" but need to use PropertyNames.Parent instead.
            </summary>
        </member>
        <member name="T:Wisej.Base.TextUtils">
            <summary>
            Provides utility methods to measure, encode, and extract mnemonics from text.
            </summary>
        </member>
        <member name="M:Wisej.Base.TextUtils.EscapeText(System.String,System.Boolean)">
            <summary>
            Escapes special characters in the specified string.
            </summary>
            <param name="text">The text to escape.</param>
            <param name="allowHtml">Indicates that html tags should not be escaped. The default is false.</param>
            <returns>The escaped string. Null if the specified string was null, or empty if it was empty.</returns>
        </member>
        <member name="M:Wisej.Base.TextUtils.EscapeText(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Removes the ampersand from the text and 
            encodes html characters if necessary.
            </summary>
            <param name="text">The text to convert.</param>
            <param name="allowHtml">Whether to encode html characters.</param>
            <param name="useMnemonic">Whether to convert the first mnemonic to an underlined character.</param>
            <param name="translateNewLines">
            Whether to convert newlines (CRLF) to &lt;BR/&gt;. The conversion is performed
            only when <para>allowHtml</para> is false, or, if <para>allowHtml</para> is true and the text doesn't contain any html.
            </param>
            <returns>The escaped string. Null if the specified string was null, or empty if it was empty.</returns>
        </member>
        <member name="M:Wisej.Base.TextUtils.GeMnemonic(System.String)">
            <summary>
            Returns the first character that is preceded by an ampersand (&amp;).
            </summary>
            <param name="text">The string from which to extract the mnemonic character.</param>
        </member>
        <member name="M:Wisej.Base.TextUtils.MeasureText(System.String,System.Drawing.Font)">
            <summary>
            Returns the size of the specified text when rendered with the specified font.
            </summary>
            <param name="text">The text to measure.</param>
            <param name="font">The <see cref="T:System.Drawing.Font" /> to apply to the measured text.</param>
            <returns>The computed <see cref="T:System.Drawing.Size" /> of  the specified text.</returns>
        </member>
        <member name="M:Wisej.Base.TextUtils.MeasureText(System.String,System.Drawing.Font,System.Drawing.Size)">
            <summary>
            Returns the size of the specified text when rendered with the specified font.
            </summary>
            <param name="text">The text to measure.</param>
            <param name="font">The <see cref="T:System.Drawing.Font" /> to apply to the measured text.</param>
            <param name="layoutArea">The <see cref="T:System.Drawing.Size" /> to use as bounding rectangle for the text.</param>
        </member>
        <member name="P:Wisej.Base.TextUtils.DeviceContext">
            <summary>
            Returns the Azure Web Site compatible device context used to measure strings.
            </summary>
        </member>
        <member name="M:Wisej.Base.TextUtils.MeasureText(System.String,System.Boolean,System.Drawing.Font,System.Action{System.Drawing.Size})">
            <summary>
            Returns the size of the specified text when rendered with the specified font.
            </summary>
            <param name="text">The text to measure.</param>
            <param name="allowHtml">The text to measure may contain HTML tags.</param>
            <param name="font">The <see cref="T:System.Drawing.Font" /> to apply to the measured text.</param>
            <param name="callback">Result callback method, invoked when the client has finished measuring the text.</param>
        </member>
        <member name="M:Wisej.Base.TextUtils.MeasureTextAsync(System.String,System.Boolean,System.Drawing.Font,System.Int32)">
            <summary>
            Asynchronously returns the size of the specified text when rendered with the specified font.
            The measurement is performed on the browser. Returns an awaitable <see cref="T:System.Threading.Tasks.Task"/> that
            contains the measured size.
            </summary>
            <param name="text">The text to measure.</param>
            <param name="allowHtml">The text to measure may contain HTML tags.</param>
            <param name="font">The <see cref="T:System.Drawing.Font" /> to apply to the measured text.</param>
            <param name="width">The optional width to use as bounding rectangle for the text.</param>
            <returns>
            An awaitable <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:Wisej.Base.TextUtils.MeasureText(System.String,System.Boolean,System.Drawing.Font,System.Int32,System.Action{System.Drawing.Size})">
            <summary>
            Returns the size of the specified text when rendered with the specified font.
            </summary>
            <param name="text">The text to measure.</param>
            <param name="allowHtml">The text to measure may contain HTML tags.</param>
            <param name="font">The <see cref="T:System.Drawing.Font" /> to apply to the measured text.</param>
            <param name="width">The width to use as bounding rectangle for the text.</param>
            <param name="callback">Result callback method, invoked when the client has finished measuring the text.</param>
        </member>
        <member name="M:Wisej.Base.TextUtils.ApplyCharacterCasing(System.String,System.Int32)">
            <summary>
            Applies the specified CharacterCasing rule to the text.
            </summary>
            <param name="text">The text to modify according to the CharacterCasing rule.</param>
            <param name="casing">The CharacterCasing rule to apply to the text.</param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Base.TextUtils.EscapeTextInternal(System.String)">
            <summary>
            Escapes HTML brackets and other html entities ready for being assigned to innerHTML without calling unescape() on the client.
            </summary>
            <param name="text"></param>
            <returns>The escaped string. Null if the string is empty.</returns>
        </member>
        <member name="M:Wisej.Base.TextUtils.EscapeTextInternal(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Removes the ampersand from the text and 
            encodes html characters if necessary.
            </summary>
            <param name="text">The text to convert.</param>
            <param name="allowHtml">Whether to encode html characters.</param>
            <param name="useMnemonic">Whether to convert the first mnemonic to an underlined character.</param>
            <param name="translateNewLines">
            Whether to convert newlines (CRLF) to &lt;BR/&gt;. The conversion is performed
            only when <para>allowHtml</para> is false, or, if <para>allowHtml</para> is true and the text doesn't contain any html.
            </param>
            <returns>The escaped string. Null if the string is empty.</returns>
        </member>
        <member name="M:Wisej.Base.TextUtils.GetMnemonicInternal(System.String)">
            <summary>
            Returns the mnemonic character from the text.
            </summary>
            <param name="text"></param>
        </member>
        <member name="T:Wisej.Base.WiredEvents">
            <summary>
            Collection of the event definitions for the control.
            </summary>
        </member>
        <member name="P:Wisej.Base.WiredEvents.Count">
            <summary>
            Returns the number of wired events.
            </summary>
        </member>
        <member name="M:Wisej.Base.WiredEvents.Add(System.String[])">
            <summary>
            Adds a list of wired event.
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:Wisej.Base.WiredEvents.Remove(System.String)">
            <summary>
            Removes the wired event from the list.
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:Wisej.Base.PlatformLayer">
            <summary>
            Encapsulates system calls to the SWF layer.
            </summary>
        </member>
        <member name="M:Wisej.Base.PlatformLayer.DotNETFramework.SetVisible(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Sets the internal Visible state.
            </summary>
            <param name="control"></param>
            <param name="value"></param>
        </member>
        <member name="M:Wisej.Base.PlatformLayer.DotNETFramework.GetVisible(System.Windows.Forms.Control)">
            <summary>
            Gets the internal Visible state.
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:Wisej.Base.PlatformLayer.DotNETFramework.SetCreated(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Sets the internal Created state.
            </summary>
            <param name="control"></param>
            <param name="value"></param>
        </member>
        <member name="M:Wisej.Base.PlatformLayer.DotNETFramework.GetCreated(System.Windows.Forms.Control)">
            <summary>
            Gets the internal Created state.
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:Wisej.Base.PlatformLayer.DotNETFramework.SetEnabled(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Sets the internal Enabled state.
            </summary>
            <param name="control"></param>
            <param name="value"></param>
        </member>
        <member name="M:Wisej.Base.PlatformLayer.DotNETFramework.GetEnabled(System.Windows.Forms.Control)">
            <summary>
            Gets the internal Enabled state.
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:Wisej.Base.PlatformLayer.DotNETFramework.SetTabStop(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Sets the internal TabStop state.
            </summary>
            <param name="control"></param>
            <param name="value"></param>
        </member>
        <member name="M:Wisej.Base.PlatformLayer.DotNETFramework.GetTabStop(System.Windows.Forms.Control)">
            <summary>
            Gets the internal Visible state.
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:Wisej.Base.PlatformLayer.DotNETFramework.SetDisposing(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Sets the internal Disposing property.
            </summary>
            <param name="control"></param>
            <param name="value"></param>
        </member>
        <member name="M:Wisej.Base.PlatformLayer.DotNETFramework.SetTabIndex(System.Windows.Forms.Control,System.Int32)">
            <summary>
            Sets the internal tabIndex field.
            </summary>
            <param name="control"></param>
            <param name="index"></param>
        </member>
        <member name="M:Wisej.Base.PlatformLayer.DotNETFramework.GetTabIndex(System.Windows.Forms.Control)">
            <summary>
            Gets the internal tabIndex value.
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:Wisej.Base.PlatformLayer.DotNETFramework.SetParent(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Sets the internal parent field.
            </summary>
            <param name="control"></param>
            <param name="parent"></param>
        </member>
        <member name="M:Wisej.Base.PlatformLayer.DotNETFramework.SetClientSize(System.Windows.Forms.Control,System.Drawing.Size)">
            <summary>
            Sets the client size of the control.
            </summary>
            <param name="control"></param>
            <param name="size"></param>
        </member>
        <member name="M:Wisej.Base.PlatformLayer.DotNETFramework.AddToControls(System.Windows.Forms.Control.ControlCollection,System.Windows.Forms.Control)">
            <summary>
            Adds the control to the inner collection.
            </summary>
            <param name="collection"></param>
            <param name="control"></param>
        </member>
        <member name="M:Wisej.Base.PlatformLayer.DotNETFramework.RemoveFromControls(System.Windows.Forms.Control.ControlCollection,System.Windows.Forms.Control)">
            <summary>
            Removes the control from the inner collection.
            </summary>
            <param name="collection"></param>
            <param name="control"></param>
        </member>
        <member name="M:Wisej.Base.PlatformLayer.DotNETFramework.CreateNamedColor(System.Drawing.Color,System.String)">
            <summary>
            Creates a new color and sets its name.
            </summary>
            <param name="color"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Base.PlatformLayer.DotNETFramework.InitSynchronizationContext(Wisej.Core.Session)">
            <summary>
            Turns off the synchronization context for WinForms controls since
            we don't have a message loop.
            </summary>
        </member>
        <member name="M:Wisej.Base.PlatformLayer.DotNETFramework.SetControlState(System.Windows.Forms.Control,System.Int32,System.Boolean)">
            <summary>
            Sets the private control state.
            </summary>
            <param name="control"></param>
            <param name="flag"></param>
            <param name="value"></param>
        </member>
        <member name="M:Wisej.Base.PlatformLayer.DotNETFramework.GetControlState(System.Windows.Forms.Control,System.Int32)">
            <summary>
            Gets the private control state.
            </summary>
            <param name="control"></param>
            <param name="flag"></param>
        </member>
        <member name="M:Wisej.Base.PlatformLayer.DotNETFramework.GetControlState2(System.Windows.Forms.Control,System.Int32)">
            <summary>
            Gets the private control state2.
            </summary>
            <param name="control"></param>
            <param name="flag"></param>
        </member>
        <member name="T:Wisej.Base.ApplicationBase">
            <summary>
            The base class for the <see cref="T:Wisej.Web.Application"/> class.
            </summary>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.CheckServerLicense(Wisej.Core.WisejContext)">
            <summary>
            Verifies the server license.
            </summary>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.OnLoad(Wisej.Core.WisejContext)">
            <summary>
            Called when the application loaded and before it is started.
            </summary>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.OnReload(Wisej.Core.WisejContext)">
            <summary>
            Called when the application is reloaded and before the <see cref="E:Wisej.Base.ApplicationBase.ApplicationRefresh"/> event is fired.
            </summary>
        </member>
        <member name="E:Wisej.Base.ApplicationBase.ThreadBegin">
            <summary>
            Fired when the current thread starts processing the request from the client.
            </summary>
            
            <remarks>
            This event is not related to a session. Any static code can attach to this event
            in order to setup or clean up thread static fields or any other isolated static storage.
            <br/>
            <br/>
            It is best to attach to this event from a static type initializer.
            </remarks>
        </member>
        <member name="E:Wisej.Base.ApplicationBase.ThreadEnd">
            <summary>
            Fired when the current thread has completed processing the request from the client.
            </summary>
            
            <remarks>
            This event is not related to a session. Any static code can attach to this event
            in order to setup or clean up thread static fields or any other isolated static storage.
            <br/>
            <br/>
            It is best to attach to this event from a static type initializer.
            </remarks>
        </member>
        <member name="E:Wisej.Base.ApplicationBase.ApplicationStart">
            <summary>
            Fired when the application is started, after the Main method is called.
            </summary>
        </member>
        <member name="E:Wisej.Base.ApplicationBase.ApplicationExit">
            <summary>
            Fired when the application is about to shut down.
            </summary>
        </member>
        <member name="E:Wisej.Base.ApplicationBase.ApplicationRefresh">
            <summary>
            Fired when the application is reloaded in the browser
            because the user hit refresh or changed the URL.
            </summary>
        </member>
        <member name="E:Wisej.Base.ApplicationBase.Idle">
            <summary>
            Fired when the current thread has completed processing all the events
            and before the response is sent back to the client.
            </summary>
        </member>
        <member name="E:Wisej.Base.ApplicationBase.EnterThreadModal">
            <summary>
            Fired when the current thread is about to enter 
            the modal state and before the it's suspended.
            </summary>
            <remarks>
            A thread enters the modal state - it is suspended and waits for 
            a second thread to release it - when the application shows a modal
            dialog or a modal message box.
            </remarks>
        </member>
        <member name="E:Wisej.Base.ApplicationBase.LeaveThreadModal">
            <summary>
            Fired when the current thread is released from the
            modal state.
            </summary>
            <remarks>
            A thread exits the modal state when a modal dialog or modal
            message box is closed by the user or by the code.
            </remarks>
        </member>
        <member name="E:Wisej.Base.ApplicationBase.ThreadException">
            <summary>
            Fired when a thread exception is thrown.
            </summary>
        </member>
        <member name="E:Wisej.Base.ApplicationBase.SessionTimeout">
            <summary>
            Fired when the session is about to time out.
            </summary>
            <remarks>
            The default behavior built-in Wisej is to display a dialog 
            asking the user to prolong the session.
            
            Set Handled to true to stop the default behavior.
            </remarks>
        </member>
        <member name="E:Wisej.Base.ApplicationBase.BeginRequest">
            <summary>
            Fired at the beginning of every request.
            </summary>
        </member>
        <member name="E:Wisej.Base.ApplicationBase.EndRequest">
            <summary>
            Fired at the end of every request.
            </summary>
        </member>
        <member name="E:Wisej.Base.ApplicationBase.ThemeChanged">
            <summary>
            Fired when the current theme is changed.
            </summary>
        </member>
        <member name="E:Wisej.Base.ApplicationBase.ResponsiveProfileChanged">
            <summary>
            Fired when the active responsive profile is changed.
            </summary>
        </member>
        <member name="E:Wisej.Base.ApplicationBase.BrowserSizeChanged">
            <summary>
            Fired when the user resizes the browser.
            </summary>
        </member>
        <member name="E:Wisej.Base.ApplicationBase.BrowserTabActivated">
            <summary>
            Fired when the user activates the browser tab.
            </summary>
        </member>
        <member name="E:Wisej.Base.ApplicationBase.BrowserTabDeactivated">
            <summary>
            Fired when the user deactivates the browser tab.
            </summary>
        </member>
        <member name="E:Wisej.Base.ApplicationBase.HashChanged">
            <summary>
            Fired when the hash part of the URL changes on the client side.
            </summary>
        </member>
        <member name="E:Wisej.Base.ApplicationBase.CultureChanged">
            <summary>
            Fired when the <see cref="P:Wisej.Base.ApplicationBase.CurrentCulture"/> changes.
            </summary>
        </member>
        <member name="E:Wisej.Base.ApplicationBase.RightToLeftChanged">
            <summary>
            Fired when the <see cref="P:Wisej.Base.ApplicationBase.RightToLeft"/> value changes.
            </summary>
        </member>
        <member name="P:Wisej.Base.ApplicationBase.CurrentLicense">
            <summary>
            Returns the currently loaded <see cref="T:Wisej.Core.License.LicenseInfo"/>.
            </summary>
        </member>
        <member name="P:Wisej.Base.ApplicationBase.TheApp">
            <summary>
            The current Application instance.
            </summary>
        </member>
        <member name="P:Wisej.Base.ApplicationBase.Session">
            <summary>
            Provides a generic storage for session-based objects.
            </summary>
        </member>
        <member name="P:Wisej.Base.ApplicationBase.SessionCount">
            <summary>
            Returns the total number of currently active sessions.
            </summary>
        </member>
        <member name="P:Wisej.Base.ApplicationBase.ClientFingerprint">
            <summary>
            Returns the unique client "fingerprint" ID. It can be used
            to distinguish client devices.
            </summary>
            <remarks>The client fingerprint is generated by hashing all the available
            information returned by the browser (OS, user agent, version, etc.) and it's not guaranteed to unique.</remarks>
        </member>
        <member name="P:Wisej.Base.ApplicationBase.SessionId">
            <summary>
            Returns the unique current session ID.
            </summary>
        </member>
        <member name="P:Wisej.Base.ApplicationBase.IsWebSocket">
            <summary>
            Returns true if this application is connected using WebSocket.
            </summary>
        </member>
        <member name="P:Wisej.Base.ApplicationBase.Current">
            <summary>
            Returns the application component instance that an application
            can store and use later to restore the context when updating
            client widgets during an out-of-bound call using <see cref="M:Wisej.Core.ApplicationBase.Update"/>
            </summary>
        </member>
        <member name="P:Wisej.Base.ApplicationBase.IsSecure">
            <summary>
            Returns true if this application running in secure mode (https:// and wss://)
            </summary>
        </member>
        <member name="P:Wisej.Base.ApplicationBase.LogonUserIdentity">
            <summary>
            Returns the security token for the current Windows user.
            </summary>
        </member>
        <member name="P:Wisej.Base.ApplicationBase.User">
            <summary>
            Returns the security information for the current request.
            </summary>
        </member>
        <member name="P:Wisej.Base.ApplicationBase.IsAuthenticated">
            <summary>
            Returns a value indicating whether the request has been authenticated.
            </summary>
        </member>
        <member name="P:Wisej.Base.ApplicationBase.Configuration">
            <summary>
            Returns the current application configuration.
            </summary>
        </member>
        <member name="P:Wisej.Base.ApplicationBase.IsTerminated">
            <summary>
            Returns true when the current application has been terminated.
            </summary>
        </member>
        <member name="P:Wisej.Base.ApplicationBase.RuntimeMode">
            <summary>
            Returns true when the application is running in not in design, debug or test mode.
            </summary>
        </member>
        <member name="P:Wisej.Base.ApplicationBase.Platform">
            <summary>
            The name of the currently loaded platform.
            </summary>
        </member>
        <member name="P:Wisej.Base.ApplicationBase.ServerVariables">
            <summary>
            Returns the server variables.
            </summary>
        </member>
        <member name="P:Wisej.Base.ApplicationBase.ServerName">
            <summary>
            Returns the server's host name, DNS alias, or IP address as it would appear in self-referencing URLs.
            </summary>
            <returns>The server's host name, DNS alias, or IP address.</returns>
        </member>
        <member name="P:Wisej.Base.ApplicationBase.ServerPort">
            <summary>
            Returns the port number to which the request was sent.
            </summary>
            <returns>The port number to which the request was sent.</returns>
        </member>
        <member name="P:Wisej.Base.ApplicationBase.UserAgent">
            <summary>
            Returns the raw user agent string of the client browser.
            </summary>
            <returns>The raw user agent string of the client browser.</returns>
        </member>
        <member name="P:Wisej.Base.ApplicationBase.UserHostAddress">
            <summary>
            Returns the IP host address of the remote client.
            </summary>
            <returns>The IP address of the remote client.</returns>
        </member>
        <member name="P:Wisej.Base.ApplicationBase.UserHostName">
            <summary>Gets the DNS name of the remote client.</summary>
            <returns>The DNS name of the remote client.</returns>
        </member>
        <member name="P:Wisej.Base.ApplicationBase.UserLanguages">
            <summary>
            Gets a sorted string array of client language preferences.
            </summary>
            <returns>A sorted string array of client language preferences, or null if empty.</returns>
        </member>
        <member name="P:Wisej.Base.ApplicationBase.ActiveProfile">
            <summary>
            Returns or sets the current client responsive profile.
            </summary>
            <remarks>
            This is the profile that best matches the current browser on the client.
            it is updated on every request.
            </remarks>
        </member>
        <member name="P:Wisej.Base.ApplicationBase.Browser">
            <summary>
            Returns or sets the client browser information.
            </summary>
        </member>
        <member name="P:Wisej.Base.ApplicationBase.ShowLoader">
            <summary>
            Returns or sets whether the browser is blocked by the Ajax loader.
            </summary>
        </member>
        <member name="P:Wisej.Base.ApplicationBase.ShowLoaderInternal">
            <summary>
            Sets the state of the loader without affecting the client
            </summary>
        </member>
        <member name="P:Wisej.Base.ApplicationBase.ShowConsole">
            <summary>
            Shows or hides the debug console on the browser.
            </summary>
            <remarks>
            Displays a simple HTMl only debug console. Works with
            any browser also when the developer tools are not available.
            </remarks>
        </member>
        <member name="P:Wisej.Base.ApplicationBase.EnableUnloadConfirmation">
            <summary>
            Returns or sets whether the browser will ask the user to confirm
            unloading the current page.
            </summary>
            <remarks>
            <para>
            This property attaches the window.onbeforeunload event. See https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onbeforeunload.
            </para>
            <para>
            It's not possible to determine whether the page is being unloaded because the
            user is trying to close the tab, close the browser, or is refreshing the page, or is taking any other
            action that may reload the page.
            </para>
            </remarks>
        </member>
        <member name="P:Wisej.Base.ApplicationBase.StartupUri">
            <summary>
            Returns the URI used to start the application.
            </summary>
        </member>
        <member name="P:Wisej.Base.ApplicationBase.StartupUrl">
            <summary>
            Returns the URL used to start the application.
            </summary>
        </member>
        <member name="P:Wisej.Base.ApplicationBase.Hash">
            <summary>
            Returns or sets the hash part of the URL on the client.
            </summary>
        </member>
        <member name="P:Wisej.Base.ApplicationBase.QueryString">
            <summary>
            Returns the parameters used to launch the application.
            </summary>
        </member>
        <member name="P:Wisej.Base.ApplicationBase.Uri">
            <summary>
            Returns the current <see cref="T:System.Uri"/> used either to launch or reload the 
            application. It may be different from <see cref="P:Wisej.Base.ApplicationBase.StartupUri"/>.
            </summary>
        </member>
        <member name="P:Wisej.Base.ApplicationBase.Url">
            <summary>
            Returns the current URL used either to launch or reload the 
            application. It may be different from <see cref="P:Wisej.Base.ApplicationBase.StartupUrl"/>.
            </summary>
        </member>
        <member name="P:Wisej.Base.ApplicationBase.CommonAppDataPath">
            <summary>
            Returns the path for the application data that is shared among all users.
            </summary>
            <returns>The path for the application data that is shared among all users.</returns>
        </member>
        <member name="P:Wisej.Base.ApplicationBase.CommonAppDataRegistry">
            <summary>
            Returns the registry key for the application data that is shared among all users.
            </summary>
            <returns>A <see cref="T:Microsoft.Win32.RegistryKey" /> representing the registry key of 
            the application data that is shared among all users.</returns>
        </member>
        <member name="P:Wisej.Base.ApplicationBase.CompanyName">
            <summary>
            Returns the company name associated with the application.
            </summary>
            <returns>The company name.</returns>
        </member>
        <member name="P:Wisej.Base.ApplicationBase.CurrentCulture">
            <summary>
            Returns or sets the current <see cref="T:System.Globalization.CultureInfo"/> for the session.
            </summary>
            <returns>A <see cref="T:System.Globalization.CultureInfo" /> representing the current culture for the current session.</returns>
        </member>
        <member name="P:Wisej.Base.ApplicationBase.RightToLeft">
            <summary>
            Returns or sets whether all the controls in the
            applications should operate using the right-to-left mode.
            </summary>
            <remarks>
            The value of this property is updated automatically when the current language changes
            if the value of "rightToLeft" in the application configuration file is set to "auto".
            </remarks>
        </member>
        <member name="P:Wisej.Base.ApplicationBase.ExecutablePath">
            <summary>
            Returns the path for the application.s main assembly.
            </summary>
            <returns>The path and file name for the application's main assembly.</returns>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.FindComponent(System.Predicate{Wisej.Core.IWisejComponent})">
            <summary>
            Find the first component that matches the conditions defined in the predicate function.
            </summary>
            <param name="match">A custom <see cref="T:System.Predicate`1"/> expression used to
            match the <see cref="T:Wisej.Core.IWisejComponent"/> to find.</param>
            <returns>The first <see cref="T:Wisej.Core.IWisejComponent"/> qualified by the <paramref name="match"/> expression.</returns>
            <remarks>
            This method lets an application find any live component in the current session.
            <code lang="cs">
            <![CDATA[
            	// Find the first component that is a Button with Text = "OK"
            	var button = Application.FindComponent(c => c is Button && ((Button)c).Text == "OK");
            ]]>
            </code>
            </remarks>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.FindComponents(System.Predicate{Wisej.Core.IWisejComponent})">
            <summary>
            Finds all the components that match the conditions in the predicate function.
            </summary>
            <param name="match">A custom <see cref="T:System.Predicate`1"/> expression used to
            match the list of <see cref="T:Wisej.Core.IWisejComponent"/> objects to find.</param>
            <returns>The list of <see cref="T:Wisej.Core.IWisejComponent"/> instances qualified by the <paramref name="match"/> expression.</returns>
            <remarks>
            This method lets an application iterate through all the live components in the current session.
            <code lang="cs">
            <![CDATA[
            	// List all text boxes that are read only in all forms.
            	var list = Application.FindComponents(c => c is TextBox && ((TextBox)c).ReadOnly);
            ]]>
            </code>
            </remarks>
        </member>
        <member name="P:Wisej.Base.ApplicationBase.OpenWindows">
            <summary>
            Returns a collection of open forms owned by the application.
            </summary>
            <returns>A <see cref="T:Wisej.Base.WindowCollection" /> containing all the currently open forms owned by this application.</returns>
        </member>
        <member name="P:Wisej.Base.ApplicationBase.ProductName">
            <summary>
            Returns the product name associated with this application.
            </summary>
            <returns>The product name.</returns>
        </member>
        <member name="P:Wisej.Base.ApplicationBase.ProductVersion">
            <summary>
            Returns the product version associated with this application stored
            either in <see cref="T:System.Reflection.AssemblyInformationalVersionAttribute"/> or <see cref="T:System.Reflection.AssemblyFileVersionAttribute"/>.
            </summary>
            <returns>The product version.</returns>
        </member>
        <member name="P:Wisej.Base.ApplicationBase.StartupPath">
            <summary>
            Returns the root path of the web application.
            </summary>
            <returns>The path of the web application.</returns>
        </member>
        <member name="P:Wisej.Base.ApplicationBase.Title">
            <summary>
            Returns or sets the page title in the browser.
            </summary>
        </member>
        <member name="P:Wisej.Base.ApplicationBase.FavIcon">
            <summary>
            Returns or sets the favicon to display in the browser.
            </summary>
        </member>
        <member name="P:Wisej.Base.ApplicationBase.FavIconSource">
            <summary>
            Returns or sets the URL to the favicon to display in the browser.
            </summary>
        </member>
        <member name="P:Wisej.Base.ApplicationBase.LicenseKey">
            <summary>
            Returns or sets the runtime server license key.
            </summary>
            <remarks>
            <para>
            Setting the <see cref="P:Wisej.Base.ApplicationBase.LicenseKey"/> programmatically has to be done before
            the application is loaded. The best place is the static constructor for the Program
            static class, or the static constructor of the main window (if defined in Default.js).
            </para>
            <code language="cs">
            static class Program
            {
            	static Program()
            	{
            		Application.LicenseKey = "...";
            	}
            }
            </code>
            </remarks>
        </member>
        <member name="P:Wisej.Base.ApplicationBase.Theme">
            <summary>
            Returns an instance of <see cref="T:Wisej.Core.ClientTheme"/> representing the theme currently being used by the application
            </summary>
        </member>
        <member name="F:Wisej.Base.ApplicationBase.CurrentEvent">
            <summary>
            Holds a reference to the event currently being processed on this thread.
            </summary>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.Exit">
            <summary>
            Terminates the application and the corresponding session.
            </summary>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.LoadTheme(System.String,System.String[])">
            <summary>
            Changes the current theme.
            </summary>
            <param name="name">Name of the theme resource. Use only the name without the path and without the extension.</param>
            <param name="mixins">Optional list of theme mixins. If null, the default theme mixins are always applied.</param>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.Eval(System.String)">
            <summary>
            Executes the JavaScript script on the client.
            </summary>
            <param name="script">The script to evaluate.</param>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.Eval(System.String,System.Action{System.Object})">
            <summary>
            Executes the JavaScript script on the client and receives the
            return value (or null) in the <paramref name="callback"/> method.
            </summary>
            <param name="script">The script to evaluate.</param>
            <param name="callback">Asynchronous callback method that receives the return value.</param>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.EvalAsync(System.String)">
            <summary>
            Asynchronously executes the JavaScript script on the client and returns
            an awaitable <see cref="T:System.Threading.Tasks.Task"/> with the result of the remote call.
            </summary>
            <param name="script">The script to evaluate.</param>
            <returns>
            An awaitable <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.Call(System.String,System.Object[])">
            <summary>
            Executes the JavaScript function on the client.
            </summary>
            <param name="function">The name of the function to execute.</param>
            <param name="args">The arguments to pass to the function.</param>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.Call(System.String,System.Action{System.Object},System.Object[])">
            <summary>
            Executes the JavaScript function on the client and receives the
            return value (or null) in the <paramref name="callback"/> method.
            </summary>
            <param name="function">The name of the function to execute.</param>
            <param name="callback">Asynchronous callback method that receives the return value.</param>
            <param name="args">The arguments to pass to the function.</param>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.CallAsync(System.String,System.Object[])">
            <summary>
            Asynchronously executes the JavaScript function on the client and returns
            an awaitable <see cref="T:System.Threading.Tasks.Task"/> with the result of the remote call.
            </summary>
            <param name="function">The name of the function to execute.</param>
            <param name="args">The arguments to pass to the function.</param>
            <returns>
            An awaitable <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.Post(System.Action)">
            <summary>
            Executes the callback method after all
            processing is completed and before updating the client.
            </summary>
            <param name="callback">Method to invoke after the request has completed but before
            sending the response to the server.</param>
            <remarks>
            The Post() method is similar to the BeginInvoke() method used by desktop applications.
            It allows you to execute a block of code out of sync with the current execution flow.
            <code>
            
            void Test() {
            
            	Application.Post(() => {
            		this.listBox.Items.Add("1");
            	});
            	
            	this.listBox.Items.Add("2");
            	
            	// The items will be added in this order: "2", "1".
            }
            
            </code>
            </remarks>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.StartPolling(System.Int32)">
            <summary>
            Instructs the client to start polling the server for UI changes
            at the specified <paramref name="interval"/> when a WebSocket connection
            is not available.
            </summary>
            <param name="interval">Polling interval in milliseconds. The minimum is 1000ms.</param>
            <remarks>
            <para>
            Calling this method when <see cref="P:Wisej.Base.ApplicationBase.IsWebSocket"/> is true has no effect.
            </para>
            <para>
            Use client side polling when you know that your code will start a background task
            that needs to update the client asynchronously (push updates) and your server or
            clients don't support WebSocket connections.
            </para>
            <para>
            Once the background tasks are completed call <see cref="M:Wisej.Base.ApplicationBase.EndPolling"/> to reduce the
            incoming requests from the client.
            </para>
            <code>
            
            // this has not effect when the client and server are connected using WebSocket.
            Application.StartPolling(1000);
            
            Application.StartTask(() => {
            
            	for (int i = 0; i &lt; 100; i++) {
            		this.label1.Text = "Counting..." + i;
            		Thread.Sleep(1000);
            	}
            	
            	// this has not effect when the client and server are NOT connected using WebSocket.
            	Application.Update(this);
            
            	// this has not effect when the client and server are connected using WebSocket.
            	Application.EndPolling();
            
            });
            </code>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="interval" /> specified is less than 1.</exception>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.EndPolling">
            <summary>
            Stops the polling requests from the client.
            </summary>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.Reload">
            <summary>
            Causes the application to reload on the browser.
            </summary>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.Navigate(System.String,System.String)">
            <summary>
            Navigate to the specified URL.
            </summary>
            <param name="url">URL to navigate to.</param>
            <param name="target">The target browser window: _self, _blank, etc.</param>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.Download(System.String,System.String)">
            <summary>
            Downloads the specified file on the client.
            </summary>
            <param name="filePath">The file to download.</param>
            <param name="fileName">The name of the file to save on the client.</param>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.Download(System.Drawing.Image,System.String)">
            <summary>
            Downloads the specified image to the client.
            </summary>
            <param name="image">The image to download.</param>
            <param name="fileName">The name of the file to save on the client.</param>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.Download(System.IO.Stream,System.String)">
            <summary>
            Downloads the bytes in the stream to the client.
            </summary>
            <param name="stream">The stream to send to the client.</param>
            <param name="fileName">The file name the client will use to save the stream.</param>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.DownloadAndOpen(System.String,System.String,System.String)">
            <summary>
            Downloads the specified file on the client.
            </summary>
            <param name="target">Specifies where to open the file. Leave empty or use "_self" to open in the current tab, _blank to open in a new tab.</param>
            <param name="filePath">The file to download.</param>
            <param name="fileName">The name of the file to save on the client.</param>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.DownloadAndOpen(System.String,System.Drawing.Image,System.String)">
            <summary>
            Downloads the specified image to the client.
            </summary>
            <param name="target">Specifies where to open the file. Leave empty or use "_self" to open in the current tab, _blank to open in a new tab.</param>
            <param name="image">The image to download.</param>
            <param name="fileName">The name of the file to save on the client.</param>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.DownloadAndOpen(System.String,System.IO.Stream,System.String)">
            <summary>
            Downloads the bytes in the stream to the client.
            </summary>
            <param name="target">Specifies where to open the file. Leave empty or use "_self" to open in the current tab, _blank to open in a new tab.</param>
            <param name="stream">The stream to send to the client.</param>
            <param name="fileName">The file name the client will use to save the stream.</param>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.MapPath(System.String)">
            <summary>
            Returns the full file path in relation to the application's project directory.
            </summary>
            <param name="path"></param>
            <returns>The full path relative to the current application's root directory.</returns>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.StartTask(System.Action)">
            <summary>
            Starts a new task within the current application context and returns immediately.
            See also <see href="https://wisej.com/docs/html/BackgroundTasks.htm"/>.
            </summary>
            <param name="action">Start method invoked by the new task when it starts up.</param>
            
            <remarks>
            <para>
            The task runs in the background but it's still capable of updating the client asynchronously when working
            with WebSocket by calling the <see cref="M:Wisej.Web.Application.Update"/> method to push the UI updates to the client browser.
            </para>
            <para>
            If you want to support background updates for clients or servers that can't use the WebSocket connection, you
            can either add a <see cref="T:Wisej.Web.Timer"/> component to the parent container to force period requests to the
            server, or you can use the <see cref="M:Wisej.Web.Application.StartPolling"/> and <see cref="M:Wisej.Web.Application.EndPolling"/> methods.
            </para>
            <code>
            Application.StartTask(() => {
            
            	for (int i = 0; i &lt; 100; i++) {
            	
            		this.label1.Text = "Counting..." + i;
            		
            		// just wait a bit or it's too fast.
            		Thread.Sleep(1000);
            		Application.Update(this);
            	}
            });
            </code>
            </remarks>
            <returns>
            An awaitable <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.StartTask``1(System.Func{``0})">
            <summary>
            Starts a new task with a return value within the current application context and returns immediately.
            See also <see href="https://wisej.com/docs/html/BackgroundTasks.htm"/>.
            </summary>
            <param name="action">Start method invoked by the new task when it starts up.</param>
            
            <remarks>
            <para>
            The task runs in the background but it's still capable of updating the client asynchronously when working
            with WebSocket by calling the <see cref="M:Wisej.Web.Application.Update"/> method to push the UI updates to the client browser.
            </para>
            <para>
            The generics overload of <see cref="M:Wisej.Web.Application.StartTask(Action)"/> allows the task to return a value.
            You can use this with the async/await pattern and asynchronously wait for the task to complete.
            </para>
            <para>
            If you want to support background updates for clients or servers that can't use the WebSocket connection, you
            can either add a <see cref="T:Wisej.Web.Timer"/> component to the parent container to force period requests to the
            server, or you can use the <see cref="M:Wisej.Web.Application.StartPolling"/> and <see cref="M:Wisej.Web.Application.EndPolling"/> methods.
            </para>
            <code>
            string text = await Application.StartTask(() => {
            
            	string value = "";
            	for (int i = 0; i &lt; 100; i++) {
            	
            		value += i.ToString();
            		
            		// just wait a bit or it's too fast.
            		Thread.Sleep(100);
            	}
            	return value;
            });
            
            this.label.Text = text;
            Application.Update(this);
            
            </code>
            <para>
            Note that you don't have to specify the type in the angular brackets, the compiler
            will automatically detect the type from the return value of the asynchronous function.
            </para>
            </remarks>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.RunInContext(Wisej.Core.IWisejComponent,System.Action)">
            <summary>
            Executes the callback in context.
            </summary>
            <param name="context">
            The application context to update. It can be any Wisej component or the <see cref="T:Wisej.Core.IWisejComponent"/> returned 
            by the property <see cref="P:Wisej.Base.ApplicationBase.Current"/>.
            </param>
            <param name="action">Function to execute in context. The code in the function can access all the static Application properties when
            executed from an out-of-bound thread.</param>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.Update(Wisej.Core.IWisejComponent,System.Action)">
             <summary>
             Executes the optional callback in context and pushes all the pending updates to the client when in WebSocket mode.
             </summary>
             <param name="context">
             The application context to update. It can be any Wisej component or the <see cref="T:Wisej.Core.IWisejComponent"/> returned 
             by the property <see cref="P:Wisej.Base.ApplicationBase.Current"/>.
             </param>
             <param name="action">Function to execute in context. The code in the function can access all the static Application properties when
             executed from an out-of-bound thread.</param>
             <remarks>
             <para>
             Use this method when you need to update the client asynchronously from an 
             out-of-bound thread (different thread, not originating from a client request).
             </para>
             <para>
             You can call this method at the end of the code that updates the UI:
             </para>
             <code>
             Application.StartTask(() => {
             
            		for (int i = 0; i &lt; 100; i++) {
            		
            			this.label1.Text = "Counting..." + i;
            			
            			// just wait a bit or it's too fast.
            			Thread.Sleep(1000);
            		}
            		
            		Application.Update(this);
             
             });
             </code>
             <para>
             Or you can use the optional <paramref name="action"/> function to enclose the code that
             updates the UI in a block and ensure that the client is updated when the code block exits:
             </para>
             <code>
             Application.StartTask(() => {
             
            		Application.Update(this, () => {
            		
            			for (int i = 0; i &lt; 100; i++) {
            		
            				this.label1.Text = "Counting..." + i;
            			
            				// just wait a bit or it's too fast.
            				Thread.Sleep(1000);
            			}
            		});
             
             });
             </code>
             </remarks>
            
        </member>
        <member name="M:Wisej.Base.ApplicationBase.RestoreSession(System.Web.HttpContext)">
            <summary>
            Restores the Wisej session using the HttpContext instance.
            Used primarily by AspNet wrappers or controls.
            </summary>
            <exclude/>
            <param name="context">The <see cref="T:System.Web.HttpContext"/> from which to restore the Wisej session.</param>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.RunInContext(System.Web.HttpContext,System.Action)">
            <summary>
            Executes the callback in context.
            </summary>
            <param name="context">The HttpContext context to update.</param>
            <param name="action">Function to execute in context. The code in the function can access all the static Application properties when
            executed from an out-of-bound thread.</param>
        </member>
        <member name="P:Wisej.Base.ApplicationBase.Cookies">
            <summary>
            Collection of cookies.
            </summary>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.LoadComponent(System.String,System.String)">
            <summary>
            Creates an instance of the specified component from the assembly.
            </summary>
            <param name="filePath">The file name or full path for the assembly to load.</param>
            <param name="className"></param>
            <returns>An instance of a Wisej component implementing the <see cref="T:Wisej.Core.IWisejComponent"/> interface.</returns>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.LoadAssembly(System.String)">
            <summary>
            Loads an assembly given the file name or path.
            </summary>
            <param name="filePath">The file name or full path for the assembly to load.</param>
            <returns>The loaded <see cref="T:System.Reflection.Assembly"/>.</returns>
            <remarks>
            This method loads the assembly and, if the assembly contains Wisej components that need embedded resources - like JavaScript classes or CSS styles - that are
            embedded in the assembly, notifies the client with the URL to load the additional resources dynamically.
            </remarks>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.Print(Wisej.Core.IWisejWindow)">
            <summary>
            Prints the specified window.
            </summary>
            <param name="window">The window to print</param>
            <remarks>The window is printed without the caption or the borders, if present.</remarks>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.Print">
            <summary>
            Prints the entire browser window.
            </summary>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.AddEventFilter(Wisej.Core.IEventFilter)">
            <summary>
            Adds an event filter to monitor all the incoming events before they are routed to their respective component.
            </summary>
            <param name="filter">An object that implements the <see cref="T:Wisej.Core.IEventFilter"/> interface to add to the filter list.</param>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.RemoveEventFilter(Wisej.Core.IEventFilter)">
            <summary>
            Removes the filter from the list of registered event filters.
            </summary>
            <param name="filter">An object that implements the <see cref="T:Wisej.Core.IEventFilter"/> interface to remove from the filter list.</param>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.UpdateThreadCulture">
            <summary>
            Updates the current thread culture to match the session's culture.
            </summary>
        </member>
        <member name="P:Wisej.Base.ApplicationBase.IsDirty">
            <summary>
            Marks the application instance as dirty.
            </summary>
        </member>
        <member name="F:Wisej.Base.ApplicationBase.Events">
            <summary>
            Event handlers attached to the ApplicationBase instance.
            </summary>
        </member>
        <member name="P:Wisej.Base.ApplicationBase.Terminated">
            <summary>
            Returns true if the application has been terminated.
            </summary>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.Load(Wisej.Core.WisejContext,System.Object)">
            <summary>
            Creates a new instance of the proper Application class from
            the Wisej.Web, and:
            
            - Prepares the platform, theme and browser objects
            - Invokes the startup main method in the configuration file
            - And/or creates the main form defined in the configuration file
            </summary>
            <param name="context">Web request context.</param>
            <param name="message">Message data received by the client. Contains the session id and the startup arguments.</param>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.Start">
            <summary>
            Invokes the main method defined in the application configuration file
            and/or created the main window.
            </summary>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.Reload(Wisej.Core.WisejContext,System.Object)">
            <summary>
            Updates the application URL, arguments, cookies, browser metrics, and culture.
            </summary>
            <param name="context">Web request context.</param>
            <param name="message">Message data received by the client. Contains the session id and the startup arguments.</param>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.UpdateAppState">
            <summary>
            Updates the browser's title and favicon when the application is refreshed.
            </summary>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.Refresh">
            <summary>
            Updates the 
            </summary>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.CloseAllWindows">
            <summary>
            Closes all the open windows.
            </summary>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.AddHandler(System.String,System.Delegate)">
            <summary>
            Adds the event handler.
            </summary>
            <param name="name"></param>
            <param name="handler"></param>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.RemoveHandler(System.String,System.Delegate)">
            <summary>
            Removes the event handler.
            </summary>
            <param name="name"></param>
            <param name="handler"></param>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.RaiseApplicationStart(System.EventArgs)">
            <summary>
            Raise the <see cref="E:Wisej.Base.ApplicationBase.ApplicationStart"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.RaiseApplicationRefresh(System.EventArgs)">
            <summary>
            Raise the <see cref="E:Wisej.Base.ApplicationBase.ApplicationRefresh"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.RaiseApplicationExit(System.EventArgs)">
            <summary>
            Raise the <see cref="E:Wisej.Base.ApplicationBase.ApplicationExit"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.RaiseIdle(System.EventArgs)">
            <summary>
            Raise the <see cref="E:Wisej.Base.ApplicationBase.Idle"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.RaiseLeaveThreadModal(System.EventArgs)">
            <summary>
            Raise the <see cref="E:Wisej.Base.ApplicationBase.LeaveThreadModal"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.RaiseEnterThreadModal(System.EventArgs)">
            <summary>
            Raise the <see cref="E:Wisej.Base.ApplicationBase.EnterThreadModal"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.RaiseThreadException(System.Threading.ThreadExceptionEventArgs)">
            <summary>
            Raise the <see cref="E:Wisej.Base.ApplicationBase.ThreadException"/> event.
            </summary>
            <returns>true if the event was handled.</returns>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.RaiseThreadBegin">
            <summary>
            Raise the <see cref="E:Wisej.Base.ApplicationBase.ThreadBegin"/> event.
            </summary>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.RaiseThreadEnd">
            <summary>
            Raise the <see cref="E:Wisej.Base.ApplicationBase.ThreadEnd"/> event.
            </summary>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.RaiseSessionTimeout(System.ComponentModel.HandledEventArgs)">
            <summary>
            Raise the <see cref="E:Wisej.Base.ApplicationBase.SessionTimeout"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.RaiseBeginRequest(System.EventArgs)">
            <summary>
            Raise the <see cref="E:Wisej.Base.ApplicationBase.BeginRequest"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.RaiseEndRequest(System.EventArgs)">
            <summary>
            Raise the <see cref="E:Wisej.Base.ApplicationBase.EndRequest"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.RaiseThemeChanged(System.EventArgs)">
            <summary>
            Raise the <see cref="E:Wisej.Base.ApplicationBase.ThemeChanged"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.RaiseResponsiveProfileChanged(Wisej.Core.ResponsiveProfileChangedEventArgs)">
            <summary>
            Raise the <see cref="E:Wisej.Base.ApplicationBase.ResponsiveProfileChanged"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.RaiseBrowserSizeChanged(System.EventArgs)">
            <summary>
            Raise the <see cref="E:Wisej.Base.ApplicationBase.BrowserSizeChanged"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.RaiseBrowserTabActivated(System.EventArgs)">
            <summary>
            Raise the <see cref="E:Wisej.Base.ApplicationBase.BrowserTabActivated"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.RaiseBrowserTabDeactivated(System.EventArgs)">
            <summary>
            Raise the <see cref="E:Wisej.Base.ApplicationBase.BrowserTabDeactivated"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.RaiseHashChanged(Wisej.Core.HashChangedEventArgs)">
            <summary>
            Raise the <see cref="E:Wisej.Base.ApplicationBase.HashChanged"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.RaiseCultureChanged(System.EventArgs)">
            <summary>
            Raise the <see cref="E:Wisej.Base.ApplicationBase.CultureChanged"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.RaiseRightToLeftChanged(System.EventArgs)">
            <summary>
            Raise the <see cref="E:Wisej.Base.ApplicationBase.RightToLeftChanged"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.OnThreadException(System.Exception)">
            <summary>
            Process unhandled exceptions.
            </summary>
            <param name="ex">A <see cref="T:System.Exception"/> that occurred while processing the current request.</param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.OnSessionTimeout">
            <summary>
            Process the session timeout request.
            </summary>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.IsCriticalException(System.Exception)">
            <summary>
            Checks if the exception is considered critical.
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.AddTranslation(System.String,System.String)">
            <summary>
            Adds the text and corresponding translation to the default locale on the client.
            </summary>
            <param name="text">The text to translate.</param>
            <param name="translation">The translation override.</param>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.AddTranslationInternal(System.String,System.String)">
            <summary>
            Adds the text and corresponding translation to the default locale on the client.
            </summary>
            <param name="text">The text to translate.</param>
            <param name="translation">The translation override.</param>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.GetMainAssembly">
            <summary>
            Returns the main application assembly.
            That is the assembly with the Main method or
            the assembly with the MainForm.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.GetApplicationType">
            <summary>
            Returns the Application type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.CreateApplication">
            <summary>
            Creates an instance of the platform's Application class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.ResolveMainWindowType(Wisej.Core.Configuration)">
            <summary>
            Finds the main window type according to the 
            application configuration.
            </summary>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="P:Wisej.Base.ApplicationBase.MainWindowType">
            <summary>
            Returns the main window type.
            </summary>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.ResolveMainMethod(Wisej.Core.Configuration)">
            <summary>
            Finds a suitable startup method according to the
            application configuration.
            </summary>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.GetResourceString(System.String)">
            <summary>
            Returns the localized string from the application's resources.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Wisej.Base.ApplicationBase.MainMethod">
            <summary>
            The Main entry point.
            </summary>
        </member>
        <member name="P:Wisej.Base.ApplicationBase.ActiveWindow">
            <summary>
            Stores the currently active window.
            </summary>
        </member>
        <member name="P:Wisej.Base.ApplicationBase.FocusedControl">
            <summary>
            Stores the currently active form.
            </summary>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.Update">
            <summary>
            Forces a full refresh of the application state.
            </summary>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.UpdateResponsiveProfile">
            <summary>
            Selects the most suitable responsive profile
            according to the selection pattern.
            </summary>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.OnWebUpdate(System.Object)">
            <summary>
            Updates the client component using the state information.
            </summary>
            <param name="state">Dynamic state object.</param>
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.OnWebEvent(Wisej.Core.WisejEventArgs)">
            <summary>
            Processes the event from the client.
            </summary>
            <param name="e">Event arguments.</param>
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.OnWebRender(System.Object)">
            <summary>
            Renders the client component.
            </summary>
            <param name="config">Dynamic configuration object.</param>
            <exclude/>
        </member>
        <member name="P:Wisej.Base.ApplicationBase.IsDisposed">
            <summary>
            Indicates that the current application instance, which corresponds to the
            session, has been terminated and disposed.
            </summary>
        </member>
        <member name="P:Wisej.Base.ApplicationBase.Wisej#Core#IWisejComponent#IsDirty">
            <summary>
            Marks the application instance as dirty.
            </summary>
        </member>
        <member name="P:Wisej.Base.ApplicationBase.Wisej#Core#IWisejComponent#Configuration">
            <summary>
            Not relevant.
            </summary>
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.Wisej#Core#IWisejComponent#Reference(System.Collections.IList)">
            <summary>
            Not relevant.
            </summary>
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.Wisej#Core#IWisejComponent#UpdateWidget">
            <summary>
            Not relevant.
            </summary>
            <exclude/>
        </member>
        <member name="E:Wisej.Base.ApplicationBase.Wisej#Core#IWisejComponent#Updated">
            <summary>
            Not relevant.
            </summary>
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.Wisej#Core#IWisejComponent#UpdateComponent(System.Object)">
            <summary>
            Updates the application state.
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.Wisej#Core#IWisejComponent#Render(System.Object)">
            <summary>
            Renders the application state.
            </summary>
            <param name="config">Dynamic configuration object.</param>
        </member>
        <member name="M:Wisej.Base.ApplicationBase.Wisej#Core#IWisejComponent#Event(Wisej.Core.WisejEventArgs)">
            <summary>
            Processes a client event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="P:Wisej.Base.ApplicationBase.Wisej#Core#IWisejSynchronized#SyncLock">
            <summary>
            Returns the object to use to synchronize access.
            </summary>
        </member>
        <member name="T:Wisej.Base.ApplicationBase.WindowCollection">
            <summary>
            Holds the collection of all top-level application windows (i.e. Forms and Pages).
            </summary>
        </member>
        <member name="P:Wisej.Base.ApplicationBase.WindowCollection.Item(System.String)">
            <summary>
            Finds the window using the simple or qualified name.
            </summary>
            <param name="name">The name of the window. It can be the simple name or the fully qualified name.</param>
            <returns></returns>
        </member>
        <member name="T:Wisej.Base.Component">
            <summary>
            The base class for Wisej components that are not controls. Wisej components
            are still managed on the client and the server but are not present on the designer surface.
            
            Examples of wisej components are: menu items, image lists, tree nodes, list items.
            </summary>
        </member>
        <member name="M:Wisej.Base.Component.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Wisej.Base.Component.#ctor(System.Boolean)">
            <summary>
            Default constructor
            </summary>
            <param name="embedded">
            Indicates whether the component is embedded in a parent component.
            Embedded components don't update themselves, instead their parent is in charge of updating the corresponding client widget.
            </param>
        </member>
        <member name="M:Wisej.Base.Component.Finalize">
            <summary>
            Destructor dispose pattern.
            </summary>
            <exclude/>
        </member>
        <member name="E:Wisej.Base.Component.Disposed">
            <summary>
            Fired when the component is disposed.
            </summary>
        </member>
        <member name="P:Wisej.Base.Component.InClientEvent">
            <summary>
            Returns true if the component is processing a client event.
            </summary>
        </member>
        <member name="P:Wisej.Base.Component.UserData">
            <summary>
            Returns a dynamic object that can be used to store custom data in relation to this component.
            </summary>
        </member>
        <member name="P:Wisej.Base.Component.IsDisposed">
            <summary>
            Indicates that the component has been disposed.
            </summary>
        </member>
        <member name="M:Wisej.Base.Component.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:Wisej.Core.Component" />.</summary>
        </member>
        <member name="M:Wisej.Base.Component.Dispose(System.Boolean)">
            <summary>
            Marks this component as disposed.
            </summary>
            <param name="disposing">true when this method is called by the application rather than a finalizer.</param>
        </member>
        <member name="M:Wisej.Base.Component.Update">
            <summary>
            Updates the component on the client.
            </summary>
        </member>
        <member name="M:Wisej.Base.Component.Update(System.String)">
            <summary>
            Forces the server to send back the specified property.
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:Wisej.Base.Component.Eval(System.String)">
            <summary>
            Runs the <paramref name="javaScript"/> code within the component's context
            in the browser.
            </summary>
            <param name="javaScript">The JavaScript code to run on the client.</param>
        </member>
        <member name="M:Wisej.Base.Component.Eval(System.String,System.Action{System.Object})">
            <summary>
            Runs the <paramref name="javaScript"/> code within the component's context
            in the browser and  returns the value to the <paramref name="callback"/> method.
            </summary>
            <param name="javaScript">The JavaScript code to evaluate on the client.</param>
            <param name="callback">Asynchronous callback method that receives the return value.</param>
        </member>
        <member name="M:Wisej.Base.Component.EvalAsync(System.String)">
            <summary>
            Asynchronously runs the <paramref name="javaScript"/> code within the component's context
            in the browser and returns an awaitable <see cref="T:System.Threading.Tasks.Task"/> that contains the
            value returned by the remote call.
            </summary>
            <param name="javaScript">The JavaScript code to evaluate on the client.</param>
            <returns>
            An awaitable <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:Wisej.Base.Component.Call(System.String,System.Object[])">
            <summary>
            Runs the JavaScript <paramref name="function"/> within the component's context
            in the browser.
            </summary>
            <param name="function">The name of the JavaScript function to execute.</param>
            <param name="args">The arguments to pass to the function.</param>
        </member>
        <member name="M:Wisej.Base.Component.Call(System.String,System.Action{System.Object},System.Object[])">
            <summary>
            Runs the JavaScript <paramref name="function"/> within the component's context 
            in the browser and returns the value to the <paramref name="callback"/> method.
            </summary>
            <param name="function">The name of the JavaScript function to execute.</param>
            <param name="callback">Asynchronous callback method that receives the return value.</param>
            <param name="args">The arguments to pass to the function.</param>
        </member>
        <member name="M:Wisej.Base.Component.CallAsync(System.String,System.Object[])">
            <summary>
            Asynchronously runs the JavaScript <paramref name="function"/> within the component's context 
            in the browser and returns an awaitable <see cref="T:System.Threading.Tasks.Task"/> containing the value returned by the
            remote call.
            </summary>
            <param name="function">The name of the JavaScript function to execute.</param>
            <param name="args">The arguments to pass to the function.</param>
            <returns>
            An awaitable <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:Wisej.Base.Component.GetState(System.UInt32)">
            <summary>
            Returns the state flag.
            </summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Base.Component.SetState(System.UInt32,System.Boolean)">
            <summary>
            Sets the specified state flag.
            </summary>
            <param name="flag"></param>
            <param name="value"></param>
        </member>
        <member name="M:Wisej.Base.Component.FromHandle(System.IntPtr)">
            <summary>
            Returns the component that is currently associated with the specified server-side id (handle).
            </summary>
            <returns>The <see cref="T:Wisej.Base.ControlBase"/> associated with the specified handle; 
            returns null if no control with the specified handle is found.</returns>
            <param name="handle">The handle to search for.</param>
        </member>
        <member name="P:Wisej.Base.Component.Wisej#Core#IWisejComponent#Id">
            <summary>
            The unique client id of the component.
            </summary>
        </member>
        <member name="P:Wisej.Base.Component.Wisej#Core#IWisejComponent#Handle">
            <summary>
            The unique server handle of the component.
            </summary>
        </member>
        <member name="P:Wisej.Base.Component.Wisej#Core#IWisejComponent#DesignRect">
            <summary>
            Returns or sets the design rectangle for the component when
            it is used as a child widget in a designable control.
            </summary>
            <exclude/>
        </member>
        <member name="P:Wisej.Base.Component.Wisej#Core#IWisejComponent#IsNew">
            <summary>
            Returns or sets the new status.
            </summary>
        </member>
        <member name="P:Wisej.Base.Component.Wisej#Core#IWisejComponent#IsTopLevel">
            <summary>
            Indicates that the component is rendered at the top level
            on the client: the parent is the root.
            </summary>
        </member>
        <member name="P:Wisej.Base.Component.Wisej#Core#IWisejComponent#Session">
            <summary>
            Holds a reference to the session where this
            component lives.
            </summary>
        </member>
        <member name="P:Wisej.Base.Component.Wisej#Core#IWisejComponent#IsDirty">
            <summary>
            Indicates that the component needs to be updated on the client.
            </summary>
        </member>
        <member name="P:Wisej.Base.Component.Wisej#Core#IWisejComponent#Locked">
            <summary>
            Not relevant for this class.
            </summary>
        </member>
        <member name="P:Wisej.Base.Component.Wisej#Core#IWisejComponent#DesignMode">
            <summary>
            Indicates that the control is being rendered in the designer.
            </summary>
        </member>
        <member name="P:Wisej.Base.Component.Wisej#Core#IWisejComponent#Configuration">
            <summary>
            Stores the last configuration for the component.
            </summary>
        </member>
        <member name="M:Wisej.Base.Component.Wisej#Core#IWisejComponent#Reference(System.Collections.IList)">
            <summary>
            Returns a collection of referenced components or collection of components.
            </summary>
            <param name="list">List of referenced components or collection of components.</param>
        </member>
        <member name="M:Wisej.Base.Component.Wisej#Core#IWisejComponent#UpdateWidget">
            <summary>
            Updates the client widget.
            </summary>
        </member>
        <member name="E:Wisej.Base.Component.Wisej#Core#IWisejComponent#Updated">
            <summary>
            Fired after the component has been updated.
            Needs to be implemented at the implementation of Wisej.Core.Component.
            </summary>
        </member>
        <member name="M:Wisej.Base.Component.Wisej#Core#IWisejComponent#UpdateComponent(System.Object)">
            <summary>
            Updates the server component using the state information.
            </summary>
            <param name="state">Dynamic state object.</param>
        </member>
        <member name="M:Wisej.Base.Component.Wisej#Core#IWisejComponent#Render(System.Object)">
            <summary>
            Renders the component into the config definition.
            </summary>
            <param name="config">Dynamic configuration object.</param>
        </member>
        <member name="M:Wisej.Base.Component.Wisej#Core#IWisejComponent#Event(Wisej.Core.WisejEventArgs)">
            <summary>
            Processes the event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Wisej.Base.Component.OnAddReferences(System.Collections.IList)">
            <summary>
            Returns a collection of referenced components or collection of components.
            </summary>
            <param name="list">List of referenced components or collection of components.</param>
        </member>
        <member name="M:Wisej.Base.Component.OnWebRender(System.Object)">
            <summary>
            Renders the client component.
            </summary>
            <param name="config">Dynamic configuration object.</param>
        </member>
        <member name="M:Wisej.Base.Component.OnWebUpdate(System.Object)">
            <summary>
            Updates the client component using the state information.
            </summary>
            <param name="state">Dynamic state object.</param>
        </member>
        <member name="M:Wisej.Base.Component.OnWebEvent(Wisej.Core.WisejEventArgs)">
            <summary>
            Processes the event from the client.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:Wisej.Base.ControlBase">
            <summary>
            The base class for all Wisej controls.
            </summary>
        </member>
        <member name="M:Wisej.Base.ControlBase.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="E:Wisej.Base.ControlBase.ControlCreated">
            <summary>
            Fired when a control is made visible the first time,  fully created and sent to the client.
            </summary>
        </member>
        <member name="E:Wisej.Base.ControlBase.HandleCreated">
            <summary>
            Fired when the control receives a unique id and is ready to be sent to the client.
            </summary>
        </member>
        <member name="E:Wisej.Base.ControlBase.HandleDestroyed">
            <summary>
            Fired when the control's unique id is reclaimed and the control is fully disposed.
            </summary>
        </member>
        <member name="E:Wisej.Base.ControlBase.GotFocus">
            <summary>
            Fired when the control gains the focus.
            </summary>
        </member>
        <member name="E:Wisej.Base.ControlBase.LostFocus">
            <summary>
            Fired when the control loses focus.
            </summary>
        </member>
        <member name="E:Wisej.Base.ControlBase.Enter">
            <summary>
            Fired when the control gains the input focus.
            </summary>
        </member>
        <member name="E:Wisej.Base.ControlBase.Leave">
            <summary>
            Fired when the control loses the input focus.
            </summary>
        </member>
        <member name="E:Wisej.Base.ControlBase.VisibleChanged">
            <summary>
            Fired when the <see cref="P:Wisej.Base.ControlBase.Visible" /> property value changes.
            </summary>
        </member>
        <member name="E:Wisej.Base.ControlBase.Click">
            <summary>
            Fired when the control is clicked.
            </summary>
        </member>
        <member name="E:Wisej.Base.ControlBase.DoubleClick">
            <summary>
            Fired when the control is double-clicked.
            </summary>
        </member>
        <member name="E:Wisej.Base.ControlBase.TabStopChanged">
            <summary>
            Fired when the value of the <see cref="P:Wisej.Base.ControlBase.TabStop" /> property changes.
            </summary>
        </member>
        <member name="E:Wisej.Base.ControlBase.ParentChanged">
            <summary>
            Fired when the <see cref="P:Wisej.Base.ControlBase.Parent" /> property value changes.
            </summary>
        </member>
        <member name="E:Wisej.Base.ControlBase.SizeChanged">
            <summary>
            Fired when the <see cref="P:Wisej.Base.ControlBase.Size" /> property value changes.
            </summary>
        </member>
        <member name="E:Wisej.Base.ControlBase.ClientSizeChanged">
            <summary>
            Fired when the <see cref="P:Wisej.Base.ControlBase.ClientSize" /> property value changes.
            </summary>
        </member>
        <member name="E:Wisej.Base.ControlBase.Resize">
            <summary>
            Fired when the control is resized.
            </summary>
        </member>
        <member name="E:Wisej.Base.ControlBase.StyleChanged">
            <summary>
            Fired when the control style changed.
            </summary>
        </member>
        <member name="E:Wisej.Base.ControlBase.LocationChanged">
            <summary>
            Fired when the <see cref="P:Wisej.Base.ControlBase.Location" /> property value has changed.
            </summary>
        </member>
        <member name="E:Wisej.Base.ControlBase.BackColorChanged">
            <summary>
            Fired when the value of the <see cref="P:Wisej.Base.ControlBase.BackColor" /> property changes.
            </summary>
        </member>
        <member name="E:Wisej.Base.ControlBase.BackgroundImageChanged">
            <summary>
            Fired when the value of the <see cref="P:Wisej.Base.ControlBase.BackgroundImage" /> property changes.
            </summary>
        </member>
        <member name="E:Wisej.Base.ControlBase.BackgroundImageLayoutChanged">
            <summary>
            Fired when the <see cref="P:Wisej.Base.ControlBase.BackgroundImageLayout" /> property changes.
            </summary>
        </member>
        <member name="E:Wisej.Base.ControlBase.FontChanged">
            <summary>
            Fired when the <see cref="P:Wisej.Base.ControlBase.Font" /> property value changes.
            </summary>
        </member>
        <member name="E:Wisej.Base.ControlBase.TextChanged">
            <summary>
            Fired when the <see cref="P:Wisej.Base.ControlBase.Text" /> property value changes.
            </summary>
        </member>
        <member name="E:Wisej.Base.ControlBase.ForeColorChanged">
            <summary>
            Fired when the <see cref="P:Wisej.Base.ControlBase.ForeColor" /> property value changes.
            </summary>
        </member>
        <member name="E:Wisej.Base.ControlBase.DockChanged">
            <summary>
            Fired when the value of the <see cref="P:Wisej.Base.ControlBase.Dock" /> property changes.
            </summary>
        </member>
        <member name="E:Wisej.Base.ControlBase.Disposed">
            <summary>
            Fired when the component is disposed.
            </summary>
        </member>
        <member name="E:Wisej.Base.ControlBase.EnabledChanged">
            <summary>
            Fired when the <see cref="P:Wisej.Base.ControlBase.Enabled" /> property value has changed.
            </summary>
        </member>
        <member name="E:Wisej.Base.ControlBase.RightToLeftChanged">
            <summary>
            Fired when the <see cref="P:Wisej.Base.ControlBase.RightToLeft" /> property value changes.
            </summary>
        </member>
        <member name="E:Wisej.Base.ControlBase.TabIndexChanged">
            <summary>
            Fired when the <see cref="P:Wisej.Base.ControlBase.TabIndex" /> property value has changed.
            </summary>
        </member>
        <member name="E:Wisej.Base.ControlBase.BindingContextChanged">
            <summary>
            Occurs when the value of the <see cref="P:Wisej.Base.ControlBase.BindingContext" /> property changes.
            </summary>
        </member>
        <member name="E:Wisej.Base.ControlBase.PaddingChanged">
            <summary>
            Fired when the control's padding changes.
            </summary>
        </member>
        <member name="E:Wisej.Base.ControlBase.MarginChanged">
            <summary>
            Fired when the control's margin changes.
            </summary>
        </member>
        <member name="E:Wisej.Base.ControlBase.ImeModeChanged">
            <summary>
            Fired when the ImeMode property has changed.
            </summary>
        </member>
        <member name="E:Wisej.Base.ControlBase.ContextMenuChanged">
            <summary>
            Fired when the value of the <see cref="P:Wisej.Base.ControlBase.ContextMenu" /> property changes.
            </summary>
        </member>
        <member name="E:Wisej.Base.ControlBase.Validated">
            <summary>
            Fired when the control is finished validating.
            </summary>
        </member>
        <member name="E:Wisej.Base.ControlBase.Validating">
            <summary>
            Fired when the control is validating.
            </summary>
        </member>
        <member name="E:Wisej.Base.ControlBase.CausesValidationChanged">
            <summary>
            Fired when the value of the <see cref="P:Wisej.Base.ControlBase.CausesValidation" /> property changes.
            </summary>
        </member>
        <member name="E:Wisej.Base.ControlBase.Invalidated">
            <summary>
            This event is not relevant for this class.
            </summary>
            <exclude/>
        </member>
        <member name="E:Wisej.Base.ControlBase.Scroll">
            <summary>
            This event is not relevant for this class.
            </summary>
            <exclude/>
        </member>
        <member name="E:Wisej.Base.ControlBase.ContextMenuStripChanged">
            <summary>
            This event is not relevant for this class.
            </summary>
            <exclude/>
        </member>
        <member name="E:Wisej.Base.ControlBase.GiveFeedback">
            <summary>
            This event is not relevant for this class.
            </summary>
            <exclude/>
        </member>
        <member name="E:Wisej.Base.ControlBase.DpiChangedAfterParent">
            <summary>
            This event is not relevant for this class.
            </summary>
            <exclude/>
        </member>
        <member name="E:Wisej.Base.ControlBase.DpiChangedBeforeParent">
            <summary>
            This event is not relevant for this class.
            </summary>
            <exclude/>
        </member>
        <member name="E:Wisej.Base.ControlBase.ChangeUICues">
            <summary>
            This event is not relevant for this class.
            </summary>
            <exclude/>
        </member>
        <member name="E:Wisej.Base.ControlBase.DragDrop">
            <summary>
            This event is not relevant for this class.
            </summary>
            <exclude/>
        </member>
        <member name="E:Wisej.Base.ControlBase.DragEnter">
            <summary>
            This event is not relevant for this class.
            </summary>
            <exclude/>
        </member>
        <member name="E:Wisej.Base.ControlBase.DragLeave">
            <summary>
            This event is not relevant for this class.
            </summary>
            <exclude/>
        </member>
        <member name="E:Wisej.Base.ControlBase.DragStart">
            <summary>
            This event is not relevant for this class.
            </summary>
            <exclude/>
        </member>
        <member name="E:Wisej.Base.ControlBase.DragEnd">
            <summary>
            This event is not relevant for this class.
            </summary>
            <exclude/>
        </member>
        <member name="E:Wisej.Base.ControlBase.DragOver">
            <summary>
            This event is not relevant for this class.
            </summary>
            <exclude/>
        </member>
        <member name="E:Wisej.Base.ControlBase.QueryAccessibilityHelp">
            <summary>
            This event is not relevant for this class.
            </summary>
            <exclude/>
        </member>
        <member name="E:Wisej.Base.ControlBase.SystemColorsChanged">
            <summary>
            This event is not relevant for this class.
            </summary>
            <exclude/>
        </member>
        <member name="E:Wisej.Base.ControlBase.HelpRequested">
            <summary>
            This event is not relevant for this class.
            </summary>
            <exclude/>
        </member>
        <member name="E:Wisej.Base.ControlBase.MouseHover">
            <summary>
            This event is not relevant for this class.
            </summary>
            <exclude/>
        </member>
        <member name="E:Wisej.Base.ControlBase.KeyUp">
            <summary>
            This event is not relevant for this class.
            </summary>
            <exclude/>
        </member>
        <member name="E:Wisej.Base.ControlBase.KeyDown">
            <summary>
            This event is not relevant for this class.
            </summary>
            <exclude/>
        </member>
        <member name="E:Wisej.Base.ControlBase.KeyPress">
            <summary>
            This event is not relevant for this class.
            </summary>
            <exclude/>
        </member>
        <member name="E:Wisej.Base.ControlBase.MouseLeave">
            <summary>
            This event is not relevant for this class.
            </summary>
            <exclude/>
        </member>
        <member name="E:Wisej.Base.ControlBase.MouseCaptureChanged">
            <summary>
            This event is not relevant for this class.
            </summary>
            <exclude/>
        </member>
        <member name="E:Wisej.Base.ControlBase.MouseClick">
            <summary>
            This event is not relevant for this class.
            </summary>
            <exclude/>
        </member>
        <member name="E:Wisej.Base.ControlBase.MouseDoubleClick">
            <summary>
            This event is not relevant for this class.
            </summary>
            <exclude/>
        </member>
        <member name="E:Wisej.Base.ControlBase.MouseMove">
            <summary>
            This event is not relevant for this class.
            </summary>
            <exclude/>
        </member>
        <member name="E:Wisej.Base.ControlBase.MouseDown">
            <summary>
            This event is not relevant for this class.
            </summary>
            <exclude/>
        </member>
        <member name="E:Wisej.Base.ControlBase.MouseUp">
            <summary>
            This event is not relevant for this class.
            </summary>
            <exclude/>
        </member>
        <member name="E:Wisej.Base.ControlBase.MouseWheel">
            <summary>
            This event is not relevant for this class.
            </summary>
            <exclude/>
        </member>
        <member name="E:Wisej.Base.ControlBase.RegionChanged">
            <summary>
            This event is not supported.
            </summary>
            <exclude/>
        </member>
        <member name="E:Wisej.Base.ControlBase.PreviewKeyDown">
            <summary>
            This event is not supported.
            </summary>
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnControlCreated(System.EventArgs)">
            <summary>
            Fires the <see cref="E:Wisej.Base.ControlBase.ControlCreated" /> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnHandleDestroyed(System.EventArgs)">
            <summary>
            Fires the <see cref="E:Wisej.Base.ControlBase.HandleDestroyed" /> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnHandleCreated(System.EventArgs)">
            <summary>
            Fires the <see cref="E:Wisej.Base.ControlBase.HandleCreated" /> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnGotFocus(System.EventArgs)">
            <summary>
            Fires the <see cref="E:Wisej.Base.ControlBase.GotFocus" /> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnLostFocus(System.EventArgs)">
            <summary>
            Fires the <see cref="E:Wisej.Base.ControlBase.LostFocus" /> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnEnter(System.EventArgs)">
            <summary>
            Fires the <see cref="E:Wisej.Base.ControlBase.Enter" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnLeave(System.EventArgs)">
            <summary>
            Fires the <see cref="E:Wisej.Base.ControlBase.Leave" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnTabStopChanged(System.EventArgs)">
            <summary>
            Fires the <see cref="E:Wisej.Base.ControlBase.TabStopChanged" /> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnPaddingChanged(System.EventArgs)">
            <summary>
            Fires the <see cref="E:Wisej.Base.ControlBase.PaddingChanged" /> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs" /> that contains the event data. </param>		
        </member>
        <member name="M:Wisej.Base.ControlBase.OnMarginChanged(System.EventArgs)">
            <summary>
            Fires the <see cref="E:Wisej.Base.ControlBase.MarginChanged" /> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs" /> that contains the event data. </param>		
        </member>
        <member name="M:Wisej.Base.ControlBase.OnContextMenuChanged(System.EventArgs)">
            <summary>
            Fires the <see cref="E:Wisej.Base.ControlBase.ContextMenuChanged" /> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs" /> that contains the event data. </param>		
        </member>
        <member name="M:Wisej.Base.ControlBase.OnImeModeChanged(System.EventArgs)">
            <summary>
            Fires the <see cref="E:Wisej.Base.ControlBase.ImeModeChanged" /> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs" /> that contains the event data. </param>		
        </member>
        <member name="M:Wisej.Base.ControlBase.OnParentChanged(System.EventArgs)">
            <summary>
             Fires the <see cref="E:Wisej.Base.ControlBase.ParentChanged" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnBackgroundImageChanged(System.EventArgs)">
            <summary>
             Fires the <see cref="E:Wisej.Base.ControlBase.BackgroundImageChanged" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnBackgroundImageLayoutChanged(System.EventArgs)">
            <summary>
             Fires the <see cref="E:Wisej.Base.ControlBase.BackgroundImageLayoutChanged" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnSizeChanged(System.EventArgs)">
            <summary>
            Fires the <see cref="E:Wisej.Base.ControlBase.SizeChanged" /> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnClientSizeChanged(System.EventArgs)">
            <summary>
            Fires the <see cref="E:Wisej.Base.ControlBase.ClientSizeChanged" /> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnResize(System.EventArgs)">
            <summary>
            Fires the <see cref="E:Wisej.Base.ControlBase.Resize"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnStyleChanged(System.EventArgs)">
            <summary>
            Fires the <see cref="E:Wisej.Base.ControlBase.StyleChanged" /> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnLocationChanged(System.EventArgs)">
            <summary>
            Fires the <see cref="E:Wisej.Base.ControlBase.LocationChanged" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <summary>
            Fires the <see cref="E:Wisej.Base.ControlBase.Layout" /> event.
            </summary>
            <param name="e"></param>
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnBackColorChanged(System.EventArgs)">
            <summary>
            Fires the <see cref="E:Wisej.Base.ControlBase.BackColorChanged" /> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnFontChanged(System.EventArgs)">
            <summary>
            Fires the <see cref="E:Wisej.Base.ControlBase.FontChanged" /> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnTextChanged(System.EventArgs)">
            <summary>
            Fires the <see cref="E:Wisej.Base.ControlBase.TextChanged" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnForeColorChanged(System.EventArgs)">
            <summary>
            Fires the <see cref="E:Wisej.Base.ControlBase.ForeColorChanged" /> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnDockChanged(System.EventArgs)">
            <summary>
            Fires the <see cref="E:Wisej.Base.ControlBase.DockChanged" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnEnabledChanged(System.EventArgs)">
            <summary>
            Fires the <see cref="E:Wisej.Base.ControlBase.EnabledChanged" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnRightToLeftChanged(System.EventArgs)">
            <summary>
            Fires the <see cref="E:Wisej.Base.ControlBase.RightToLeftChanged" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnTabIndexChanged(System.EventArgs)">
            <summary>
            Fires the <see cref="E:Wisej.Base.ControlBase.TabIndexChanged" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnVisibleChanged(System.EventArgs)">
            <summary>
            Fires the <see cref="E:Wisej.Base.ControlBase.VisibleChanged" /> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnParentVisibleChanged(System.EventArgs)">
            <summary>
            Fires the <see cref="E:Wisej.Base.ControlBase.VisibleChanged" /> event when the 
            <see cref="P:Wisej.Base.Control.Visible" /> property value of the control's container changes.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnParentBackColorChanged(System.EventArgs)">
            <summary>
            Fires the <see cref="E:Wisej.Base.ControlBase.BackColorChanged" /> event when the 
            <see cref="P:Wisej.Base.ControlBase.BackColor" /> property value of the control's container changes.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnParentBackgroundImageChanged(System.EventArgs)">
            <summary>
            Fires the <see cref="E:Wisej.Base.ControlBase.BackgroundImageChanged" /> event when the 
            <see cref="P:Wisej.Base.ControlBase.BackgroundImage" /> property value of the control's container changes.</summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnParentCursorChanged(System.EventArgs)">
            <summary>
            Fires the <see cref="E:Wisej.Base.ControlBase.CursorChanged" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnParentEnabledChanged(System.EventArgs)">
            <summary>
            Fires the <see cref="E:Wisej.Base.ControlBase.EnabledChanged" /> event when the 
            <see cref="P:Wisej.Base.ControlBase.Enabled" /> property value of the control's container changes.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnParentFontChanged(System.EventArgs)">
            <summary>
            Fires the <see cref="E:Wisej.Base.ControlBase.FontChanged" /> event when the 
            <see cref="P:Wisej.Base.ControlBase.Font" /> property value of the control's container changes.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnParentForeColorChanged(System.EventArgs)">
            <summary>
            Fires the <see cref="E:Wisej.Base.ControlBase.ForeColorChanged" /> event when the 
            <see cref="P:Wisej.Base.ControlBase.ForeColor" /> property value of the control's container changes.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnParentRightToLeftChanged(System.EventArgs)">
            <summary>
            Fires the 
            <see cref="E:Wisej.Web.RightToLeftChanged" /> event when the 
            <see cref="P:Wisej.Web.ControlBase.RightToLeft" /> property value of the control's container changes.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnAutoSizeChanged(System.EventArgs)">
            <summary>
             Raises the <see cref="E:Wisej.Base.ControlBase.AutoSizeChanged" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnClick(System.EventArgs)">
            <summary>
            Fires the <see cref="E:Wisej.Base.ControlBase.Click" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnDoubleClick(System.EventArgs)">
            <summary>
            Fires the <see cref="E:Wisej.Base.ControlBase.DoubleClick" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnBindingContextChanged(System.EventArgs)">
            <summary>
            Fires the <see cref="E:Wisej.Base.ControlBase.BindingContextChanged" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnParentBindingContextChanged(System.EventArgs)">
            <summary>
            Fires the <see cref="E:Wisej.Base.ControlBase.BindingContextChanged" /> event when 
            the <see cref="P:Wisej.Base.ControlBase.BindingContext" /> property value of the control's container changes.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnValidated(System.EventArgs)">
            <summary>
            Fires the <see cref="E:Wisej.Base.ControlBase.Validated" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnValidating(System.ComponentModel.CancelEventArgs)">
            <summary>
            Fires the <see cref="E:Wisej.Base.ControlBase.Validating" /> event.
            </summary>
            <param name="e">A <see cref="T:System.ComponentModel.CancelEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnCausesValidationChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Wisej.Base.ControlBase.CausesValidationChanged" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnMouseClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Excluded.
            </summary>
            <param name="e"></param>
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Excluded.
            </summary>
            <param name="e"></param>
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Excluded.
            </summary>
            <param name="e"></param>
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Excluded.
            </summary>
            <param name="e"></param>
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Excluded.
            </summary>
            <param name="e"></param>
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Excluded.
            </summary>
            <param name="e"></param>
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Excluded.
            </summary>
            <param name="e"></param>
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Excluded.
            </summary>
            <param name="e"></param>
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Excluded.
            </summary>
            <param name="e"></param>
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnPreviewKeyDown(System.Windows.Forms.PreviewKeyDownEventArgs)">
            <summary>
            Excluded.
            </summary>
            <param name="e"></param>
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnScroll(System.Windows.Forms.ScrollEventArgs)">
            <summary>
            Excluded.
            </summary>
            <param name="e"></param>
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)">
            <summary>
            Excluded.
            </summary>
            <param name="e"></param>
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnContextMenuStripChanged(System.EventArgs)">
            <summary>
            Excluded.
            </summary>
            <param name="e"></param>
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)">
            <summary>
            Excluded.
            </summary>
            <param name="e"></param>
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnSystemColorsChanged(System.EventArgs)">
            <summary>
            Excluded.
            </summary>
            <param name="e"></param>
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnHelpRequested(System.Windows.Forms.HelpEventArgs)">
            <summary>
            Excluded.
            </summary>
            <param name="e"></param>
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnChangeUICues(System.Windows.Forms.UICuesEventArgs)">
            <summary>
            Excluded.
            </summary>
            <param name="e"></param>
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)">
            <summary>
            Fires the <see cref="E:Wisej.Base.ControlBase.Invalidated" /> event.
            </summary>
            <param name="e">An <see cref="T:Wisej.Base.InvalidateEventArgs" /> that contains the event data. </param>
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnControlAdded(System.Windows.Forms.ControlEventArgs)">
            <summary>
            Fires the <see cref="E:Wisej.Base.ControlBase.ControlAdded" /> event.
            </summary>
            <param name="e"></param>
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnControlRemoved(System.Windows.Forms.ControlEventArgs)">
            <summary>
            Fires the <see cref="E:Wisej.Base.ControlBase.ControlRemoved" /> event.
            </summary>
            <param name="e"></param>
            <exclude/>
        </member>
        <member name="P:Wisej.Base.ControlBase.LicenseAssembly">
            <summary>
            Returns the base implementation assembly.
            </summary>
        </member>
        <member name="P:Wisej.Base.ControlBase.Created">
            <summary>
            Returns a value indicating whether the control has been created.
            </summary>
            <returns>true if the control has been created; otherwise, false.</returns>
        </member>
        <member name="P:Wisej.Base.ControlBase.Visible">
            <summary>
            Returns or sets whether the control and all its child controls are displayed.
            </summary>
            <returns>true if the control and all its child controls are displayed; otherwise, false. The default is true.</returns>
        </member>
        <member name="P:Wisej.Base.ControlBase.IsVisible">
            <summary>
            Returns the raw value of the <see cref="P:Wisej.Base.ControlBase.Visible"/> property.
            </summary>
        </member>
        <member name="P:Wisej.Base.ControlBase.VisibleInternal">
            <summary>
            Returns the actual visible flag for this control.
            </summary>
        </member>
        <member name="P:Wisej.Base.ControlBase.Enabled">
            <summary>
            Returns or sets whether the control can respond to user interaction.
            </summary>
        </member>
        <member name="P:Wisej.Base.ControlBase.IsEnabled">
            <summary>
            Returns the raw value of the <see cref="P:Wisej.Base.ControlBase.Enabled"/> property.
            </summary>
        </member>
        <member name="P:Wisej.Base.ControlBase.EnabledInternal">
            <summary>
            Returns the actual enabled flag for this control.
            </summary>
        </member>
        <member name="P:Wisej.Base.ControlBase.Top">
            <summary>
            Returns or sets the distance, in pixels, between the top edge of the control and the top edge of its container's client area.
            </summary>
            <returns>The distance, in pixels, between the bottom edge of the control and the top edge of its container's client area.</returns>
        </member>
        <member name="P:Wisej.Base.ControlBase.Left">
            <summary>
            Returns or sets the distance, in pixels, between the left edge of the control and the left edge of its container's client area.
            </summary>
            <returns>The distance, in pixels, between the left edge of the control and the left edge of its container's client area.</returns>
        </member>
        <member name="P:Wisej.Base.ControlBase.Bottom">
            <summary>
            Returns the distance, in pixels, between the bottom edge of the control and the top edge of its container's client area.
            </summary>
            <returns>The distance, in pixels, between the bottom edge of the control and the top edge of its container's client area.
            </returns>
        </member>
        <member name="P:Wisej.Base.ControlBase.Right">
            <summary>
            Return the distance, in pixels, between the right edge of the control and the left edge of its container's client area.
            </summary>
            <returns>The distance, in pixels, between the right edge of the control and the left edge of its container's client area.</returns>
        </member>
        <member name="P:Wisej.Base.ControlBase.Location">
            <summary>
            Returns or sets the coordinates of the upper-left corner of the control relative to the upper-left corner of its container.
            </summary>
            <returns>The <see cref="T:System.Drawing.Point" /> that represents the upper-left corner of the control relative to the upper-left corner of its container.</returns>
        </member>
        <member name="P:Wisej.Base.ControlBase.Size">
            <summary>
            Returns or sets the height and width of the control.
            </summary>
            <returns>The <see cref="T:System.Drawing.Size" /> that represents the height and width of the control in pixels.</returns>
        </member>
        <member name="P:Wisej.Base.ControlBase.MaximumSize">
            <summary>
            Returns or sets the maximum size for the control.
            </summary>
            <returns>A <see cref="T:System.Drawing.Size" /> representing the maximum width and height.</returns>
        </member>
        <member name="P:Wisej.Base.ControlBase.DefaultMaximumSize">
            <summary>
            Returns the length and height, in pixels, that is specified as the default maximum size of a control.
            </summary>
            <returns>A <see cref="T:System.Drawing.Size" /> representing the size of the control.</returns>
        </member>
        <member name="P:Wisej.Base.ControlBase.MinimumSize">
            <summary>
            Returns or sets the minimum size for the control.
            </summary>
            <returns>A <see cref="T:System.Drawing.Size" /> representing the minimum width and height.</returns>
        </member>
        <member name="P:Wisej.Base.ControlBase.DefaultMinimumSize">
            <summary>
            Returns the length and height, in pixels, that is specified as the default minimum size of a control.
            </summary>
            <returns>A <see cref="T:System.Drawing.Size" /> representing the size of the control.</returns>
        </member>
        <member name="P:Wisej.Base.ControlBase.ClientSize">
            <summary>
            Returns or sets the height and width of the client area.
            </summary>
            <returns>The client <see cref="T:System.Drawing.Size" /> that represents the inner dimensions of the control.</returns>
        </member>
        <member name="P:Wisej.Base.ControlBase.ClientRectangle">
            <summary>
            Returns the client rectangle of the control.
            </summary>
            <returns>The <see cref="T:System.Drawing.Rectangle" /> that represents the area of the control.</returns>
        </member>
        <member name="P:Wisej.Base.ControlBase.Width">
            <summary>
            Returns or sets the width of the control.
            </summary>
            <returns>The width of the control in pixels.</returns>
        </member>
        <member name="P:Wisej.Base.ControlBase.DisplayRectangle">
            <summary>
            Returns the rectangle that represents the virtual display area of the control.
            </summary>
            <returns>A <see cref="T:System.Drawing.Rectangle"/> that represents the display area of the control."/></returns>
        </member>
        <member name="P:Wisej.Base.ControlBase.Bounds">
            <summary>
            Returns or sets the size and location of the control including its non-client area, in pixels and relative to the parent control.
            </summary>
            <returns>A <see cref="T:System.Drawing.Rectangle" /> in pixels relative to the parent control indicating the size and location of the control.</returns>
        </member>
        <member name="P:Wisej.Base.ControlBase.DoubleBuffered">
            <summary>
            Not applicable.
            </summary>
            <exclude/>
        </member>
        <member name="P:Wisej.Base.ControlBase.AutoScroll">
            <summary>
            This property is not relevant to this class.
            </summary>
            <exclude/>
        </member>
        <member name="P:Wisej.Base.ControlBase.AutoScrollMargin">
            <summary>
            This property is not relevant to this class.
            </summary>
            <exclude/>
        </member>
        <member name="P:Wisej.Base.ControlBase.AutoScrollMinSize">
            <summary>
            This property is not relevant to this class.
            </summary>
            <exclude/>
        </member>
        <member name="P:Wisej.Base.ControlBase.AutoScrollPosition">
            <summary>
            This property is not relevant to this class.
            </summary>
            <exclude/>
        </member>
        <member name="P:Wisej.Base.ControlBase.AutoScrollOffset">
            <summary>
            This property is not relevant to this class.
            </summary>
            <exclude/>
        </member>
        <member name="P:Wisej.Base.ControlBase.HorizontalScroll">
            <summary>
            This property is not relevant to this class.
            </summary>
            <exclude/>
        </member>
        <member name="P:Wisej.Base.ControlBase.VerticalScroll">
            <summary>
            This property is not relevant to this class.
            </summary>
            <exclude/>
        </member>
        <member name="P:Wisej.Base.ControlBase.VScroll">
            <summary>
            This property is not relevant to this class.
            </summary>
            <exclude/>
        </member>
        <member name="P:Wisej.Base.ControlBase.HScroll">
            <summary>
            This property is not relevant to this class.
            </summary>
            <exclude/>
        </member>
        <member name="P:Wisej.Base.ControlBase.InvokeRequired">
            <summary>
            This property is not relevant to this class.
            </summary>
            <exclude/>
        </member>
        <member name="P:Wisej.Base.ControlBase.ShowFocusCues">
            <summary>
            This property is not relevant to this class.
            </summary>
            <exclude/>
        </member>
        <member name="P:Wisej.Base.ControlBase.ShowKeyboardCues">
            <summary>
            This property is not relevant to this class.
            </summary>
            <exclude/>
        </member>
        <member name="P:Wisej.Base.ControlBase.Height">
            <summary>
            Returns or sets the height of the control.
            </summary>
            <returns>The height of the control in pixels.</returns>
        </member>
        <member name="P:Wisej.Base.ControlBase.TabStop">
            <summary>
            Returns or sets whether the user can give the focus to this control using the TAB key and
            the <see cref="P:Wisej.Base.ControlBase.Focusable"/> property is set to true.
            </summary>
            <returns>True if the control can receive the focus using the TAB key.</returns>
        </member>
        <member name="P:Wisej.Base.ControlBase.TabIndex">
            <summary>
            Returns or sets the tab order of the control within its container.
            </summary>
            <returns>The index value of the control within the set of controls within its container.</returns>
        </member>
        <member name="P:Wisej.Base.ControlBase.Text">
            <summary>
            Returns or sets the text associated with this control.
            </summary>
            <remarks>
            When AllowHtml is set to true, the text can contain HTML content. If the text contains new lines (CRLF) but 
            doesn't contain HTML elements (at least one "&lt;") all CRLF are automatically substituted with "&lt;BR/&gt;".
            </remarks>
            <returns>The text associated with this control.</returns>
        </member>
        <member name="P:Wisej.Base.ControlBase.TextInternal">
            <summary>
            Returns or sets the text property without firing TextChanged.
            </summary>
        </member>
        <member name="P:Wisej.Base.ControlBase.Name">
            <summary>
            Gets or sets the name of the control.
            </summary>
            <returns>The name of the control. The default is an empty string.</returns>
        </member>
        <member name="P:Wisej.Base.ControlBase.Parent">
            <summary>
            Returns or sets the parent of this component.
            </summary>
        </member>
        <member name="P:Wisej.Base.ControlBase.Tag">
            <summary>
            Returns or sets the object that contains data about the control.
            </summary>
            <returns>An object that contains user-defined data about the control. The default is null.</returns>
        </member>
        <member name="P:Wisej.Base.ControlBase.AutoSize">
            <summary>
            This property is not relevant for this class.
            </summary>
            <returns>true if enabled; otherwise, false.</returns>
            <exclude/>
        </member>
        <member name="P:Wisej.Base.ControlBase.ScaleChildren">
            <summary>
            Returns a value that determines when the child controls are scaled.
            </summary>
            <returns>true if child controls will be scaled. The default is true.</returns>
        </member>
        <member name="P:Wisej.Base.ControlBase.LayoutEngine">
            <summary>
            Returns the layout engine used by the control.
            Overridden to redirect the property to our implementation.
            </summary>
            <exclude/>
        </member>
        <member name="P:Wisej.Base.ControlBase.DefaultPadding">
            <summary>
            Returns the default padding used by the control.
            </summary>
            <exclude/>
        </member>
        <member name="P:Wisej.Base.ControlBase.PreferredSize">
            <summary>
            Returns the preferred size in which the control can fit.
            </summary>
            <returns>A <see cref="T:System.Drawing.Size" /> containing the height and width, in pixels.</returns>
        </member>
        <member name="P:Wisej.Base.ControlBase.RenderTo">
            <summary>
            The id of the HTML element that will be
            the container for this control.
            
            It is set by the ServiceType.Create request sent by the client
            for each HTML element that has the data-wisej attribute specifying the 
            full or partial class name of the control to create.
            </summary>
            <exclude/>
        </member>
        <member name="P:Wisej.Base.ControlBase.RightToLeft">
            <exclude/>
        </member>
        <member name="P:Wisej.Base.ControlBase.RightToLeftInternal">
            <exclude/>
        </member>
        <member name="P:Wisej.Base.ControlBase.AppearanceKey">
            <summary>
            Sets the appearance key for the theme engine.
            </summary>
        </member>
        <member name="P:Wisej.Base.ControlBase.Font">
            <summary>
             Gets or sets the font of the text displayed by the control.
            </summary>
        </member>
        <member name="P:Wisej.Base.ControlBase.FontHeight">
            <summary>
            Returns or sets the height of the font of the control.
            </summary>
            <returns>The height of the <see cref="T:System.Drawing.Font" /> of the control in pixels.</returns>
        </member>
        <member name="M:Wisej.Base.ControlBase.ResetFontHeight">
            <summary>
            Resets the cached font height.
            </summary>
        </member>
        <member name="M:Wisej.Base.ControlBase.GetThemeFont">
            <summary>
            Returns the themed font for this control.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Wisej.Base.ControlBase.BackColor">
            <summary>
            Returns or sets the background color for the control.
            </summary>
        </member>
        <member name="M:Wisej.Base.ControlBase.GetThemeBackColor">
            <summary>
            Returns the themed back color for this control.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Wisej.Base.ControlBase.ForeColor">
            <summary>
            Returns or sets the text color of the control.
            </summary>
        </member>
        <member name="M:Wisej.Base.ControlBase.GetThemeForeColor">
            <summary>
            Returns the themed text color for this control.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Wisej.Base.ControlBase.DefaultFont">
            <summary>
            Returns the default font of the control.
            </summary>
            <returns>The default <see cref="T:System.Drawing.Font" /> of the control. The value returned will vary depending on the user's operating system the local culture setting of their system.</returns>
        </member>
        <member name="P:Wisej.Base.ControlBase.DefaultBackColor">
            <summary>
            Returns the default background color of the control.
            </summary>
            <returns>The default background <see cref="T:System.Drawing.Color" /> of the control. The default is <see cref="P:System.Drawing.SystemColors.Control" />.</returns>
        </member>
        <member name="P:Wisej.Base.ControlBase.DefaultForeColor">
            <summary>
            Returns the default background color of the control.
            </summary>
            <returns>The default background <see cref="T:System.Drawing.Color" /> of the control. The default is <see cref="P:System.Drawing.SystemColors.Control" />.</returns>
        </member>
        <member name="P:Wisej.Base.ControlBase.DefaultSize">
            <summary>
            Returns the default size of the control.
            </summary>
            <returns>The default <see cref="T:System.Drawing.Size" /> of the control.</returns>
        </member>
        <member name="P:Wisej.Base.ControlBase.Focused">
            <summary>
            Returns a value indicating whether the control has input focus.
            </summary>
            <returns>true if the control has focus; otherwise, false.</returns>
        </member>
        <member name="P:Wisej.Base.ControlBase.CanFocus">
            <summary>
            Returns whether the control can receive focus.
            </summary>
            <returns>true if the control can receive focus; otherwise, false.</returns>
        </member>
        <member name="P:Wisej.Base.ControlBase.CanSelect">
            <summary>
            Returns whether the control can be selected.
            </summary>
            <returns>true if the control can be selected; otherwise, false.</returns>
        </member>
        <member name="P:Wisej.Base.ControlBase.CanUpdate">
            <summary>
            Returns whether the control allows updates from the client.
            </summary>
        </member>
        <member name="P:Wisej.Base.ControlBase.CausesValidation">
            <summary>
            Returns or sets whether the control causes validation to be performed on controls that require to be validated when this control receives focus.
            </summary>
            <returns>true if the control causes validation to be performed on controls losing the focus; otherwise, false. The default is true.</returns>
        </member>
        <member name="P:Wisej.Base.ControlBase.Focusable">
            <summary>
            Returns or sets whether the control can gain the focus.
            </summary>
            <returns>true if the control is focusable; otherwise, false.</returns>
        </member>
        <member name="P:Wisej.Base.ControlBase.ContainsFocus">
            <summary>
            Indicates whether the control, or one of its child controls, has the input focus.
            </summary>
            <returns>true if the control or one of its child controls currently has the input focus; otherwise, false.</returns>
        </member>
        <member name="P:Wisej.Base.ControlBase.Disposing">
            <summary>
            Returns whether the control is in the process of disposing itself and child controls.
            </summary>
            <returns>true if the control is in the process of disposing; otherwise, false.</returns>
        </member>
        <member name="P:Wisej.Base.ControlBase.IsDisposed">
            <summary>
            Returns whether the control has been disposed of.
            </summary>
            <returns>true if the control has been disposed of; otherwise, false.</returns>
        </member>
        <member name="P:Wisej.Base.ControlBase.IsMirrored">
            <summary>
            Returns whether the control is mirrored.
            </summary>
            <returns>true if the control is mirrored; otherwise, false.</returns>
        </member>
        <member name="P:Wisej.Base.ControlBase.HasChildren">
            <summary>
            Returns whether the control contains any child control.
            </summary>
            <returns>true if the control contains any child control; otherwise, false.</returns>
        </member>
        <member name="P:Wisej.Base.ControlBase.Handle">
            <summary>
            Returns the unique server-side id (handle) for this component.
            </summary>
        </member>
        <member name="P:Wisej.Base.ControlBase.IsHandleCreated">
            <summary>
            Returns if the control has a server-side component id (handle) associated with it.
            </summary>
        </member>
        <member name="P:Wisej.Base.ControlBase.Site">
            <summary>
            Returns or sets the site of the control.
            </summary>
        </member>
        <member name="P:Wisej.Base.ControlBase.Canvas">
            <summary>
            Returns a bitmap for the entire surface of the control.
            </summary>
            <remarks>The receiver is responsible for disposing the bitmap.</remarks>
        </member>
        <member name="P:Wisej.Base.ControlBase.AllowDrop">
            <summary>
            Returns or sets whether the control can accept data that the user drags onto it.
            </summary>
            <returns>true if drag-and-drop operations are allowed in the control; otherwise, false. The default is false.</returns>
        </member>
        <member name="P:Wisej.Base.ControlBase.AllowDrag">
            <summary>
            Returns or sets whether the control can initiate a drag-drop operation.
            </summary>
            <returns>true if the control can initiate a drag-and-drop operation; otherwise, false. The default is false.</returns>
        </member>
        <member name="P:Wisej.Base.ControlBase.TopLevelControl">
            <summary>
            Returns the parent control that is not parented by a top level component.
            </summary>
        </member>
        <member name="P:Wisej.Base.ControlBase.InClientEvent">
            <summary>
            Returns true if the component is processing a client event.
            </summary>
        </member>
        <member name="P:Wisej.Base.ControlBase.UserData">
            <summary>
            Returns a dynamic object that can be used to store custom data in relation to this control.
            </summary>
        </member>
        <member name="M:Wisej.Base.ControlBase.AssignParent(Wisej.Base.ControlBase)">
            <summary>
            Assigns the parent control and checks if the
            inherited properties have changed as a result.
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:Wisej.Base.ControlBase.AddHandler(System.Object,System.Delegate)">
            <summary>
            Adds a delegate to the handler list for the specified event key.
            </summary>
            <param name="key">The key identifier for the event.</param>
            <param name="handler">The handler to add to the list.</param>
        </member>
        <member name="M:Wisej.Base.ControlBase.RemoveHandler(System.Object,System.Delegate)">
            <summary>
            Removes a delegate from the handler list for the specified event key.
            </summary>
            <param name="key">The key identifier for the event.</param>
            <param name="handler">The handler to add to the list.</param>
        </member>
        <member name="M:Wisej.Base.ControlBase.Dispose(System.Boolean)">
            <summary>
            Disposes the control.
            </summary>
            <param name="disposing">true when this method is called by the application rather than a finalizer.</param>
        </member>
        <member name="M:Wisej.Base.ControlBase.IsKeyLocked(System.Windows.Forms.Keys)">
            <summary>
            Determines whether the CAPS LOCK, NUM LOCK, or SCROLL LOCK key is in effect.
            </summary>
            <returns>true if the specified key or keys are in effect; otherwise, false.</returns>
            <param name="key">The CAPS LOCK, NUM LOCK, or SCROLL LOCK member of the <see cref="T:Wisej.Base.Keys" /> enumeration. </param>
            <exception cref="T:System.NotSupportedException">The <paramref name="key" /> parameter refers to a key other than the CAPS LOCK, NUM LOCK, or SCROLL LOCK key. </exception>
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.IsKeyLocked(Wisej.Base.Keys)">
            <summary>
            Determines whether the CAPS LOCK, NUM LOCK, or SCROLL LOCK key is in effect.
            </summary>
            <returns>true if the specified key or keys are in effect; otherwise, false.</returns>
            <param name="key">The CAPS LOCK, NUM LOCK, or SCROLL LOCK member of the <see cref="T:Wisej.Base.Keys" /> enumeration. </param>
            <exception cref="T:System.NotSupportedException">The <paramref name="key" /> parameter refers to a key other than the CAPS LOCK, NUM LOCK, or SCROLL LOCK key. </exception>
        </member>
        <member name="M:Wisej.Base.ControlBase.FromHandle(System.IntPtr)">
            <summary>
            Returns the control that is currently associated with the specified server-side id (handle).
            </summary>
            <returns>The <see cref="T:Wisej.Base.ControlBase"/> associated with the specified handle; 
            returns null if no control with the specified handle is found.</returns>
            <param name="handle">The handle to search for.</param>
        </member>
        <member name="M:Wisej.Base.ControlBase.FromChildHandle(System.IntPtr)">
            <summary>
            Retrieves the control that contains the child control identified by the specified server-side id (handle).
            </summary>
            <returns>The <see cref="T:Wisej.Base.ControlBase" /> that represents the control associated with the specified id; 
            returns null if no control with the specified handle is found.</returns>
            <param name="handle">The handle to search for.</param>
        </member>
        <member name="M:Wisej.Base.ControlBase.SetStyle(System.Windows.Forms.ControlStyles,System.Boolean)">
            <summary>
            This method is not relevant for this class.
            </summary>
            <param name="styles"></param>
            <param name="value"></param>
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.GetStyle(System.Windows.Forms.ControlStyles)">
            <summary>
            This method is not relevant for this class.
            </summary>
            <param name="style"></param>
            <returns></returns>
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.Invalidate(System.Drawing.Region)">
            <summary>
            Causes the control to update the client side widget.
            When in design mode, causes the rendered control to update its
            entire surface in the designer.
            </summary>
            <param name="region">Not used.</param>
        </member>
        <member name="M:Wisej.Base.ControlBase.Invalidate(System.Drawing.Region,System.Boolean)">
            <summary>
            Causes the control to update the client side widget.
            When in design mode, causes the rendered control to update its
            entire surface in the designer.
            </summary>
            <param name="region">Not used.</param>
            <param name="invalidateChildren">When true, invalidates all the children of the control.</param>
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.Invalidate">
            <summary>
            Causes the control to update the client side widget.
            When in design mode, causes the rendered control to update its
            entire surface in the designer.
            </summary>
        </member>
        <member name="M:Wisej.Base.ControlBase.Invalidate(System.Boolean)">
            <summary>
            Causes the control to update the client side widget.
            When in design mode, causes the rendered control to update its
            entire surface in the designer.
            </summary>
            <param name="invalidateChildren">When true, invalidates all the children of the control.</param>
        </member>
        <member name="M:Wisej.Base.ControlBase.Invalidate(System.Drawing.Rectangle)">
            <summary>
            Invalidates the entire surface of the control and causes the control to be redrawn.
            </summary>
            <param name="rect">Not used</param>
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.Invalidate(System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Invalidates the entire surface of the control and causes the control to be redrawn.
            </summary>
            <param name="rect">Not used.</param>
            <param name="invalidateChildren">When true, invalidates all the children of the control.</param>
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.PerformLayout">
            <summary>
            Forces the control to apply layout logic to all its child controls.
            </summary>
        </member>
        <member name="M:Wisej.Base.ControlBase.InitLayout">
            <summary>
            Called after the control has been added to another container.
            </summary>
        </member>
        <member name="M:Wisej.Base.ControlBase.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the bounds of the control to the specified location and size.
            </summary>
            <param name="x">The new <see cref="P:Wisej.Base.Control.Left" /> property value of the control. </param>
            <param name="y">The new <see cref="P:Wisej.Base.Control.Top" /> property value of the control. </param>
            <param name="width">The new <see cref="P:Wisej.Base.Control.Width" /> property value of the control. </param>
            <param name="height">The new <see cref="P:Wisej.Base.Control.Height" /> property value of the control. </param>
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <summary>
            Sets the specified bounds of the control to the specified location and size.
            </summary>
            <param name="x">The new <see cref="P:Wisej.Base.Control.Left" /> property value of the control. </param>
            <param name="y">The new <see cref="P:Wisej.Base.Control.Top" /> property value of the control. </param>
            <param name="width">The new <see cref="P:Wisej.Base.Control.Width" /> property value of the control. </param>
            <param name="height">The new <see cref="P:Wisej.Base.Control.Height" /> property value of the control. </param>
            <param name="specified">A bitwise combination of the <see cref="T:System.Windows.Forms.BoundsSpecified" /> values. For any parameter not specified, the current value will be used. </param>
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.PerformLayout(Wisej.Base.ControlBase,System.String)">
            <summary>
            Forces the control to apply layout logic to all its child controls.
            </summary>
            <param name="affectedControl">A <see cref="T:Wisej.Base.ControlBase" /> that represents the recently changed control. </param>
            <param name="affectedProperty">The name of the recently changed property on the control that caused the layout to change.</param>
        </member>
        <member name="M:Wisej.Base.ControlBase.PerformLayout(System.Windows.Forms.Control,System.String)">
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.PreProcessMessage(System.Windows.Forms.Message@)">
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.PreProcessControlMessage(System.Windows.Forms.Message@)">
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.ProcessDialogKey(System.Windows.Forms.Keys)">
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.ProcessKeyEventArgs(System.Windows.Forms.Message@)">
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.ProcessDialogChar(System.Char)">
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.ProcessKeyMessage(System.Windows.Forms.Message@)">
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.ProcessKeyPreview(System.Windows.Forms.Message@)">
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.ProcessMnemonic(System.Char)">
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.DefWndProc(System.Windows.Forms.Message@)">
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.ResetBackColor">
            <summary>
            Resets the <see cref="P:Wisej.Base.ControlBase.BackColor" /> property to its default value.
            </summary>
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.ResetBindings">
            <summary>
            Causes a control bound to the <see cref="T:Wisej.Web.BindingSource" /> to reread all the items in the list and refresh their displayed values.
            </summary>
        </member>
        <member name="M:Wisej.Base.ControlBase.ResetFont">
            <summary>
            Resets the <see cref="P:Wisej.Base.ControlBase.Font" /> property to its default value.
            </summary>
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.ResetForeColor">
            <summary>
            Resets the <see cref="P:Wisej.Base.ControlBase.ForeColor" /> property to its default value.
            </summary>
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.ResetText">
            <summary>
            Resets the <see cref="P:Wisej.Base.ControlBase.Text" /> property to its default value.
            </summary>
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.ResumeLayout">
            <summary>
            Resumes layout logic.
            </summary>
        </member>
        <member name="M:Wisej.Base.ControlBase.ResumeLayout(System.Boolean)">
            <summary>
            Resumes layout logic, optionally forcing an immediate layout of all pending layout requests.
            </summary>
            <param name="performLayout">true to apply all pending layout requests; otherwise, false. </param>
        </member>
        <member name="M:Wisej.Base.ControlBase.SuspendLayout">
            <summary>
            Suspends the layout logic for the control.
            </summary>
        </member>
        <member name="M:Wisej.Base.ControlBase.Update">
            <summary>
            Causes the control to update the corresponding client side widget.
            When in design mode, causes the rendered control to update its
            entire surface in the designer.
            </summary>
        </member>
        <member name="M:Wisej.Base.ControlBase.Update(System.String)">
            <summary>
            Forces the server to update the specified property on the client side.
            </summary>
            <param name="property">Name of the property to update. This is a property
            set in <see cref="M:Wisej.Base.ControlBase.OnWebRender(System.Object)"/> when assigning values to the dynamic "config" object. </param>
            <remarks>
            <para>
            Wisej only sends to the client the difference between the previous configuration
            values and the updated values. However, when a configuration field is an object reference
            and it's not cloned, Wisej cannot detect the difference.
            </para>
            <para>
            In other cases, always when the field is an object, it's not enough to send the differences and we need to send the
            all the values in the object.
            </para>
            <para>
            Calling <b>Update("propertyName")</b> erases the property from the cached configuration
            map and forces the new value to be sent to the client.
            </para>
            </remarks>
        </member>
        <member name="M:Wisej.Base.ControlBase.UpdateState(System.String,System.Object)">
            <summary>
            Updates the stored state value for this control. It can be used to prevent Wisej
            from updating a property on the client since the Component Manager only sends
            back difference between the stored state and the current state.
            </summary>
            <param name="name">Name of the property to update.</param>
            <param name="value">Value to assign to the property <paramref name="name"/>.</param>
        </member>
        <member name="M:Wisej.Base.ControlBase.UpdateStyles">
            <summary>
            Forces the assigned styles to be reapplied to the control
            and fires the <see cref="E:Wisej.Base.ControlBase.StyleChanged"/> event.
            </summary>
        </member>
        <member name="M:Wisej.Base.ControlBase.Refresh">
            <summary>
            Forces the control to update corresponding client widget.
            When in DesignMode it forces a full redraw of the designer surface 
            for this control, including the non-client areas such as the caption of forms or panels.
            </summary>
        </member>
        <member name="M:Wisej.Base.ControlBase.UpdateZOrder">
            <summary>
            Updates the control's z-order.
            </summary>
        </member>
        <member name="M:Wisej.Base.ControlBase.IsMnemonic(System.Char,System.String)">
            <summary>
            Determines whether the specified character is the mnemonic character.
            </summary>
            <param name="charCode">The character to test. </param>
            <param name="text">The string to search. </param>
            <returns>true if the <paramref name="charCode" /> character is the mnemonic character; otherwise, false.</returns>
        </member>
        <member name="M:Wisej.Base.ControlBase.IsInputKey(Wisej.Base.Keys)">
            <summary>
            Determines whether the specified key is a regular input key.
            </summary>
            <param name="keyData">One of the <see cref="T:Wisej.Base.Keys" /> values.</param>
            <returns>true if the specified key is a regular input key; otherwise, false.</returns>
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.IsInputChar(System.Char)">
            <summary>
            Determines whether a character is an input character.
            </summary>
            <param name="charCode">The character to test. </param>
            <returns>true if the character is an input character; otherwise, false.</returns>
        </member>
        <member name="M:Wisej.Base.ControlBase.Contains(System.Windows.Forms.Control)">
            <summary>
            Indicates whether the specified control is a child of the control.
            </summary>
            <returns>true if the specified control is a child of the control; otherwise, false.</returns>
            <param name="control">The <see cref="T:Wisej.Base.ControlBase" /> to evaluate. </param>
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.CreateControlsInstance">
            <summary>
            Creates a new instance of the control collection for the control.
            </summary>
        </member>
        <member name="M:Wisej.Base.ControlBase.BringToFront">
            <summary>
            Brings the control to the front of the z-order.
            </summary>
        </member>
        <member name="M:Wisej.Base.ControlBase.SendToBack">
            <summary>
            Sends the control to the back of the z-order.
            </summary>
        </member>
        <member name="M:Wisej.Base.ControlBase.Focus">
            <summary>
            Sets input focus to the control.
            </summary>
            <returns>true if the input focus request was successful; otherwise, false.</returns>
        </member>
        <member name="M:Wisej.Base.ControlBase.SetFocusInternal">
            <summary>
            Makes this control the focus control.
            </summary>
        </member>
        <member name="M:Wisej.Base.ControlBase.CreateControl">
            <summary>
            Creates and register this control and all its children.
            </summary>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnCreateControl">
            <summary>
            Raised when the control is created.
            </summary>
        </member>
        <member name="M:Wisej.Base.ControlBase.Refresh(System.Boolean)">
            <summary>
            Forces the control to update corresponding client widget. When in DesignMode it 
            forces a full redraw of the designer surface for this control and optionally of 
            its children, including the non-client areas such as the caption of forms or panels.
            </summary>
            <param name="refreshChildren">True to also refresh all the children of this control.</param>
        </member>
        <member name="M:Wisej.Base.ControlBase.SetClientSizeCore(System.Int32,System.Int32)">
            <summary>
            Sets the client size of the control.
            </summary>
            <param name="width">The client width, in pixels.</param>
            <param name="height">The client height, in pixels.</param>
        </member>
        <member name="M:Wisej.Base.ControlBase.SizeFromClientSize(System.Drawing.Size)">
            <summary>
            Converts the client size into the window size.
            </summary>
            <param name="clientSize"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Base.ControlBase.GetTopLevel">
            <summary>
            Determines if the control is a top-level control.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wisej.Base.ControlBase.SetTopLevel(System.Boolean)">
            <summary>
            Sets the control as the top-level control.
            </summary>
            <param name="value">true to set the control as the top-level control; otherwise, false.</param>
        </member>
        <member name="M:Wisej.Base.ControlBase.GetPreferredSize(System.Drawing.Size)">
             <summary>
             Retrieves the size of a rectangular area into which a control can be fitted.
            </summary>
             <param name="proposedSize">The custom size specified for the control.</param>
             <returns>The <see cref="T:System.Drawing.Size" /> representing the preferred size of the control.</returns>
        </member>
        <member name="M:Wisej.Base.ControlBase.SetAutoSizeMode(System.Windows.Forms.AutoSizeMode)">
            <summary>
            Sets a value indicating how a control will behave 
            when its <see cref="P:Wisej.Base.Control.AutoSize" /> property is enabled.
            </summary>
            <param name="mode">One of the <see cref="T:Wisej.Base.AutoSizeMode" /> values.</param>
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.GetAutoSizeMode">
            <summary>
            Returns how a control will behave when its AutoSize property is enabled.
            </summary>
            <returns>One of the <see cref="T:Wisej.Base.AutoSizeMode"/> values.</returns>
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.GetInsets">
            <summary>
            Returns the size of the insets: borders +  padding.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wisej.Base.ControlBase.PointToClient(System.Drawing.Point)">
            <summary>
            Computes the location of the specified screen point into client coordinates.
            </summary>
            <returns>A <see cref="T:System.Drawing.Point" /> that represents the converted <see cref="T:System.Drawing.Point" />, <paramref name="point" />, in client coordinates.</returns>
            <param name="point">The screen coordinate <see cref="T:System.Drawing.Point" /> to convert. </param>
        </member>
        <member name="M:Wisej.Base.ControlBase.PointToScreen(System.Drawing.Point)">
            <summary>
            Computes the location of the specified client point into screen coordinates.
            </summary>
            <returns>A <see cref="T:System.Drawing.Point" /> that represents the converted <see cref="T:System.Drawing.Point" />, <paramref name="point" />, in screen coordinates.</returns>
            <param name="point">The client coordinate <see cref="T:System.Drawing.Point" /> to convert. </param>
        </member>
        <member name="M:Wisej.Base.ControlBase.RectangleToClient(System.Drawing.Rectangle)">
            <summary>
            Computes the size and location of the specified screen rectangle in client coordinates.
            </summary>
            <returns>A <see cref="T:System.Drawing.Rectangle" /> that represents the converted <see cref="T:System.Drawing.Rectangle" />, <paramref name="rect" />, in client coordinates.</returns>
            <param name="rect">The screen coordinate <see cref="T:System.Drawing.Rectangle" /> to convert. </param>
        </member>
        <member name="M:Wisej.Base.ControlBase.RectangleToScreen(System.Drawing.Rectangle)">
            <summary>
            Computes the size and location of the specified client rectangle in screen coordinates.
            </summary>
            <returns>A <see cref="T:System.Drawing.Rectangle" /> that represents the converted <see cref="T:System.Drawing.Rectangle" />, <paramref name="rect" />, in screen coordinates.</returns>
            <param name="rect">The client coordinate <see cref="T:System.Drawing.Rectangle" /> to convert. </param>
        </member>
        <member name="M:Wisej.Base.ControlBase.GetAnyDisposingInHierarchy">
            <summary>
            Returns true if this controls is being disposed or any of its
            parents is being disposed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wisej.Base.ControlBase.GetAnyDesignModeInHierarchy">
            <summary>
            Returns true if this control is in design mode or any of its
            parents is in design mode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wisej.Base.ControlBase.Eval(System.String)">
            <summary>
            Runs the <paramref name="javaScript"/> code within the component's context
            in the browser.
            </summary>
            <param name="javaScript">The JavaScript code to run on the client.</param>
        </member>
        <member name="M:Wisej.Base.ControlBase.Eval(System.String,System.Action{System.Object})">
            <summary>
            Runs the <paramref name="javaScript"/> code within the component's context
            in the browser and  returns the value to the <paramref name="callback"/> method.
            </summary>
            <param name="javaScript">The JavaScript code to evaluate on the client.</param>
            <param name="callback">Asynchronous callback method that receives the return value.</param>
        </member>
        <member name="M:Wisej.Base.ControlBase.EvalAsync(System.String)">
            <summary>
            Asynchronously runs the <paramref name="javaScript"/> code within the component's context
            in the browser and returns an awaitable <see cref="T:System.Threading.Tasks.Task"/> that contains the
            value returned by the remote call.
            </summary>
            <param name="javaScript">The JavaScript code to evaluate on the client.</param>
            <returns>
            An awaitable <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:Wisej.Base.ControlBase.Call(System.String,System.Object[])">
            <summary>
            Runs the JavaScript <paramref name="function"/> within the component's context
            in the browser.
            </summary>
            <param name="function">The name of the JavaScript function to execute.</param>
            <param name="args">The arguments to pass to the function.</param>
        </member>
        <member name="M:Wisej.Base.ControlBase.Call(System.String,System.Action{System.Object},System.Object[])">
            <summary>
            Runs the JavaScript <paramref name="function"/> within the component's context 
            in the browser and returns the value to the <paramref name="callback"/> method.
            </summary>
            <param name="function">The name of the JavaScript function to execute.</param>
            <param name="callback">Asynchronous callback method that receives the return value.</param>
            <param name="args">The arguments to pass to the function.</param>
        </member>
        <member name="M:Wisej.Base.ControlBase.CallAsync(System.String,System.Object[])">
            <summary>
            Asynchronously runs the JavaScript <paramref name="function"/> within the component's context 
            in the browser and returns an awaitable <see cref="T:System.Threading.Tasks.Task"/> containing the value returned by the
            remote call.
            </summary>
            <param name="function">The name of the JavaScript function to execute.</param>
            <param name="args">The arguments to pass to the function.</param>
            <returns>
            An awaitable <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:Wisej.Base.ControlBase.EscapeText(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Removes the ampersand from the text and 
            encodes HTML characters if necessary.
            </summary>
            <param name="text">The text to convert.</param>
            <param name="allowHtml">Whether to encode HTML characters.</param>
            <param name="useMnemonic">Whether to convert the first mnemonic to an underlined character.</param>
            <param name="translateNewLines">
            Whether to convert newlines (CRLF) to &lt;BR/&gt;. The conversion is performed
            only when <para>allowHtml</para> is false, or, if <para>allowHtml</para> is true and the text doesn't contain any html.
            </param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Base.ControlBase.GetState(System.Int64)">
            <summary>
            Returns the state flag.
            </summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Base.ControlBase.SetState(System.Int64,System.Boolean)">
            <summary>
            Sets the specified state flag.
            </summary>
            <param name="flag"></param>
            <param name="value"></param>
        </member>
        <member name="M:Wisej.Base.ControlBase.ScrollControlIntoView(System.Windows.Forms.Control)">
            <summary>
            This method doesn't apply to this class.
            </summary>
            <param name="control"></param>
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.ScrollControlIntoView">
            <summary>
            Scrolls the child control into view.
            </summary>
        </member>
        <member name="M:Wisej.Base.ControlBase.SetScrollState(System.Int32,System.Boolean)">
            <summary>
            This method doesn't apply to this class.
            </summary>
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.ScrollToControl(System.Windows.Forms.Control)">
            <summary>
            This method doesn't apply to this class.
            </summary>
            <param name="control"></param>
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.SetDisplayRectLocation(System.Int32,System.Int32)">
            <summary>
            This method doesn't apply to this class.
            </summary>
            <param name="x">T</param>
            <param name="y"></param>
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.SetAutoScrollMargin(System.Int32,System.Int32)">
            <summary>
            This method doesn't apply to this class.
            </summary>
            <param name="x">T</param>
            <param name="y"></param>
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.GetScrollState(System.Int32)">
            <summary>
            This method doesn't apply to this class.
            </summary>
            <param name="bit"></param>
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.AdjustFormScrollbars(System.Boolean)">
            <summary>
            This method doesn't apply to this class.
            </summary>
            <param name="displayScrollbars"></param>
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.Show">
            <summary>
            Displays the control to the user.
            </summary>
        </member>
        <member name="M:Wisej.Base.ControlBase.Hide">
            <summary>
            Conceals the control from the user.
            </summary>
        </member>
        <member name="M:Wisej.Base.ControlBase.Scale(System.Drawing.SizeF)">
            <summary>
            Scales the control and all child controls by the specified scaling factor.
            </summary>
            <param name="factor">A <see cref="T:System.Drawing.SizeF" /> containing the horizontal and vertical scaling factors.</param>
        </member>
        <member name="M:Wisej.Base.ControlBase.Scale(System.Single)">
            <summary>
            Scales the control and any child controls.
            </summary>
            <param name="ratio">The ratio to use for scaling.</param>
        </member>
        <member name="M:Wisej.Base.ControlBase.Scale(System.Single,System.Single)">
            <summary>
            Scales the entire control and any child controls.
            </summary>
            <param name="dx">The horizontal scaling factor.</param>
            <param name="dy">The vertical scaling factor.</param>
        </member>
        <member name="M:Wisej.Base.ControlBase.ScaleCore(System.Single,System.Single)">
            <summary>
            This method is not relevant for this class.
            </summary>
            <param name="dx">The horizontal scaling factor.</param>
            <param name="dy">The vertical scaling factor.</param>
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.ScaleControl(System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)">
            <summary>
            Scales a control's location, size, padding and margin.
            </summary>
            <param name="factor">The factor by which the height and width of the control will be scaled.</param>
            <param name="specified">A <see cref="T:System.Windows.Forms.BoundsSpecified" /> value that specifies the bounds of the control to use when defining its size and position.</param>
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.GetScaledBounds(System.Drawing.Rectangle,System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)">
            <summary>
            Retrieves the scaled bounds for the specified control.
            </summary>
            <returns>A <see cref="T:System.Drawing.Rectangle" /> representing the new scaled bounds.</returns>
            <param name="bounds">A <see cref="T:System.Drawing.Rectangle" /> that specifies the bounds to scale.</param>
            <param name="factor">The height and width of the control's bounds.</param>
            <param name="specified">One of the values of <see cref="T:System.Windows.Forms.BoundsSpecified" /> that specifies the bounds to scale.</param>
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.Select(System.Boolean,System.Boolean)">
            <summary>
            Activates a child control. Optionally specifies the direction in the tab order to select the control from.
            </summary>
            <param name="directed">true to specify the direction of the control to select; otherwise, false. </param>
            <param name="forward">true to move forward in the tab order; false to move backward in the tab order. </param>		
        </member>
        <member name="M:Wisej.Base.ControlBase.GetNextControl(System.Windows.Forms.Control,System.Boolean)">
            <summary>
             Retrieves the next control forward or back in the tab order of child controls.
            </summary>
            <param name="control">The <see cref="T:Wisej.Base.ControlBase"/>  to start the search with.</param>
            <param name="forward">true to search forward in the tab order; false to search backward.</param>
            <returns>The next <see cref="T:Wisej.Base.ControlBase"/> in the tab order.</returns>
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.SelectNextControl(System.Windows.Forms.Control,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Activates the next control in the list according to the specified selection rules.
            </summary>
            <returns>true if a control was activated; otherwise, false.</returns>
            <param name="control">The <see cref="T:Wisej.Base.ControlBase" /> at which to start the search. </param>
            <param name="forward">true to move forward in the tab order; false to move backward in the tab order. </param>
            <param name="tabStopOnly">true to ignore the controls with the <see cref="P:Wisej.Web.Control.TabStop" /> property set to false; otherwise, false. </param>
            <param name="nested">true to include nested (children of child controls) child controls; otherwise, false. </param>
            <param name="wrap">true to continue searching from the first control in the tab order after the last control has been reached; otherwise, false. </param>
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.GetChildAtPoint(System.Drawing.Point,System.Windows.Forms.GetChildAtPointSkip)">
            <summary>
            Retrieves the child control that is located at the specified coordinates, specifying 
            whether to ignore child controls of a certain type.
            </summary>
            <returns>The child <see cref="T:Wisej.Base.ControlBase" /> at the specified coordinates.</returns>
            <param name="pt">A <see cref="T:System.Drawing.Point" /> that contains the coordinates where you want to look for a control. Coordinates are expressed relative to the upper-left corner of the control's client area.</param>
            <param name="skipValue">One of the values of <see cref="T:System.Windows.Forms.GetChildAtPointSkip" />, determining whether to ignore child controls of a certain type.</param>
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.GetChildAtPoint(System.Drawing.Point)">
            <summary>
            Retrieves the child control that is located at the specified coordinates.
            </summary>
            <returns>A <see cref="T:Wisej.Base.ControlBase" /> that represents the control that is located at the specified point.</returns>
            <param name="pt">A <see cref="T:System.Drawing.Point" /> that contains the coordinates where you want to look for a control. Coordinates are expressed relative to the upper-left corner of the control's client area. </param>
        </member>
        <member name="M:Wisej.Base.ControlBase.GetContainerControl">
            <summary>
            Returns the closest container control.
            </summary>
            <returns></returns>
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.UpdateBounds(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Updates the bounds of the control with the specified size and location.
            </summary>
            <param name="x">The <see cref="P:System.Drawing.Point.X" /> coordinate of the control. </param>
            <param name="y">The <see cref="P:System.Drawing.Point.Y" /> coordinate of the control. </param>
            <param name="width">The <see cref="P:System.Drawing.Size.Width" /> of the control. </param>
            <param name="height">The <see cref="P:System.Drawing.Size.Height" /> of the control. </param>
        </member>
        <member name="M:Wisej.Base.ControlBase.UpdateBounds">
            <summary>
            Updates the bounds of the control with the current size and location.
            </summary>
        </member>
        <member name="M:Wisej.Base.ControlBase.BeginInvoke(System.Delegate)">
            <summary>
            Executes the specified delegate asynchronously.
            </summary>
            <returns>An <see cref="T:System.IAsyncResult" /> that represents the result of the <see cref="M:Wisej.Base.Control.BeginInvoke(System.Delegate)" /> operation.</returns>
            <param name="method">A delegate to a method that takes no parameters. </param>
        </member>
        <member name="M:Wisej.Base.ControlBase.BeginInvoke(System.Delegate,System.Object[])">
            <summary>
            Executes the specified delegate asynchronously.
            </summary>
            <param name="method">A delegate to a method that takes no parameters.</param>
            <param name="args">An optional array of objects to pass as arguments to the specified method.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the result of the asynchronous call.</returns>
        </member>
        <member name="M:Wisej.Base.ControlBase.EndInvoke(System.IAsyncResult)">
            <summary>
            Retrieves the return value from the asynchronous operation represented by <paramref name="asyncResult"/>.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that represents a <see cref="M:Wisej.Base.ControlBase.BeginInvoke(System.Delegate)"/> operation started on a control.</param>
            <returns>The return value from the asynchronous operation.</returns>
        </member>
        <member name="T:Wisej.Base.ControlBase.BeginInvokeResult">
            <summary>
            Returns the IAsyncResult connected to the asynchronous call initiated by BeginInvoke.
            </summary>
        </member>
        <member name="M:Wisej.Base.ControlBase.Invoke(System.Delegate)">
            <summary>
            Executes the specified delegate.
            </summary>
            <returns>The return value from the delegate being invoked, or null if the delegate has no return value.</returns>
            <param name="method">A delegate that contains a method to be called in the control's thread context. </param>
        </member>
        <member name="M:Wisej.Base.ControlBase.Invoke(System.Delegate,System.Object[])">
            <summary>
            Executes the specified delegate, on the thread that owns the control's underlying window handle, with the specified list of arguments.
            </summary>
            <returns>An <see cref="T:System.Object" /> that contains the return value from the delegate being invoked, or null if the delegate has no return value.</returns>
            <param name="method">A delegate to a method that takes parameters of the same number and type that are contained in the <paramref name="args" /> parameter. </param>
            <param name="args">An array of objects to pass as arguments to the specified method. This parameter can be null if the method takes no arguments. </param>
        </member>
        <member name="M:Wisej.Base.ControlBase.CreateAccessibilityInstance">
            <summary>
            This method is not relevant for this class.
            </summary>
            <exclude/>
        </member>
        <member name="P:Wisej.Base.ControlBase.AccessibilityObject">
            <summary>
            This property is not relevant for this class.
            </summary>
            <exclude/>
        </member>
        <member name="P:Wisej.Base.ControlBase.CheckForIllegalCrossThreadCalls">
            <summary>
            This property is not relevant for this class.
            </summary>
            <exclude/>
        </member>
        <member name="P:Wisej.Base.ControlBase.BindingContext">
            <summary>
            Returns or sets the <see cref="T:Wisej.Web.BindingContext" /> for the control.
            </summary>
            <returns>A <see cref="T:Wisej.Web.BindingContext" /> for the control.</returns>
        </member>
        <member name="P:Wisej.Base.ControlBase.DataBindings">
            <summary>
            Returns the data bindings for the control.
            </summary>
            <returns>A <see cref="T:Wisej.Base.ControlBindingsCollection" /> that contains the <see cref="T:Wisej.Web.Binding" /> objects for the control.</returns>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnWebEvent(Wisej.Core.WisejEventArgs)">
            <summary>
            Processes the event from the client.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnAddReferences(System.Collections.IList)">
            <summary>
            Returns a collection of referenced components or collection of components.
            </summary>
            <param name="list">List of referenced components or collection of components.</param>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnWebRender(System.Object)">
            <summary>
            Renders the client component.
            </summary>
            <param name="config">Dynamic configuration object.</param>
        </member>
        <member name="M:Wisej.Base.ControlBase.RegisterWebMethods(System.Object)">
            <summary>
            Registers the public methods marked with the <see cref="T:Wisej.Core.WebMethodAttribute"/>
            with the client and allows JavaScript to call the methods in context.
            </summary>
            <param name="config">Dynamic configuration object.</param>
        </member>
        <member name="M:Wisej.Base.ControlBase.RenderChildren(System.Object,System.Boolean)">
            <summary>
            Renders child controls.
            
            If we are in design mode, the child controls are rendered directly in
            the controls collection, otherwise the collection contains the ids of the child controls.
            </summary>
            <param name="config">Dynamic configuration object.</param>
            <param name="designMode">Indicates whether the parent control is in design mode.</param>
        </member>
        <member name="M:Wisej.Base.ControlBase.WireWebEvents(System.Object)">
            <summary>
            Registers the listeners for common events and for critical
            events that should be wired only if the application has attached an handler.
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnWebUpdate(System.Object)">
            <summary>
            Updates the client component using the state information.
            </summary>
            <param name="state">Dynamic state object.</param>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnWebPaint(System.Drawing.Graphics)">
            <summary>
            Updates the canvas for user-paint controls.
            </summary>
            <param name="g">Graphics context.</param>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnWebDesignPaint(System.Drawing.Graphics)">
            <summary>
            Allows a control to paint its representation at design time.
            </summary>
            <param name="g">Graphics context.</param>
        </member>
        <member name="M:Wisej.Base.ControlBase.CreateGraphics">
            <summary>
            Creates the <see cref="T:System.Drawing.Graphics" /> for the control using
            an Azure Web Site compatible device context.
            </summary>
            <returns>The <see cref="T:System.Drawing.Graphics" /> for the control.</returns>
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.CreateHandle">
            <summary>
            Creates the design-time handle for the control.
            </summary>
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.DestroyHandle">
            <summary>
            Destroys the handle associated with the control.
            </summary>
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.SetVisibleCore(System.Boolean)">
            <summary>
            Sets the control to the specified visible state.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Wisej.Base.ControlBase.GetVisibleCore">
            <summary>
            Returns the visible state of the control.
            </summary>
            <returns>True if the control and all its parents are visible, false if the control or any of its parents are not visible.</returns>
        </member>
        <member name="M:Wisej.Base.ControlBase.DrawToBitmap(System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>
            This method is not supported.
            </summary>
            <param name="bitmap">The bitmap to be drawn to.</param>
            <param name="targetBounds">The bounds within which the control is rendered.</param>
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.ResolveColor(System.Drawing.Color)">
            <summary>
            Resolves the named or themed color to an actual usable color value.
            </summary>
            <param name="color">The color to resolve.</param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Base.ControlBase.GetFontAutoScaleDimensions">
            <summary>
            Returns the size of the font.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Wisej.Base.ControlBase.Wisej#Core#IWisejComponent#Id">
            <summary>
            The unique client id of the component.
            </summary>
        </member>
        <member name="P:Wisej.Base.ControlBase.Wisej#Core#IWisejComponent#Handle">
            <summary>
            The unique server handle of the component.
            </summary>
        </member>
        <member name="P:Wisej.Base.ControlBase.Wisej#Core#IWisejComponent#DesignRect">
            <summary>
            Returns or sets the design rectangle for the component when
            it is used as a child widget in a designable control.
            </summary>
            <exclude/>
        </member>
        <member name="P:Wisej.Base.ControlBase.Wisej#Core#IWisejComponent#IsNew">
            <summary>
            Returns or sets the new status.
            </summary>
        </member>
        <member name="P:Wisej.Base.ControlBase.Wisej#Core#IWisejComponent#IsDisposed">
            <summary>
            Indicates that the component has been disposed.
            </summary>
        </member>
        <member name="P:Wisej.Base.ControlBase.Wisej#Core#IWisejComponent#Session">
            <summary>
            Holds a reference to the session where this
            component lives.
            </summary>
        </member>
        <member name="P:Wisej.Base.ControlBase.Wisej#Core#IWisejComponent#IsDirty">
            <summary>
            Indicates that the component needs to be updated on the client.
            </summary>
        </member>
        <member name="P:Wisej.Base.ControlBase.Wisej#Core#IWisejComponent#Locked">
            <summary>
            Locks UI updates to the control.
            </summary>
        </member>
        <member name="P:Wisej.Base.ControlBase.Wisej#Core#IWisejComponent#IsTopLevel">
            <summary>
            Indicates that the component is rendered at the top level
            on the client: the parent is the root.
            </summary>
        </member>
        <member name="P:Wisej.Base.ControlBase.Wisej#Core#IWisejComponent#DesignMode">
            <summary>
            Indicates that the control is being rendered in the designer.
            </summary>
        </member>
        <member name="P:Wisej.Base.ControlBase.Wisej#Core#IWisejComponent#Configuration">
            <summary>
            Stores the last configuration for the component.
            </summary>
        </member>
        <member name="M:Wisej.Base.ControlBase.Wisej#Core#IWisejComponent#Reference(System.Collections.IList)">
            <summary>
            Returns a collection of referenced components or collection of components.
            </summary>
            <param name="list">List of referenced components or collection of components.</param>
        </member>
        <member name="P:Wisej.Base.ControlBase.Wisej#Core#IWisejControl#Created">
            <summary>
            Returns whether the control has been created fully and it's ready to be sent to the
            client. A control is marked as Created after it has been made visible the first time.
            </summary>
        </member>
        <member name="M:Wisej.Base.ControlBase.Wisej#Core#IWisejControl#SetDesignMetrics(System.Object)">
            <summary>
            Sets the design-time metrics used by the designer to adapt the
            control on the screen to the html metrics used by the renderer.
            </summary>
            <param name="metrics">Design properties received from the renderer.</param>
        </member>
        <member name="P:Wisej.Base.ControlBase.Wisej#Core#IWisejControl#DesignerTimeout">
            <summary>
            Returns the design timeout in milliseconds.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Wisej.Base.ControlBase.Wisej#Core#IWisejControl#Children">
            <summary>
            Returns the children of the control or null if the control doesn't have children.
            </summary>
        </member>
        <member name="P:Wisej.Base.ControlBase.Wisej#Core#IWisejControl#AppearanceKey">
            <summary>
            Returns the default theme appearance key for this control.
            </summary>
        </member>
        <member name="P:Wisej.Base.ControlBase.Wisej#Core#IWisejControl#Theme">
            <summary>
            Returns the current application theme.
            </summary>
        </member>
        <member name="P:Wisej.Base.ControlBase.Wisej#Core#IWisejControl#Platform">
            <summary>
            Returns the current application platform.
            </summary>
        </member>
        <member name="P:Wisej.Base.ControlBase.Wisej#Core#IWisejControl#Parent">
            <summary>
            Returns or sets the parent control.
            </summary>
        </member>
        <member name="M:Wisej.Base.ControlBase.Wisej#Core#IWisejComponent#UpdateWidget">
            <summary>
            Updates the client widget.
            </summary>
        </member>
        <member name="E:Wisej.Base.ControlBase.Wisej#Core#IWisejComponent#Updated">
            <summary>
            Fired after the component has been updated.
            </summary>
        </member>
        <member name="M:Wisej.Base.ControlBase.Wisej#Core#IWisejComponent#UpdateComponent(System.Object)">
            <summary>
            Updates the server component using the state information.
            </summary>
            <param name="state">Dynamic state object.</param>
        </member>
        <member name="M:Wisej.Base.ControlBase.Wisej#Core#IWisejComponent#Render(System.Object)">
            <summary>
            Renders the component into the config definition.
            </summary>
            <param name="config">Dynamic configuration object.</param>
        </member>
        <member name="M:Wisej.Base.ControlBase.Wisej#Core#IWisejComponent#Event(Wisej.Core.WisejEventArgs)">
            <summary>
            Processes the event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="P:Wisej.Base.ControlBase.CreateParams">
            <summary>
            Adds the WS_EX_LAYOUTRTL and WS_EX_NOINHERITLAYOUT styles to the
            creation parameters for this control when in design mode and
            with the RightToLeft and STATE_RTLAYOUT flags on.
            </summary>
            <exclude/>
        </member>
        <member name="M:Wisej.Base.ControlBase.RecreateHandle(System.Boolean)">
            <summary>
            Recreates the handle for this control and optionally
            of all the child controls.
            </summary>
            <param name="children"></param>
        </member>
        <member name="M:Wisej.Base.ControlBase.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Windows message loop. Used only at design time.
            </summary>
            <param name="m"></param>
            <exclude/>
        </member>
        <member name="P:Wisej.Base.ControlBase.ClientArea">
            <summary>
            Returns the client rectangle excluding the non-client
            caption and borders dimensions.
            </summary>
        </member>
        <member name="P:Wisej.Base.ControlBase.Painter">
            <summary>
            Returns the painter responsible for drawing this control at design time.
            </summary>
        </member>
        <member name="M:Wisej.Base.ControlBase.CreatePainter">
            <summary>
            Creates an instance of WisejControlPainter.
            
            If the class is not available, returns in instance of
            DummyPainter.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Wisej.Base.ControlBase.IsUserPaint">
            <summary>
            Returns true if the control has the UserPaint styles set.
            </summary>
        </member>
        <member name="T:Wisej.Base.ControlBase.DummyPainter">
            <summary>
            Dummy painter class. Doesn't paint anything.
            </summary>
        </member>
        <member name="T:Wisej.Base.Extensions">
            <summary>
            Adds runtime and design time functionality to Wisej components.
            </summary>
        </member>
        <member name="M:Wisej.Base.Extensions.GetDesignerHost(System.ComponentModel.IComponent)">
            <summary>
            Returns the designer host for the control or one of the parents.
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Base.Extensions.GetProjectPath(System.ComponentModel.IComponent)">
            <summary>
            Returns the path of the current project in design mode.
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:Wisej.Base.Extensions.GetTheme(System.ComponentModel.IComponent)">
            <summary>
            Returns the current theme loaded in the Application or the designer.
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Base.Extensions.GetPlatform(Wisej.Core.IWisejControl)">
            <summary>
            Returns the current platform loaded in the application or the designer.
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Base.Extensions.GetImageUrl(Wisej.Core.IWisejComponent,System.Drawing.Image,System.String,System.String,System.Boolean)">
            <summary>
            Converts a named component resource to an embedded 
            base64 resource (in design mode) or a resource.wx URL
            </summary>
            <param name="component">Component owning the property.</param>
            <param name="image">The image resource to convert to a URL.</param>
            <param name="name">Property name.</param>
            <param name="version">Version string, used to bust the cache.</param>
            <param name="dispose">When true, the image is disposed as soon as it's sent to the client.</param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Base.Extensions.RefreshDesignerSelection(Wisej.Base.ControlBase)">
            <summary>
            Invokes System.Windows.Forms.Design.Behavior.SelectionManager.Refresh.
            </summary>
            <param name="control"></param>
        </member>
        <member name="T:Wisej.Base.SR">
            <summary>
            Resource Manager.
            Manages the resources in Wisej assemblies, WinForms, System.Design, and optionally
            the assembly that contains the type specified in the attribute declaration.
            </summary>
            <exclude/>
        </member>
        <member name="M:Wisej.Base.SR.GetString(System.String)">
            <summary>
            Returns the localized string associated to <paramref name="name"/> in any
            of the managed resource files.
            </summary>
            <param name="name">Name of the resource string to retrieve.</param>
            <returns>Text resource if found, otherwise it returns the specified <paramref name="name"/>.</returns>
        </member>
        <member name="M:Wisej.Base.SR.GetString(System.Type,System.String)">
            <summary>
            Returns the localized string associated to <paramref name="name"/> in any
            of the managed resource files.
            </summary>
            <param name="type">The type that defines the resources.</param>
            <param name="name">Name of the resource string to retrieve.</param>
            <returns>Text resource if found, otherwise it returns the specified <paramref name="name"/>.</returns>
        </member>
        <member name="M:Wisej.Base.SR.GetString(System.String,System.Object[])">
            <summary>
            Returns the localized string associated to <paramref name="name"/> in any
            of the managed resource files and formats it using the values in <paramref name="args"/>.
            </summary>
            <param name="name">Name of the resource string to retrieve.</param>
            <returns>Text resource if found, otherwise it returns the specified <paramref name="name"/>.</returns>
            <param name="args">Values to replace in the resource string.</param>
            <returns>Formatted text resource if found, otherwise it returns the specified <paramref name="name"/>.</returns>
        </member>
        <member name="M:Wisej.Base.SR.GetString(System.Type,System.String,System.Object[])">
            <summary>
            Returns the localized string associated to <paramref name="name"/> in any
            of the managed resource files and formats it using the values in <paramref name="args"/>.
            </summary>
            <param name="type">The type that defines the resources.</param>
            <param name="name">Name of the resource string to retrieve.</param>
            <returns>Text resource if found, otherwise it returns the specified <paramref name="name"/>.</returns>
            <param name="args">Values to replace in the resource string.</param>
            <returns>Formatted text resource if found, otherwise it returns the specified <paramref name="name"/>.</returns>
        </member>
        <member name="T:Wisej.Base.SRCategoryAttribute">
            <summary>
            Specifies a localizable category name to which a property or event belongs to.
            </summary>
            <exclude/>
        </member>
        <member name="T:Wisej.Base.SRDescriptionAttribute">
            <summary>
            Specifies a localizable description for a class member.
            </summary>
            <exclude/>
        </member>
        <member name="M:Wisej.Base.WinSDK.MAKELPARAM(System.Int32,System.Int32)">
            <summary>
            Makes a LONG from a low and high value.
            </summary>
            <param name="low"></param>
            <param name="high"></param>
            <returns></returns>
        </member>
        <member name="T:Wisej.Core.LambdaUtils">
            <summary>
            Lambda reflection support.
            </summary>
        </member>
        <member name="T:Wisej.Core.Brotli">
            <summary>
            Manages the Wisej.Web.Ext.Brotli extension.
            </summary>
        </member>
        <member name="P:Wisej.Core.Brotli.IsSupported">
            <summary>
            Returns true if we have a Brotli implementation assembly.
            </summary>
        </member>
        <member name="M:Wisej.Core.Brotli.CreateStream(System.IO.Stream,System.IO.Compression.CompressionLevel)">
            <summary>
            Creates an instance of the System.IO.Compression.BrotliStream class in the
            Wisej.Web.Ext.Brotli assembly.
            </summary>
            <param name="stream">Input stream.</param>
            <param name="level">The compression level</param>
            <returns>The Brotli compression stream.</returns>
        </member>
        <member name="M:Wisej.Core.Brotli.CreateStream(System.IO.Stream,System.IO.Compression.CompressionLevel,System.Boolean)">
            <summary>
            Creates an instance of the System.IO.Compression.BrotliStream class in the
            Wisej.Web.Ext.Brotli assembly.
            </summary>
            <param name="stream">Input stream.</param>
            <param name="level">The compression level</param>
            <param name="leaveOpen">Flag to leave the compression stream open when disposing the Brotli encoder.</param>
            <returns>The Brotli compression stream.</returns>
        </member>
        <member name="T:Wisej.Core.BrowserStorage">
            <summary>
            Represents the browser's storage objects.
            </summary>
            <exclude/>
        </member>
        <member name="M:Wisej.Core.BrowserStorage.#ctor(Wisej.Core.ClientBrowser,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Wisej.Core.BrowserStorage"/> 
            using the storage type specified in <paramref name="type"/>.
            </summary>
            <param name="type">0 = locaStorage, 1 = sessionStorage, 2 = cookies.</param>
            <param name="browser"></param>
        </member>
        <member name="M:Wisej.Core.BrowserStorage.SetValue``1(System.String,``0)">
            <summary>
            Stores the specified <paramref name="value"/> in the 
            browser's storage.
            </summary>
            <typeparam name="T">Type of the value to store.</typeparam>
            <param name="key">Key associated with the value.</param>
            <param name="value">Value to store in the browser's storage.</param>
        </member>
        <member name="M:Wisej.Core.BrowserStorage.GetValue``1(System.String,System.Action{``0})">
            <summary>
            Returns the value stored in the browser's storage associated
            with the specified <paramref name="key"/>.
            </summary>
            <typeparam name="T">Type of the value to retrieve.</typeparam>
            <param name="key">Kay associated with the value to retrieve.</param>
            <param name="callback">Callback method that receives the value asynchronously.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="key"/> is null or empty, or 
            <paramref name="callback"/> is null.</exception>
            <remarks>
            This method returns the value asynchronously because it waits for the browser to respond.
            <code lang="cs">
            <![CDATA[
            Application.LocalStorage.GetValue<string>("userName", (value) => {
            	if (value != null)
            		AlertBox.Show($"Welcome back, {value}");
            });
            ]]>
            </code>
            </remarks>
        </member>
        <member name="M:Wisej.Core.BrowserStorage.GetValueAsync``1(System.String)">
            <summary>
            Asynchronously returns the value stored in the browser's storage associated
            with the specified <paramref name="key"/>.
            </summary>
            <typeparam name="T">Type of the value to retrieve.</typeparam>
            <param name="key">Kay associated with the value to retrieve.</param>
            <returns>
            An awaitable <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:Wisej.Core.BrowserStorage.GetKeys(System.Action{System.String[]})">
            <summary>
            Returns all the keys in the browser's storage.
            </summary>
            <param name="callback">Callback method that receives each key name asynchronously.</param>
        </member>
        <member name="M:Wisej.Core.BrowserStorage.GetKeysAsync">
            <summary>
            Asynchronously returns all the keys in the browser's storage.
            </summary>
            <returns>
            An awaitable <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:Wisej.Core.BrowserStorage.RemoveValue(System.String)">
            <summary>
            Removes the value associated with the <paramref name="key"/>
            from the browser's storage.
            </summary>
            <param name="key">Kay associate with the value to remove.</param>
        </member>
        <member name="M:Wisej.Core.BrowserStorage.Clear">
            <summary>
            Removes all the values from the browser's storage.
            </summary>
        </member>
        <member name="T:Wisej.Core.LocalStorage">
            <summary>
            Represents the browser's localStorage. Use this class through
            the <see cref="F:ApplicationBase.Browser.LocalStorage"/> instance.
            </summary>
        </member>
        <member name="T:Wisej.Core.SessionStorage">
            <summary>
            Represents the browser's localStorage. Use this class through
            the <see cref="F:ApplicationBase.Browser.SessionStorage"/> instance.
            </summary>
        </member>
        <member name="T:Wisej.Core.CookieStorage">
            <summary>
            Represents the browser's cookie storage. Use this class through
            the <see cref="F:ApplicationBase.Browser.CookieStorage"/> instance.
            </summary>
        </member>
        <member name="T:Wisej.Core.EncodingType">
            <summary>
            Indicates the compression supported by the browser.
            </summary>
        </member>
        <member name="T:Wisej.Core.DynamicObjectConverter">
            <summary>
            Converts dynamic objects to other representations.
            </summary>
        </member>
        <member name="T:Wisej.Core.FileSystemProvider">
            <summary>
            Default implementation of IFileSystemProvider.
            Provides access to the server's file system.
            </summary>
        </member>
        <member name="M:Wisej.Core.FileSystemProvider.#ctor">
            <summary>
            Initializes a blank instance of <see cref="T:Wisej.Core.FileSystemProvider"/>.
            </summary>
        </member>
        <member name="M:Wisej.Core.FileSystemProvider.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Wisej.Core.FileSystemProvider"/> class with the 
            specified <paramref name="root"/> and <paramref name="name"/>.
            The root is added in front of all  path arguments passed to all methods in this class.
            </summary>
            <param name="root">The root path of this file system.</param>
            <param name="name">The name of this file system.</param>
            <remarks>
            The root path is also the current directory path.
            </remarks>
        </member>
        <member name="P:Wisej.Core.FileSystemProvider.Root">
            <summary>
            Returns or sets the root path for the file system.
            All file system operations in the implementation class
            are expected to be limited to the root.
            </summary>
        </member>
        <member name="P:Wisej.Core.FileSystemProvider.Name">
            <summary>
            Returns or sets the name of this root.
            This is the name that should be shown to the user.
            </summary>
        </member>
        <member name="P:Wisej.Core.FileSystemProvider.Icon">
            <summary>
            Returns or sets the icon that represents the
            file system.
            </summary>
        </member>
        <member name="P:Wisej.Core.FileSystemProvider.IconSource">
            <summary>
            Returns or sets the icon name or URL that represents the
            file system.
            </summary>
        </member>
        <member name="M:Wisej.Core.FileSystemProvider.CreateDirectory(System.String)">
            <summary>
            Creates the specified directory and sub-directories.
            </summary>
            <param name="path">Path of the directory to create.</param>
        </member>
        <member name="M:Wisej.Core.FileSystemProvider.DeleteDirectory(System.String,System.Boolean)">
            <summary>
            Deletes the specified directory and, optionally, sub-directories.
            </summary>
            <param name="path">Path of the directory to delete.</param>
            <param name="recursive">Indicates whether to delete sub directories.</param>
        </member>
        <member name="M:Wisej.Core.FileSystemProvider.DeleteFile(System.String)">
            <summary>
            Deletes the specified file.
            </summary>
            <param name="path">Path of the file to delete.</param>
        </member>
        <member name="M:Wisej.Core.FileSystemProvider.GetCreationTime(System.String)">
            <summary>
            Returns the file's creation time.
            </summary>
            <param name="path">Path of the file to query.</param>
            <returns>A <see cref="T:Syste.DateTime"/> representing the timestamp of the file creation.</returns>
        </member>
        <member name="M:Wisej.Core.FileSystemProvider.GetLastWriteTime(System.String)">
            <summary>
            Returns the last write timestamp for the specified file.
            </summary>
            <param name="path">Path of the file to query.</param>
            <returns>A <see cref="T:Syste.DateTime"/> representing the timestamp of the last time the file was written.</returns>
        </member>
        <member name="M:Wisej.Core.FileSystemProvider.Exists(System.String)">
            <summary>
            Returns whether the specified file or directory exists.
            </summary>
            <param name="path">Path of the file or directory to check.</param>
            <returns>True of the file or directory exists.</returns>
        </member>
        <member name="M:Wisej.Core.FileSystemProvider.GetAttributes(System.String)">
            <summary>
            Returns the <see cref="T:System.IO.FileAttributes"/> for the specified <paramref name="path"/>.
            </summary>
            <param name="path">File path for which to retrieve the <see cref="T:System.IO.FileAttributes"/>.</param>
            <returns>An instance of <see cref="T:System.IO.FileAttributes"/> with the relevant flags set.</returns>
        </member>
        <member name="M:Wisej.Core.FileSystemProvider.GetFileSize(System.String)">
            <summary>
            Returns the size of the file.
            </summary>
            <param name="path">Path of the file to query.</param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.FileSystemProvider.RenameFile(System.String,System.String)">
            <summary>
            Renames the specified file.
            </summary>
            <param name="path">Path of the file to rename.</param>
            <param name="newName">The new file name.</param>
        </member>
        <member name="M:Wisej.Core.FileSystemProvider.RenameDirectory(System.String,System.String)">
            <summary>
            Renames the specified directory.
            </summary>
            <param name="path">Path of the directory to rename.</param>
            <param name="newName">The new directory name.</param>
        </member>
        <member name="M:Wisej.Core.FileSystemProvider.GetDirectories(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Returns a list of directory paths that match the pattern and search options
            in the specified path.
            </summary>
            <param name="path">Path to search into.</param>
            <param name="pattern">Wild card pattern to match.</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> options.</param>
            <returns>A <see cref="T:ystem.Array"/> containing the full path of the directories that match the search pattern and search options.</returns>
        </member>
        <member name="M:Wisej.Core.FileSystemProvider.GetFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Returns a list of file paths that match the pattern and search options
            in the specified path.
            </summary>
            <param name="path">Path to search into.</param>
            <param name="pattern">Wild card pattern to match.</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> options.</param>
            <returns>A <see cref="T:ystem.Array"/> containing the full path of the files that match the search pattern and search options.</returns>
        </member>
        <member name="M:Wisej.Core.FileSystemProvider.OpenFileStream(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens the specified file for reading or writing.
            </summary>
            <param name="path">The path of the file to open.</param>
            <param name="mode">Specified if the file should be opened, created, overwritten or truncated.</param>
            <param name="access">Specified if the stream should be opened for reading or writing.</param>
            <returns>A <see cref="T:Systen.IO.Stream"/> that can be used to read or write the content of the file. </returns>
        </member>
        <member name="M:Wisej.Core.FileSystemProvider.Contains(System.String)">
            <summary>
            Checks whether the specified <paramref name="path"/> starts with the
            <see cref="P:Wisej.Core.FileSystemProvider.Name"/> of this file system provider.
            </summary>
            <param name="path">Path of the file to check.</param>
            <returns>True if the specified path starts with the name of this file system provider.</returns>
        </member>
        <member name="M:Wisej.Core.FileSystemProvider.MapPath(System.String)">
            <summary>
            Maps the virtual path to the corresponding physical path
            on the specific <see cref="T:Wisej.Core.IFileSystemProvider"/> implementation.
            </summary>
            <param name="path">Virtual path to map to the corresponding physical path.</param>
            <returns>The physical path for the <see cref="T:Wisej.Core.IFileSystemProvider"/> implementation.</returns>
        </member>
        <member name="M:Wisej.Core.FileSystemProvider.FixPath(System.String)">
            <summary>
            Ensures the path is rooted using the Root
            specified in this FileSystemProvider.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:Wisej.Core.HttpHandlerAsyncResult">
            <summary>
            Handles the asynchronous result from the asynchronous http request handler.
            
            This specialized implementation allows the thread processing the request to
            signal to the awaiting thread that the request is completed while it may keep
            running in a modal loop.
            
            </summary>
        </member>
        <member name="T:Wisej.Core.IFileSystemProvider">
            <summary>
            Abstracts access to the file system.
            
            Implementations of this interface are used by the file dialogs
            and other components that need to interact with the file system.
            
            Wisej provides the built-in default implementation for the standard
            disk-based file system and a number of alternative implementations in
            the Wisej extensions, such as: Amazon S3, Google Drive, and Microsoft OneDrive.
            </summary>
        </member>
        <member name="P:Wisej.Core.IFileSystemProvider.Root">
            <summary>
            Returns or sets the root path for the file system.
            All file system operations in the implementation class
            are expected to be limited to the root.
            </summary>
        </member>
        <member name="P:Wisej.Core.IFileSystemProvider.Name">
            <summary>
            Returns or sets the name of this root.
            This is the name that should be shown to the user.
            </summary>
        </member>
        <member name="P:Wisej.Core.IFileSystemProvider.Icon">
            <summary>
            Returns or sets the icon that represents the
            file system.
            </summary>
        </member>
        <member name="P:Wisej.Core.IFileSystemProvider.IconSource">
            <summary>
            Returns or sets the icon name or URL that represents the
            file system.
            </summary>
        </member>
        <member name="M:Wisej.Core.IFileSystemProvider.GetDirectories(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Returns a list of directory paths that match the pattern and search options
            in the specified path.
            </summary>
            <param name="path">Path to search into.</param>
            <param name="pattern">Wild card pattern to match.</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> options.</param>
            <returns>A <see cref="T:ystem.Array"/> containing the full path of the directories that match the search pattern and search options.</returns>
        </member>
        <member name="M:Wisej.Core.IFileSystemProvider.GetFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Returns a list of file paths that match the pattern and search options
            in the specified path.
            </summary>
            <param name="path">Path to search into.</param>
            <param name="pattern">Wild card pattern to match.</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> options.</param>
            <returns>A <see cref="T:ystem.Array"/> containing the full path of the files that match the search pattern and search options.</returns>
        </member>
        <member name="M:Wisej.Core.IFileSystemProvider.GetAttributes(System.String)">
            <summary>
            Returns the <see cref="T:System.IO.FileAttributes"/> for the specified <paramref name="path"/>.
            </summary>
            <param name="path">File path for which to retrieve the <see cref="T:System.IO.FileAttributes"/>.</param>
            <returns>An instance of <see cref="T:System.IO.FileAttributes"/> with the relevant flags set.</returns>
        </member>
        <member name="M:Wisej.Core.IFileSystemProvider.CreateDirectory(System.String)">
            <summary>
            Creates the specified directory and sub-directories.
            </summary>
            <param name="path">Path of the directory to create.</param>
        </member>
        <member name="M:Wisej.Core.IFileSystemProvider.DeleteDirectory(System.String,System.Boolean)">
            <summary>
            Deletes the specified directory and, optionally, sub-directories.
            </summary>
            <param name="path">Path of the directory to delete.</param>
            <param name="recursive">Indicates whether to delete sub directories.</param>
        </member>
        <member name="M:Wisej.Core.IFileSystemProvider.GetCreationTime(System.String)">
            <summary>
            Returns the file's creation time.
            </summary>
            <param name="path">Path of the file to query.</param>
            <returns>A <see cref="T:Syste.DateTime"/> representing the timestamp of the file creation.</returns>
        </member>
        <member name="M:Wisej.Core.IFileSystemProvider.GetLastWriteTime(System.String)">
            <summary>
            Returns the last write timestamp for the specified file.
            </summary>
            <param name="path">Path of the file to query.</param>
            <returns>A <see cref="T:Syste.DateTime"/> representing the timestamp of the last time the file was written.</returns>
        </member>
        <member name="M:Wisej.Core.IFileSystemProvider.Exists(System.String)">
            <summary>
            Returns whether the specified file or directory exists.
            </summary>
            <param name="path">Path of the file or directory to check.</param>
            <returns>True of the file or directory exists.</returns>
        </member>
        <member name="M:Wisej.Core.IFileSystemProvider.GetFileSize(System.String)">
            <summary>
            Returns the size of the file.
            </summary>
            <param name="path">Path of the file to query.</param>
            <returns>The size of the file in bytes.</returns>
        </member>
        <member name="M:Wisej.Core.IFileSystemProvider.DeleteFile(System.String)">
            <summary>
            Deletes the specified file.
            </summary>
            <param name="path">Path of the file to delete.</param>
        </member>
        <member name="M:Wisej.Core.IFileSystemProvider.RenameFile(System.String,System.String)">
            <summary>
            Renames the specified file.
            </summary>
            <param name="path">Path of the file to rename.</param>
            <param name="newName">The new file name.</param>
        </member>
        <member name="M:Wisej.Core.IFileSystemProvider.RenameDirectory(System.String,System.String)">
            <summary>
            Renames the specified directory.
            </summary>
            <param name="path">Path of the directory to rename.</param>
            <param name="newName">The new directory name.</param>
        </member>
        <member name="M:Wisej.Core.IFileSystemProvider.Contains(System.String)">
            <summary>
            Checks whether the specified <paramref name="path"/> starts with the
            <see cref="P:Wisej.Core.IFileSystemProvider.Name"/> of this file system provider.
            </summary>
            <param name="path">Path of the file to check.</param>
            <returns>True if the specified path starts with the name of this file system provider.</returns>
        </member>
        <member name="M:Wisej.Core.IFileSystemProvider.MapPath(System.String)">
            <summary>
            Maps the virtual path to the corresponding physical path
            on the specific <see cref="T:Wisej.Core.IFileSystemProvider"/> implementation.
            </summary>
            <param name="path">Virtual path to map to the corresponding physical path.</param>
            <returns>The physical path for the <see cref="T:Wisej.Core.IFileSystemProvider"/> implementation.</returns>
        </member>
        <member name="M:Wisej.Core.IFileSystemProvider.OpenFileStream(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens the specified file for reading or writing.
            </summary>
            <param name="path">The path of the file to open.</param>
            <param name="mode">Specified if the file should be opened, created, overwritten or truncated.</param>
            <param name="access">Specified if the stream should be opened for reading or writing.</param>
            <returns>A <see cref="T:Systen.IO.Stream"/> that can be used to read or write the content of the file. </returns>
        </member>
        <member name="T:Wisej.Core.IWisejSynchronized">
            <summary>
            Provides locking functionality.
            </summary>
            <exclude/>
        </member>
        <member name="P:Wisej.Core.IWisejSynchronized.SyncLock">
            <summary>
            Returns the object to use to synchronize access.
            </summary>
        </member>
        <member name="P:Wisej.Core.IWisejSynchronized.IsDisposed">
            <summary>
            Returns whether the synchronized object has been disposed.
            </summary>
        </member>
        <member name="T:Wisej.Core.IWisejSynchronizedImplementation">
            <summary>
            Implementation for the IWisejSynchronized interface.
            </summary>
        </member>
        <member name="M:Wisej.Core.IWisejSynchronizedImplementation.Lock(Wisej.Core.IWisejSynchronized)">
            <summary>
            Acquires a lock.
            </summary>
            <param name="target">The synchronized target of the action.</param>
        </member>
        <member name="M:Wisej.Core.IWisejSynchronizedImplementation.Unlock(Wisej.Core.IWisejSynchronized)">
            <summary>
            Releases a lock.
            </summary>
            <param name="target">The synchronized target of the action.</param>
        </member>
        <member name="M:Wisej.Core.IWisejSynchronizedImplementation.TryLock(Wisej.Core.IWisejSynchronized)">
            <summary>
            Attemps to acquires a lock.
            </summary>
            <param name="target">The synchronized target of the action.</param>
            <returns>True of the lock was acquired.</returns>
        </member>
        <member name="M:Wisej.Core.IWisejSynchronizedImplementation.IsLocked(Wisej.Core.IWisejSynchronized)">
            <summary>
            Checks whether the current thread as acquired a lock.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.IWisejSynchronizedImplementation.Lock(Wisej.Core.IWisejSynchronized,System.Action)">
            <summary>
            Executes the action in a synchronized block.
            </summary>
            <param name="target">The synchronized target of the action.</param>
            <param name="action">The action to execute.</param>
            <exclude/>
        </member>
        <member name="M:Wisej.Core.IWisejSynchronizedImplementation.TryLock(Wisej.Core.IWisejSynchronized,System.Action)">
            <summary>
            Executes the action in a synchronized block only if the lock is successfully acquired.
            </summary>
            <param name="target">The synchronized target of the action.</param>
            <param name="action">The action to execute.</param>
            <exclude/>
            <returns>True of the lock was acquired.</returns>
        </member>
        <member name="T:Wisej.Core.IWisejExtenderProvider">
            <summary>
            Defines the interface for extending properties to other components in a container.
            </summary>
        </member>
        <member name="M:Wisej.Core.IWisejExtenderProvider.RenderDesignMode(Wisej.Core.IWisejComponent)">
            <summary>
            Renders the extended wisej properties for the specified component.
            </summary>
            <remarks>This method is used at design time to let the extenders affect the rendering.</remarks>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="T:Wisej.Core.IEventFilter">
            <summary>
            Defines the event filter interface to use with the <see cref="M:ApplicationBase.AddEventFilter"/> method.
            </summary>
        </member>
        <member name="M:Wisej.Core.IEventFilter.PreFilterEvent(Wisej.Core.WisejEventArgs)">
            <summary>
            Process an event before it is dispatched.
            </summary>
            <returns>true to stop the event from being dispatched; false to allow the event to continue to the next filter or control.</returns>
            <param name="e">An instance of <see cref="T:Wisej.Core.WisejEventArgs"/> containing the data for the event.</param>
        </member>
        <member name="T:Wisej.Core.MimeTypes">
            <summary>
            Maps document extensions to content MIME types.
            </summary>
        </member>
        <member name="M:Wisej.Core.MimeTypes.GetMimeType(System.String)">
            <summary>
            Returns the MIME mapping for the specified file name.
            </summary>
            <param name="fileName">The file name that is used to determine the MIME type.</param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.MimeTypes.SetMimeType(System.String,System.String)">
            <summary>
            Adds or changes the mime type for the specified file extension.
            </summary>
            <param name="extension">The file extension to add to the mime type list.</param>
            <param name="mimeType">The mime type to add to the mime type list.</param>
        </member>
        <member name="M:Wisej.Core.MimeTypes.IsKnownType(System.String)">
            <summary>
            Returns if the file extension corresponds to a known mime type.
            </summary>
            <param name="extension">The file extension to check.</param>
            <returns></returns>
        </member>
        <member name="T:Wisej.Core.NamespaceDoc">
            <summary>
            <para>
            Wisej.Core defines all the core functionality and interfaces in Wisej. Here you will find
            classes to handle theme definitions, dynamic objects, JSON serialization, and all the
            core interfaces used by Wisej components and controls.
            </para>
            
            <note type="alert">
            Using the classes in Wisej.Core presumes advances knowledge of Wisej architecture, JavaScript concepts,
            and browser technology.
            </note>
            </summary>
        </member>
        <member name="T:Wisej.Core.QueuedLocker">
            <summary>
            Fair locker. Threads are released in the order in which they
            acquire the lock.
            </summary>
        </member>
        <member name="T:Wisej.Core.SynchronizedList`1">
            <summary>
            Provides a thread-safe collection that contains objects of a type specified by the generic parameter as elements.
            </summary>
            <typeparam name="T">The type of object contained as items in the thread-safe collection.</typeparam>
        </member>
        <member name="M:Wisej.Core.SynchronizedList`1.#ctor(System.Int32,System.Collections.Generic.IEnumerable{`0},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.SynchronizedCollection" /> class that 
            contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied and 
            uses the specified <paramref name="syncLock"/> object to synchronize its internal operations.
            </summary>
            <param name="capacity">The optional number of element that the list can initially store.</param>
            <param name="collection">The optional collection whose elements are copied to the new list.</param>
            <param name="syncLock">The optional lock reference.</param>
        </member>
        <member name="P:Wisej.Core.SynchronizedList`1.Count">
            <summary>
            Gets the number of elements contained in the thread-safe collection.
            </summary>
            <returns>The number of elements contained in the thread-safe, read-only collection.</returns>
        </member>
        <member name="P:Wisej.Core.SynchronizedList`1.Item(System.Int32)">
            <summary>
            Gets an element from the thread-safe collection with a specified index.
            </summary>
            <returns>The object in the collection that has the specified <paramref name="index" />.</returns>
            <param name="index">The zero-based index of the element to be retrieved from the collection.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> specified is less than zero or greater than the number of items in the collection.</exception>
        </member>
        <member name="P:Wisej.Core.SynchronizedList`1.Items">
            <summary>
            Gets the list of elements contained in the thread-safe collection.
            </summary>
            <returns>The <see cref="T:System.Collections.Generic.IList" /> of elements that are contained in the thread-safe, read-only collection.</returns>
        </member>
        <member name="P:Wisej.Core.SynchronizedList`1.SyncRoot">
            <summary>
            Gets the object used to synchronize access to the thread-safe collection.
            </summary>
            <returns>An object used to synchronize access to the thread-safe collection.</returns>
        </member>
        <member name="M:Wisej.Core.SynchronizedList`1.Add(`0)">
            <summary>
            Adds an item to the thread-safe, read-only collection.
            </summary>
            <param name="item">The element to be added to the collection.</param>
            <exception cref="T:System.ArgumentException">The value set is null or is not of the correct generic type for the collection.</exception>
        </member>
        <member name="M:Wisej.Core.SynchronizedList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection to the end of the <see cref="T:System.Collections.Generic.List" />.
            </summary>
            <param name="collection">The collection whose elements should be added to the end of the <see cref="T:System.Collections.Generic.List" />. The collection itself cannot be null, but it can contain elements that are null, for reference types.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="collection" /> is null.</exception>
        </member>
        <member name="M:Wisej.Core.SynchronizedList`1.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Wisej.Core.SynchronizedList`1.Contains(`0)">
            <summary>
            Determines whether the collection contains an element with a specific value.
            </summary>
            <returns>true if the element value is found in the collection; otherwise false.</returns>
            <param name="item">The object to locate in the collection.</param>
            <exception cref="T:System.ArgumentException">The value set is null or is not of the correct generic type for the collection.</exception>
        </member>
        <member name="M:Wisej.Core.SynchronizedList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the collection to a specified array, starting at a particular index.
            </summary>
            <param name="array">The destination <see cref="T:System.Array" /> for the elements copied from the collection.</param>
            <param name="index">The zero-based index in the array at which copying begins.</param>
        </member>
        <member name="M:Wisej.Core.SynchronizedList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the synchronized collection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator" /> for objects of the type stored in the collection.</returns>
        </member>
        <member name="M:Wisej.Core.SynchronizedList`1.IndexOf(`0)">
            <summary>
            Returns the index of the first occurrence of a value in the collection.
            </summary>
            <returns>The zero-based index of the first occurrence of the value in the collection.</returns>
            <param name="item">Removes all items from the collection.</param>
            <exception cref="T:System.ArgumentException">The value set is null or is not of the correct generic type for the collection.</exception>
        </member>
        <member name="M:Wisej.Core.SynchronizedList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item into the collection at a specified index.
            </summary>
            <param name="index">The zero-based index of the element to be retrieved from the collection.</param>
            <param name="item">The object to be inserted into the collection as an element.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> specified is less than zero or greater than the number of items in the collection.</exception>
            <exception cref="T:System.ArgumentException">The value set is null or is not of the correct generic type for the collection.</exception>
        </member>
        <member name="M:Wisej.Core.SynchronizedList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts the elements of a collection into the <see cref="T:System.Collections.Generic.List" /> at the specified index.
            </summary>
            <param name="index">The zero-based index at which the new elements should be inserted.</param>
            <param name="collection">The collection whose elements should be inserted into the <see cref="T:System.Collections.Generic.List" />. The collection itself cannot be null, but it can contain elements that are null, for reference types.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="collection" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="index" /> is less than 0; or <paramref name="index" /> is greater than <see cref="P:System.Collections.Generic.List.Count" />.</exception>
        </member>
        <member name="M:Wisej.Core.SynchronizedList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specified item from the collection.
            </summary>
            <returns>true if item was successfully removed from the collection; otherwise, false.</returns>
            <param name="item">The object to remove from the collection.</param>
        </member>
        <member name="M:Wisej.Core.SynchronizedList`1.RemoveAt(System.Int32)">
            <summary>
            Removes an item at a specified index from the collection.
            </summary>
            <param name="index">The zero-based index of the element to be retrieved from the collection.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> specified is less than zero or greater than the number of items in the collection.</exception>
        </member>
        <member name="M:Wisej.Core.SynchronizedList`1.RemoveAll(System.Predicate{`0})">
            <summary>
            Removes all the elements that match the conditions defined by the specified predicate.
            </summary>
            <returns>The number of elements removed from the <see cref="T:System.Collections.Generic.List" /> .</returns>
            <param name="match">The <see cref="T:System.Predicate" /> delegate that defines the conditions of the elements to remove.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="match" /> is null.</exception>
        </member>
        <member name="M:Wisej.Core.SynchronizedList`1.TrimExcess">
            <summary>
            Sets the capacity to the actual number of elements in the <see cref="T:System.Collections.Generic.List" />, if that number is less than a threshold value.
            </summary>
        </member>
        <member name="M:Wisej.Core.SynchronizedList`1.Sort">
            <summary>
            Sorts the elements in the entire <see cref="T:System.Collections.Generic.List" /> using the default comparer.
            </summary>
            <exception cref="T:System.InvalidOperationException">The default comparer <see cref="P:System.Collections.Generic.Comparer.Default" /> cannot find an implementation of the <see cref="T:System.IComparable" /> generic interface or the <see cref="T:System.IComparable" /> interface for the type of the collection elements.</exception>
        </member>
        <member name="M:Wisej.Core.SynchronizedList`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in the entire <see cref="T:System.Collections.Generic.List" /> using the specified comparer.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer" /> implementation to use when comparing elements, or null to use the default comparer <see cref="P:System.Collections.Generic.Comparer.Default" />.</param>
            <exception cref="T:System.InvalidOperationException">
              <paramref name="comparer" /> is null, and the default comparer <see cref="P:System.Collections.Generic.Comparer.Default" /> cannot find implementation of the <see cref="T:System.IComparable" /> generic interface or the <see cref="T:System.IComparable" /> interface for the type of the collection elements.</exception>
            <exception cref="T:System.ArgumentException">The implementation of <paramref name="comparer" /> caused an error during the sort. For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</exception>
        </member>
        <member name="M:Wisej.Core.SynchronizedList`1.Sort(System.Comparison{`0})">
            <summary>
            Sorts the elements in the entire <see cref="T:System.Collections.Generic.List" /> using the specified <see cref="T:System.Comparison" />.
            </summary>
            <param name="comparison">The <see cref="T:System.Comparison" /> to use when comparing elements.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="comparison" /> is null.</exception>
            <exception cref="T:System.ArgumentException">The implementation of <paramref name="comparison" /> caused an error during the sort. For example, <paramref name="comparison" /> might not return 0 when comparing an item with itself.</exception>
        </member>
        <member name="M:Wisej.Core.SynchronizedList`1.BinarySearch(`0)">
            <summary>Searches the entire sorted <see cref="T:System.Collections.Generic.List" /> for an element using the default comparer and returns the zero-based index of the element.
            </summary>
            <returns>The zero-based index of <paramref name="item" /> in the sorted <see cref="T:System.Collections.Generic.List" />, if <paramref name="item" /> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <paramref name="item" /> or, if there is no larger element, the bitwise complement of <see cref="P:System.Collections.Generic.List.Count" />.</returns>
            <param name="item">The object to locate. The value can be null for reference types.</param>
            <exception cref="T:System.InvalidOperationException">The default comparer <see cref="P:System.Collections.Generic.Comparer.Default" /> cannot find an implementation of the <see cref="T:System.IComparable" /> generic interface or the <see cref="T:System.IComparable" /> interface for the type of the collection elements.</exception>
        </member>
        <member name="M:Wisej.Core.SynchronizedList`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Searches the entire sorted <see cref="T:System.Collections.Generic.List" /> for an element using the specified comparer and returns the zero-based index of the element.
            </summary>
            <returns>The zero-based index of <paramref name="item" /> in the sorted <see cref="T:System.Collections.Generic.List" />, if <paramref name="item" /> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <paramref name="item" /> or, if there is no larger element, the bitwise complement of <see cref="P:System.Collections.Generic.List.Count" />.</returns>
            <param name="item">The object to locate. The value can be null for reference types.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer" /> implementation to use when comparing elements; or null to use the default comparer <see cref="P:System.Collections.Generic.Comparer.Default" />.</param>
            <exception cref="T:System.InvalidOperationException">
              <paramref name="comparer" /> is null, and the default comparer <see cref="P:System.Collections.Generic.Comparer.Default" /> cannot find an implementation of the <see cref="T:System.IComparable" /> generic interface or the <see cref="T:System.IComparable" /> interface for the type of the collection elements.</exception>
        </member>
        <member name="M:Wisej.Core.SynchronizedList`1.ForEach(System.Action{`0})">
            <summary>
            Performs the specified action on each element of the <see cref="T:System.Collections.Generic.List" />.
            </summary>
            <param name="action">The <see cref="T:System.Action" /> delegate to perform on each element of the <see cref="T:System.Collections.Generic.List" />.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="action" /> is null.</exception>
        </member>
        <member name="M:Wisej.Core.SynchronizedList`1.ToArray">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.List" /> to a new array.
            </summary>
            <returns>An array containing copies of the elements of the <see cref="T:System.Collections.Generic.List" />.</returns>
        </member>
        <member name="M:Wisej.Core.SynchronizedList`1.Find(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns 
            the first occurrence within the entire <see cref="T:System.Collections.Generic.List" />.
            </summary>
            <returns>The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value.</returns>
            <param name="match">The <see cref="T:System.Predicate" /> delegate that defines the conditions of the element to search for.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="match" /> is null.</exception>
        </member>
        <member name="M:Wisej.Core.SynchronizedList`1.Find(System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns 
            the first occurrence within the entire <see cref="T:System.Collections.Generic.List" />.
            </summary>
            <returns>The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value.</returns>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="match">The <see cref="T:System.Predicate" /> delegate that defines the conditions of the element to search for.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="match" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="startIndex" /> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List" />.</exception>
        </member>
        <member name="M:Wisej.Core.SynchronizedList`1.FindAll(System.Predicate{`0})">
            <summary>
            Retrieves all the elements that match the conditions defined by the specified predicate.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.List" /> containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty <see cref="T:System.Collections.Generic.List" />.</returns>
            <param name="match">The <see cref="T:System.Predicate" /> delegate that defines the conditions of the elements to search for.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="match" /> is null.</exception>
        </member>
        <member name="M:Wisej.Core.SynchronizedList`1.FindIndex(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire <see cref="T:System.Collections.Generic.List" />.
            </summary>
            <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</returns>
            <param name="match">The <see cref="T:System.Predicate" /> delegate that defines the conditions of the element to search for.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="match" /> is null.</exception>
        </member>
        <member name="M:Wisej.Core.SynchronizedList`1.FindIndex(System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Collections.Generic.List" /> that extends from the specified index to the last element.
            </summary>
            <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</returns>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="match">The <see cref="T:System.Predicate" /> delegate that defines the conditions of the element to search for.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="match" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="startIndex" /> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List" />.</exception>
        </member>
        <member name="M:Wisej.Core.SynchronizedList`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Collections.Generic.List" /> that starts at the specified index and contains the specified number of elements.
            </summary>
            <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</returns>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <param name="match">The <see cref="T:System.Predicate" /> delegate that defines the conditions of the element to search for.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="match" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="startIndex" /> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List" />; or <paramref name="count" /> is less than 0; or <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in the <see cref="T:System.Collections.Generic.List" />.</exception>
        </member>
        <member name="M:Wisej.Core.SynchronizedList`1.FindLast(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire <see cref="T:System.Collections.Generic.List" />.
            </summary>
            <returns>The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value.</returns>
            <param name="match">The <see cref="T:System.Predicate" /> delegate that defines the conditions of the element to search for.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="match" /> is null.</exception>
        </member>
        <member name="M:Wisej.Core.SynchronizedList`1.FindLast(System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire <see cref="T:System.Collections.Generic.List" />.
            </summary>
            <returns>The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value.</returns>
            <param name="match">The <see cref="T:System.Predicate" /> delegate that defines the conditions of the element to search for.</param>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="match" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="startIndex" /> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List" />.</exception>
        </member>
        <member name="M:Wisej.Core.SynchronizedList`1.Sort(System.Collections.Generic.IComparer{`0},System.Func{System.Int32,System.Int32,System.Boolean})">
            <summary>
            Sorts the elements in the entire <see cref="T:System.Collections.Generic.List" /> using the specified comparer
            and a related <see cref="T:System.Collections.IList"/> to sort in sync with this collection.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer" /> implementation to use when comparing elements, or null to use the default comparer <see cref="P:System.Collections.Generic.Comparer.Default" />.</param>
            <param name="swapCallback">An optional callback method, invoked on every swap. If the callback returns true to indicate that it handled the swap, the default swap is not performed.</param>
            <exception cref="T:System.InvalidOperationException">
              <paramref name="comparer" /> is null, and the default comparer <see cref="P:System.Collections.Generic.Comparer.Default" /> cannot find implementation of the <see cref="T:System.IComparable" /> generic interface or the <see cref="T:System.IComparable" /> interface for the type of the collection elements.</exception>
            <exception cref="T:System.ArgumentException">The implementation of <paramref name="comparer" /> caused an error during the sort. For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</exception>
        </member>
        <member name="M:Wisej.Core.SynchronizedList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the synchronized collection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator" /> for objects of the type stored in the collection.</returns>
        </member>
        <member name="P:Wisej.Core.SynchronizedList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            Gets a value that indicates whether the collection is read only.
            </summary>
            <returns>false</returns>
        </member>
        <member name="P:Wisej.Core.SynchronizedList`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value that indicates whether the collection is thread safe.
            </summary>
            <returns>true</returns>
        </member>
        <member name="P:Wisej.Core.SynchronizedList`1.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets the object used to synchronize access to the thread-safe collection.
            </summary>
            <returns>An object used to synchronize access to the thread-safe collection.</returns>
        </member>
        <member name="M:Wisej.Core.SynchronizedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the collection to a specified array, starting at a particular index.
            </summary>
            <param name="array">The destination <see cref="T:System.Array" /> for the elements copied from the collection.</param>
            <param name="index">The zero-based index in the array at which copying begins.</param>
        </member>
        <member name="P:Wisej.Core.SynchronizedList`1.System#Collections#IList#IsFixedSize">
            <summary>
            Gets a value that indicates whether the collection is fixed in size.
            </summary>
            <returns>false</returns>
        </member>
        <member name="P:Wisej.Core.SynchronizedList`1.System#Collections#IList#IsReadOnly">
            <summary>
            Gets a value that indicates whether the collection is read only.
            </summary>
            <returns>false</returns>
        </member>
        <member name="P:Wisej.Core.SynchronizedList`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the item at a specified zero-based index.
            </summary>
            <returns>The item with the specified <paramref name="index" />.</returns>
            <param name="index">The zero-based index of the element to be retrieved from the collection.</param>
            <exception cref="T:System.ArgumentException">The value set is null or is not of the correct generic type for the collection.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> specified is less than zero or greater than the number of items in the collection.</exception>
        </member>
        <member name="M:Wisej.Core.SynchronizedList`1.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds an element to the collection.
            </summary>
            <returns>The position into which the new element was inserted.</returns>
            <param name="value">The object to add to the collection.</param>
        </member>
        <member name="M:Wisej.Core.SynchronizedList`1.System#Collections#IList#Contains(System.Object)">
            <summary>
            Determines whether the collection contains an element with a specific value.
            </summary>
            <returns>true if the element <paramref name="value" /> is found in the collection; otherwise false.</returns>
            <param name="value">The object to locate in the collection.</param>
            <exception cref="T:System.ArgumentException">
              <paramref name="value" /> is not an object of the type contained in the collection.</exception>
        </member>
        <member name="M:Wisej.Core.SynchronizedList`1.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Determines the zero-based index of an element in the collection.</summary>
            <returns>The index of the <paramref name="value" /> if found in the collection; otherwise, -1.
            </returns>
            <param name="value">The element in the collection whose index is being determined.</param>
        </member>
        <member name="M:Wisej.Core.SynchronizedList`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Inserts an object into the collection at a specified index.</summary>
            <param name="index">The zero-based index at which <paramref name="value" /> is to be inserted.
            </param>
            <param name="value">The object to insert into the collection.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> specified is less than zero or greater than the number of items in the collection.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="value" /> set is null or is not of the correct generic type for the collection.</exception>
        </member>
        <member name="M:Wisej.Core.SynchronizedList`1.System#Collections#IList#Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specified object as an element from the collection.
            </summary>
            <param name="value">The object to be removed from the collection.</param>
        </member>
        <member name="M:Wisej.Core.SynchronizedListExtensions.ToSynchronizedList``1(System.Collections.Generic.IEnumerable{``0},System.Object)">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.List" /> from an <see cref="T:System.Collections.Generic.IEnumerable" />.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.List" /> that contains elements from the input sequence.</returns>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable" /> to create a <see cref="T:System.Collections.Generic.List" /> from.</param>
            <param name="syncLock">The lock reference.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="source" /> is null.</exception>
        </member>
        <member name="T:Wisej.Core.DepthLimitedQuickSort`1">
            <summary>
            Depth limited quick sort implementation.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Wisej.Core.DepthLimitedQuickSort`1.Sort(System.Collections.Generic.IList{`0},System.Collections.Generic.IComparer{`0},System.Int32,System.Int32,System.Int32,System.Func{System.Int32,System.Int32,System.Boolean})">
            <summary>
            Sorts the specified <para>items</para> using the specified <para>comparer</para>.
            </summary>
            <param name="items">Items to sort.</param>
            <param name="comparer">Comparer to use to compare items.</param>
            <param name="left">Left index.</param>
            <param name="right">Right index.</param>
            <param name="depthLimit">Recursion limit.</param>
            <param name="swapCallback">Swap callback.</param>
        </member>
        <member name="T:Wisej.Core.WisejSerializerOptions">
            <summary>
            Options for WisejSerializer.
            </summary>
        </member>
        <member name="F:Wisej.Core.WisejSerializerOptions.None">
            <summary>
            No options.
            </summary>
        </member>
        <member name="F:Wisej.Core.WisejSerializerOptions.Formatted">
            <summary>
            The output JSON string is pretty.
            </summary>
        </member>
        <member name="F:Wisej.Core.WisejSerializerOptions.CamelCase">
            <summary>
            The names of the fields are serialized using camel casing: first char is lowercase (default).
            </summary>
        </member>
        <member name="F:Wisej.Core.WisejSerializerOptions.IgnoreNulls">
            <summary>
            Null values are not serialized.
            </summary>
        </member>
        <member name="T:Wisej.Core.WisejSynchronizationContext">
            <summary>
            Extends the default threading synchronization context to
            support asynchronous calls while preserving the Wisej context.
            </summary>
        </member>
        <member name="T:Wisej.Core.Design.DesignerActionListAttribute">
            <summary>
            Registers a property with the automatic
            designer action list feature. When a property
            has this attribute it will be automatically added
            to the action list panel.
            </summary>
        </member>
        <member name="M:Wisej.Core.Design.DesignerActionListAttribute.IsDesignerActionListProperty(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Returns true if the property has this attribute.
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="T:Wisej.Core.Design.IHtmlRenderingService">
            <summary>
            Provides design-time services to the html renderer.
            </summary>
        </member>
        <member name="P:Wisej.Core.Design.IHtmlRenderingService.Theme">
            <summary>
            The current theme loaded in the designer.
            </summary>
        </member>
        <member name="P:Wisej.Core.Design.IHtmlRenderingService.Platform">
            <summary>
            The current platform implemented by the designer top container.
            </summary>
        </member>
        <member name="M:Wisej.Core.Design.IHtmlRenderingService.LoadTheme(System.String)">
            <summary>
            Loads the them into the renderer.
            </summary>
            <param name="name">the name of the theme to load in the designer.</param>
        </member>
        <member name="P:Wisej.Core.Design.IHtmlRenderingService.IsDisposed">
            <summary>
            Returns true if the service has been disposed.
            </summary>
        </member>
        <member name="M:Wisej.Core.Design.IHtmlRenderingService.Render(Wisej.Core.IWisejControl,Wisej.Core.DynamicObject,System.Action{System.Drawing.Image,System.Object})">
            <summary>
            Renders the wisej control into an image.
            </summary>
            <param name="control">Control to render.</param>
            <param name="config">JSON configuration of the control to render.</param>
            <param name="callback">Callback that will receive the renderer image.</param>
        </member>
        <member name="T:Wisej.Core.Design.IWisejDesignPainter">
            <summary>
            Wisej design-time painters implement this interface.
            </summary>
        </member>
        <member name="M:Wisej.Core.Design.IWisejDesignPainter.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Processes WM_PAINT and WM_NCPAINT messages.
            </summary>
            <param name="m"></param>
        </member>
        <member name="P:Wisej.Core.Design.IWisejDesignPainter.Image">
            <summary>
            Returns the last image that represents the control.
            </summary>
        </member>
        <member name="T:Wisej.Core.Design.HtmlDesignSurfaceAttribute">
            <summary>
            Declares the html surface to use to render the control.
            </summary>
        </member>
        <member name="T:Wisej.Core.Design.IWisejDesignTarget">
            <summary>
            Allows a Wisej control to receive WndProc messages
            while being designed. Controls can use this interface
            to react to user actions while being designed.
            </summary>
        </member>
        <member name="M:Wisej.Core.Design.IWisejDesignTarget.DesignerWndProc(System.Windows.Forms.Message@)">
            <summary>
            Processes Windows mouse messages forwarded by the designer.
            </summary>
            <param name="m">The <see cref="T:System.Windows.Forms.Message"/> forwarded by the designer.</param>
            <returns>Returns true to prevent the base class from processing the message.</returns>
        </member>
        <member name="T:Wisej.Core.HashChangedEventHandler">
            <summary>
            Represents the method that will handle the  <see cref="E:Wisej.Base.ApplicationBase.HashChanged" /> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Wisej.Core.HashChangedEventArgs" /> that contains the event data.</param>
        </member>
        <member name="T:Wisej.Core.HashChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Wisej.Base.ApplicationBase.HashChanged" /> event.
            </summary>
        </member>
        <member name="M:Wisej.Core.HashChangedEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Wisej.Base.HashChangedEventArgs" /> class.
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Wisej.Core.HashChangedEventArgs.Hash">
            <summary>
            The hash string from the client.
            </summary>
        </member>
        <member name="T:Wisej.Core.ResponsiveProfileChangedEventHandler">
            <summary>
            Represents the method that will handle the Application.ResponsiveProfileChanged event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Wisej.Core.ResponsiveProfileChangedEventArgs" /> that contains the event data.</param>
        </member>
        <member name="T:Wisej.Core.ResponsiveProfileChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Wisej.Core.ApplicationBase.ResponsiveProfileChanged" /> event.
            </summary>
        </member>
        <member name="M:Wisej.Core.ResponsiveProfileChangedEventArgs.#ctor(Wisej.Core.ClientProfile,Wisej.Core.ClientProfile)">
            <summary>
            Initializes a new instance of the <see cref="T:Wisej.Core.ResponsiveProfileChangedEventArgs" /> class.
            </summary>
            <param name="oldValue"></param>
            <param name="newValue"></param>
        </member>
        <member name="P:Wisej.Core.ResponsiveProfileChangedEventArgs.CurrentProfile">
            <summary>
            The new active profile.
            </summary>
        </member>
        <member name="P:Wisej.Core.ResponsiveProfileChangedEventArgs.PreviousProfile">
            <summary>
            The previously active profile.
            </summary>
        </member>
        <member name="T:Wisej.Core.ClientBrowser">
            <summary>
            Properties of the client browser currently
            interacting with the application.
            </summary>
        </member>
        <member name="P:Wisej.Core.ClientBrowser.Type">
            <summary>
            Browser type. Can be one of "IE", "Edge", "Chrome", "Opera", "Firefox", "Safari", "Other".
            </summary>
        </member>
        <member name="P:Wisej.Core.ClientBrowser.Version">
            <summary>
            Browser version.
            </summary>
        </member>
        <member name="P:Wisej.Core.ClientBrowser.OS">
            <summary>
            Client OS. Can be one of "iOS", "Android", "WebOS", "BlackBerry", "MacOS", "Linux", "Windows", "Unix", "Other".
            </summary>
        </member>
        <member name="P:Wisej.Core.ClientBrowser.Device">
            <summary>
            Device type. Can be one of "Mobile", "Tablet" or "Desktop".
            </summary>
        </member>
        <member name="P:Wisej.Core.ClientBrowser.Language">
            <summary>
            Client language.
            </summary>
        </member>
        <member name="P:Wisej.Core.ClientBrowser.Size">
            <summary>
            Browser size.
            
            This is the window size, which can be different from the device (or screen) size.
            </summary>
        </member>
        <member name="P:Wisej.Core.ClientBrowser.ScreenSize">
            <summary>
            Screen size.
            </summary>
        </member>
        <member name="P:Wisej.Core.ClientBrowser.PixelRatio">
            <summary>
            Returns the ratio of the resolution in physical pixels to the resolution
            in CSS pixels for the current display device.
            </summary>
        </member>
        <member name="P:Wisej.Core.ClientBrowser.IsSecure">
            <summary>
            Returns true if the connection is secure.
            </summary>
        </member>
        <member name="P:Wisej.Core.ClientBrowser.IsFullScreen">
            <summary>
            Returns true if the browser is in full screen mode.
            </summary>
        </member>
        <member name="P:Wisej.Core.ClientBrowser.CultureInfo">
            <summary>
            Returns the locale declared in the application configuration file
            or detected from the client browser.
            </summary>
        </member>
        <member name="P:Wisej.Core.ClientBrowser.Features">
            <summary>
            Returns the set of features supported/not-supported by the browser.
            Currently we detect: 
            geolocation, webSocket, fullScreen, speechSynthesis, speechRecognition, notification,
            fullScreen, browserStorage.
            </summary>
        </member>
        <member name="P:Wisej.Core.ClientBrowser.TimezoneOffset">
            <summary>
            Returns the time difference between UTC time and local time, in minutes.
            </summary>
        </member>
        <member name="F:Wisej.Core.ClientBrowser.LocalStorage">
            <summary>
            Returns an instance of the <see cref="F:Wisej.Core.ClientBrowser.LocalStorage"/> class
            that represents the "localStorage" object in the browser.
            </summary>
        </member>
        <member name="F:Wisej.Core.ClientBrowser.SessionStorage">
            <summary>
            Returns an instance of the <see cref="F:Wisej.Core.ClientBrowser.SessionStorage"/> class
            that represents the "sessionStorage" object in the browser.
            </summary>
        </member>
        <member name="F:Wisej.Core.ClientBrowser.CookieStorage">
            <summary>
            Returns an instance of the <see cref="F:Wisej.Core.ClientBrowser.CookieStorage"/> class
            that represents the "cookies" storage in the browser.
            </summary>
        </member>
        <member name="F:Wisej.Core.ClientBrowser.culture">
            <summary>
            The culture configured in the application configuration json.
            </summary>
        </member>
        <member name="M:Wisej.Core.ClientBrowser.#ctor(Wisej.Core.Configuration)">
            <summary>
            Creates an instance of ClientBrowser.
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:Wisej.Core.ClientBrowser.Update(System.Object)">
            <summary>
            Updates the client metrics.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Wisej.Core.ClientBrowser.LoadClientProfiles(System.String)">
            <summary>
            Returns the merged default profiles + custom profiles.
            </summary>
            <param name="configPath"></param>
        </member>
        <member name="T:Wisej.Core.ClientPlatform">
            <summary>
            Represents the client platform used to render the widgets.
            </summary>
        </member>
        <member name="M:Wisej.Core.ClientPlatform.#ctor(System.Type)">
            <summary>
            Creates a new instance of ClientPlatform from the
            PlatformProvider attribute declared on the specified type.
            </summary>
            <param name="type"></param>
        </member>
        <member name="P:Wisej.Core.ClientPlatform.Name">
            <summary>
            The name of this platform configuration.
            </summary>
        </member>
        <member name="P:Wisej.Core.ClientPlatform.Provider">
            <summary>
            The platform provider.
            </summary>
        </member>
        <member name="P:Wisej.Core.ClientPlatform.StyleSheets">
            <summary>
            List of style sheets associated with the platform.
            </summary>
        </member>
        <member name="P:Wisej.Core.ClientPlatform.JavaScripts">
            <summary>
            List of javascript files associated with the platform.
            </summary>
        </member>
        <member name="P:Wisej.Core.ClientPlatform.Version">
            <summary>
            Returns the file version of the 
            </summary>
        </member>
        <member name="M:Wisej.Core.ClientPlatform.LoadPlatform(Wisej.Core.PlatformProvider)">
            <summary>
            Loads the configuration stored in the platform json configuration files.
            </summary>
            <param name="provider"></param>
        </member>
        <member name="T:Wisej.Core.ClientProfile">
            <summary>
            Definition of the client device.
            </summary>
        </member>
        <member name="P:Wisej.Core.ClientProfile.Name">
            <summary>
            Name of the profile.
            </summary>
        </member>
        <member name="P:Wisej.Core.ClientProfile.MinWidth">
            <summary>
            Minimum browser width.
            </summary>
        </member>
        <member name="P:Wisej.Core.ClientProfile.MaxWidth">
            <summary>
            Maximum browser width.
            </summary>
        </member>
        <member name="P:Wisej.Core.ClientProfile.MinScreenWidth">
            <summary>
            Minimum screen width.
            </summary>
        </member>
        <member name="P:Wisej.Core.ClientProfile.MaxScreenWidth">
            <summary>
            Maximum screen width.
            </summary>
        </member>
        <member name="P:Wisej.Core.ClientProfile.Landscape">
            <summary>
            Device landscape mode.
            </summary>
        </member>
        <member name="P:Wisej.Core.ClientProfile.DesignSkin">
            <summary>
            Name of the skin used by the designer when this profile is active.
            </summary>
        </member>
        <member name="P:Wisej.Core.ClientProfile.DesignRect">
            <summary>
            The inner usable design rectangle. Used when the design skin is set.
            </summary>
        </member>
        <member name="P:Wisej.Core.ClientProfile.Device">
            <summary>
            Device type.
            </summary>
        </member>
        <member name="P:Wisej.Core.ClientProfile.UserAgent">
            <summary>
            User agent string.
            </summary>
        </member>
        <member name="P:Wisej.Core.ClientProfile.UserAgentRegex">
            <summary>
            Regular expression used to the match the profile at runtime.
            </summary>
        </member>
        <member name="P:Wisej.Core.ClientProfile.DesignSkinImage">
            <summary>
            Returns the skin image for the designer.
            </summary>
        </member>
        <member name="M:Wisej.Core.ClientProfile.ToString">
            <summary>
            Returns a string that represents the <see cref="T:Wisej.Core.ClientProfile" /> values.
            </summary>
            <returns>A <see cref="T:System.String" /> that represent the type and state of the instance.</returns>
        </member>
        <member name="M:Wisej.Core.ClientProfile.#ctor(System.Object)">
            <summary>
            Initialize the ClientProfile from the deserialized json object.
            </summary>
            <param name="definition"></param>
        </member>
        <member name="M:Wisej.Core.ClientProfile.Match(System.String,System.String,System.Drawing.Size,System.Drawing.Size)">
            <summary>
            Checks whether the profile is a valid match.
            </summary>
            <param name="device">Device type: Mobile, Desktop, Tablet, ...</param>
            <param name="userAgent">User agent string.</param>
            <param name="browserSize">Browser (window) size.</param>
            <param name="screenSize">Screen size.</param>
            <returns></returns>
        </member>
        <member name="T:Wisej.Core.ClientTheme">
            <summary>
            Represents a Wisej theme.
            </summary>
        </member>
        <member name="M:Wisej.Core.ClientTheme.#ctor(System.String)">
            <summary>
            Default private constructor.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Wisej.Core.ClientTheme.#ctor(System.String,System.String)">
            <summary>
            Constructs a new theme from the name and JSON definition.
            </summary>
            <param name="name"></param>
            <param name="json"></param>
        </member>
        <member name="M:Wisej.Core.ClientTheme.#ctor(System.String,Wisej.Core.ClientTheme)">
            <summary>
            Constructs a new theme from the base theme.
            </summary>
            <param name="name"></param>
            <param name="baseTheme"></param>
        </member>
        <member name="P:Wisej.Core.ClientTheme.Name">
            <summary>
            The name of the theme.
            </summary>
        </member>
        <member name="M:Wisej.Core.ClientTheme.GetColor(System.String,System.String,System.String)">
            <summary>
            Returns the resolved color defined in the theme for the
            specified appearance, property or style name and optionally the state.
            </summary>
            <param name="appearance">The appearance path that identifies the component in the theme. Nested appearances can be specified using a forward slash: i.e. window/captionbar.</param>
            <param name="name">The name of the property or the style value to query.</param>
            <param name="state">The name of the state to query. It's optional. The default is "default".</param>
            <returns>A <see cref="T:System.Drawing.Color"/> representing the color in the theme.</returns>
        </member>
        <member name="M:Wisej.Core.ClientTheme.GetColor(System.String)">
            <summary>
            Returns the resolved theme color from the color list.
            </summary>
            <param name="name">The name of the color to resolve from the color list.</param>
            <returns>A <see cref="T:System.Drawing.Color"/> representing the color in the theme.</returns>
        </member>
        <member name="M:Wisej.Core.ClientTheme.TranslateColor(System.Drawing.Color)">
            <summary>
            Returns the resolved <see cref="T:System.Drawing.Color"/> with the proper RGB values.
            If the color specified in <para>color</para> is a theme color, the value
            is resolved from the current theme, otherwise the original color is returned.
            </summary>
            <param name="color">The <see cref="T:System.Drawing.Color"/> to resolve to a usable value.</param>
            <returns>A <see cref="T:System.Drawing.Color"/> instance with the resolved RGB values.</returns>
        </member>
        <member name="M:Wisej.Core.ClientTheme.IsThemeColor(System.Drawing.Color)">
            <summary>
            Returns true if the <paramref name="color"/> is a theme color.
            </summary>
            <remarks>
            <para>
            Since the theme may also define <see cref="T:System.Drawing.SystemColors"/>, using <see cref="M:Wisej.Core.ClientTheme.IsThemeColor(System.Drawing.Color)"/> on a
            system color returns false, but the rendering on the browser will use the color in the theme, if defined.
            </para>
            </remarks>
            <param name="color">Color to check.</param>
            <returns>True if <paramref name="color"/> is a theme color.</returns>
        </member>
        <member name="M:Wisej.Core.ClientTheme.IsThemeFont(System.Drawing.Font)">
            <summary>
            Returns true if the <paramref name="font"/> is a theme font.
            </summary>
            <remarks>
            Theme fonts (font's with the <see cref="P:System.Drawing.Font.OriginalFontName"/> starting with "@") are
            always rendered using the definition in the theme for their size and style. However, an application
            may use a theme font and change the size and style. In this case, the <see cref="P:System.Drawing.Font.OriginalFontName"/> is
            the theme name without the "@". If the name of the font (which could be a system name like "Arial") matches
            a theme font, Wisej will use the theme font but it uses the size and style set by the application.
            </remarks>
            <param name="font">Font to check.</param>
            <returns>True if <paramref name="font"/> is a theme font.</returns>
        </member>
        <member name="M:Wisej.Core.ClientTheme.TranslateFont(System.Drawing.Font)">
            <summary>
            Returns the resolved <see cref="T:System.Drawing.Font"/> from the 
            theme font. If the font is a theme font, the value is resolved from current theme.
            </summary>
            <param name="font">The <see cref="T:System.Drawing.Font"/> to resolve to a usable instance.</param>
            <returns>A <see cref="T:System.Drawing.Font"/> instance that can be used directly.</returns>
        </member>
        <member name="M:Wisej.Core.ClientTheme.GetImage(System.String,System.String,System.String)">
            <summary>
            Returns the resolved image defined in the theme for the
            specified appearance, property or style name and optionally the state.
            </summary>
            <param name="appearance">The appearance path that identifies the component in the theme. Nested appearances can be specified using a forward slash: i.e. window/captionbar.</param>
            <param name="name">The name of the property or the style value to query.</param>
            <param name="state">The name of the state to query. It's optional. The default is "default".</param>
            <returns>A <see cref="T:System.Drawing.Image"/> representing the queried image or null if not found. SVG images at runtime always return null, they are resolved only at design time.</returns>
        </member>
        <member name="M:Wisej.Core.ClientTheme.GetImage(System.String)">
            <summary>
            Returns the resolved image defined from the image list.
            </summary>
            <param name="name"></param>
            <returns>A <see cref="T:System.Drawing.Image"/> representing the queried image or null if not found. SVG images at runtime always return null, they are resolved only at design time.</returns>
        </member>
        <member name="M:Wisej.Core.ClientTheme.GetFont(System.String,System.String,System.String)">
            <summary>
            Returns the resolved font defined in the theme for the
            specified appearance, property name and optionally the state.
            </summary>
            <param name="appearance">The appearance path that identifies the component in the theme. Nested appearances can be specified using a forward slash: i.e. window/captionbar.</param>
            <param name="name">The name of the property value to query.</param>
            <param name="state">The name of the state to query. It's optional. The default is "default".</param>
            <returns>A <see cref="T:System.Drawing.Font"/> representing the queried font or null if not found.</returns>
        </member>
        <member name="M:Wisej.Core.ClientTheme.GetFont(System.String)">
            <summary>
            Returns the resolved font defined from the font list.
            </summary>
            <param name="name"></param>
            <returns>A <see cref="T:System.Drawing.Font"/> representing the queried font or null if not found.</returns>
        </member>
        <member name="M:Wisej.Core.ClientTheme.GetStyle``1(System.String,System.String,System.String)">
            <summary>
            Returns the style value for the specified name and state within the specified appearance key.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the value to retrieve.</typeparam>
            <param name="appearance">The name of the appearance in the theme. Child component appearances can be specified using the forward slash, i.e. "button/icon".</param>
            <param name="name">The name of the property to retrieve.</param>
            <param name="state">The state that defines the property. It can omitted, the default state is "default".</param>
            <returns>The typed value of the requested style, or default(T) if not found.</returns>
        </member>
        <member name="M:Wisej.Core.ClientTheme.GetProperty``1(System.String,System.String,System.String)">
            <summary>
            Returns the property value for the specified name and state within the specified appearance key.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the value to retrieve.</typeparam>
            <param name="appearance">The name of the appearance in the theme. Child component appearances can be specified using the forward slash, i.e. "button/icon".</param>
            <param name="name">The name of the property to retrieve.</param>
            <param name="state">The state that defines the property. It can omitted, the default state is "default".</param>
            <returns>The typed value of the requested property, or default(T) if not found.</returns>
        </member>
        <member name="M:Wisej.Core.ClientTheme.GetInsets(System.String,System.String,System.Boolean)">
            <summary>
            Returns the size of the inset border and padding.
            </summary>
            <param name="appearance">The name of the appearance in the theme. Child component appearances can be specified using the forward slash, i.e. "button/icon".</param>
            <param name="state">The state that defines the property. It can omitted, the default state is "default".</param>
            <param name="includePadding">Whether to include padding in the insets dimension.</param>
            <returns>Dimension of the border and optionally the padding as a <see cref="T:System.Windows.Forms.Padding"/> value</returns>
        </member>
        <member name="M:Wisej.Core.ClientTheme.ApplyThemeMixins(System.Boolean,System.String[])">
            <summary>
            Merges the mixin theme extensions with the theme.
            </summary>
            <param name="designMode">If designMode = true, the theme is regenerated from the original JSON string. 
            At design time it is possible to change the extensions applied to an already loaded theme.</param>
            <param name="mixins">Optional list of theme mixins. If null, the default theme mixins are always applied.</param>
        </member>
        <member name="M:Wisej.Core.ClientTheme.ApplyThemeMixins(System.Collections.IList,System.Boolean)">
            <summary>
            Merges the mixin theme extensions with the theme.
            </summary>
            <param name="mixins">List of mixins to apply to the theme.</param>
            <param name="designMode">If designMode = true, the theme is regenerated from the original JSON string. 
            At design time it is possible to change the extensions applied to an already loaded theme.</param>
        </member>
        <member name="P:Wisej.Core.ClientTheme.IsMixin">
            <summary>
            Returns if the theme is a mixin.
            </summary>
        </member>
        <member name="P:Wisej.Core.ClientTheme.FilePath">
            <summary>
            The file path where the theme was loaded from.
            If it was loaded from embedded resources this is null.
            </summary>
        </member>
        <member name="F:Wisej.Core.ClientTheme.Timestamp">
            <summary>
            When this instance of ClientTheme was last loaded.
            </summary>
        </member>
        <member name="P:Wisej.Core.ClientTheme.ProjectPath">
            <summary>
            Design time project root path.
            </summary>
        </member>
        <member name="P:Wisej.Core.ClientTheme.ThemesPath">
            <summary>
            Design time application root path.
            </summary>
        </member>
        <member name="P:Wisej.Core.ClientTheme.Appearances">
            <summary>
            Theme appearances.
            </summary>
        </member>
        <member name="P:Wisej.Core.ClientTheme.Colors">
            <summary>
            Theme colors.
            </summary>
        </member>
        <member name="P:Wisej.Core.ClientTheme.Images">
            <summary>
            Theme images.
            </summary>
        </member>
        <member name="P:Wisej.Core.ClientTheme.Fonts">
            <summary>
            Theme fonts.
            </summary>
        </member>
        <member name="F:Wisej.Core.ClientTheme.MetricsCache">
            <summary>
            Cache repository for the ClientThemeReader.
            </summary>
        </member>
        <member name="M:Wisej.Core.ClientTheme.GetInstance(System.String)">
            <summary>
            Retrieves the ClientTheme from the cache or loads it
            from a file in the application /Themes directory or from the embedded resources
            in any loaded assembly marked with the assembly:WisejResourcesAttribute.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ClientTheme.GetThemeFilePath(System.String)">
            <summary>
            Returns the full path of the theme definition file, it exists.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ClientTheme.Clone(System.String)">
            <summary>
            Clones the current theme to a new theme with the new name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ClientTheme.LoadTheme(System.String)">
            <summary>
            Initializes the theme from the JSON definition.
            </summary>
            <param name="json"></param>
        </member>
        <member name="M:Wisej.Core.ClientTheme.Wisej#Core#IWisejSerializable#Serialize(System.IO.TextWriter,Wisej.Core.WisejSerializerOptions)">
            <summary>
            Serialize the object in JSON format.
            </summary>
            <param name="writer">The json text writer.</param>
            <param name="options">Set of serializer options.</param>
            <returns>True of the object handled the serialization, otherwise false to perform the default serialization.</returns>
        </member>
        <member name="T:Wisej.Core.ClientThemeReader">
            <summary>
            This class reads the theme settings on the server
            side and returns usable metrics.
            
            It is mostly used by the designer to calculate the non-client areas
            and by the renderer to determine whether a color or font has to be
            rendered or not so that the client control reverts to the themed value.
            </summary>
        </member>
        <member name="M:Wisej.Core.ClientThemeReader.GetInsets(Wisej.Core.ClientTheme,Wisej.Core.IWisejControl,System.String,System.Boolean)">
            <summary>
            Returns the size of the inset border and padding.
            </summary>
            <param name="theme"></param>
            <param name="control"></param>
            <param name="stateName"></param>
            <param name="includePadding"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ClientThemeReader.GetInsets(Wisej.Core.ClientTheme,System.String,System.String,System.Boolean)">
            <summary>
            Returns the size of the inset border and padding.
            </summary>
            <param name="theme"></param>
            <param name="appearanceKey"></param>
            <param name="stateName"></param>
            <param name="includePadding"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ClientThemeReader.GetScrollBarSize(Wisej.Core.ClientTheme)">
            <summary>
            Returns the size of the scrollbar appearance key.
            </summary>
            <param name="theme"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ClientThemeReader.GetScrollBarSize(Wisej.Core.ClientTheme,System.String)">
            <summary>
            Returns the size of the scrollbar appearance key.
            </summary>
            <param name="theme"></param>
            <param name="appearanceKey"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ClientThemeReader.GetCaptionHeight(Wisej.Core.ClientTheme,Wisej.Core.IWisejControl)">
            <summary>
            Returns the height property for the "captionbar".
            </summary>
            <param name="theme"></param>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ClientThemeReader.GetCaptionWidth(Wisej.Core.ClientTheme,Wisej.Core.IWisejControl)">
            <summary>
            Returns the width property for the "captionbar".
            </summary>
            <param name="theme"></param>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ClientThemeReader.GetBackColor(Wisej.Core.ClientTheme,Wisej.Core.IWisejControl)">
            <summary>
            Returns the background color.
            </summary>
            <param name="theme"></param>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ClientThemeReader.GetBackColor(Wisej.Core.ClientTheme,System.String)">
            <summary>
            Returns the background color.
            </summary>
            <param name="theme"></param>
            <param name="appearanceKey"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ClientThemeReader.GetTextColor(Wisej.Core.ClientTheme,Wisej.Core.IWisejControl)">
            <summary>
            Returns the text color.
            </summary>
            <param name="theme"></param>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ClientThemeReader.GetTextColor(Wisej.Core.ClientTheme,System.String)">
            <summary>
            Returns the text color.
            </summary>
            <param name="theme"></param>
            <param name="appearanceKey"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ClientThemeReader.GetFont(Wisej.Core.ClientTheme,Wisej.Core.IWisejControl)">
            <summary>
            Returns the resolved font from the specified property.
            </summary>
            <param name="theme"></param>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ClientThemeReader.GetFont(Wisej.Core.ClientTheme,System.String)">
            <summary>
            Returns the resolved font from the specified property.
            </summary>
            <param name="theme"></param>
            <param name="appearanceKey"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ClientThemeReader.GetFontProperty(Wisej.Core.ClientTheme,Wisej.Core.IWisejControl,System.String)">
            <summary>
            Returns the resolved font from the specified property.
            </summary>
            <param name="theme"></param>
            <param name="control"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ClientThemeReader.GetFontProperty(Wisej.Core.ClientTheme,Wisej.Core.IWisejControl,System.String,System.String)">
            <summary>
            Returns the resolved font from the specified property.
            </summary>
            <param name="theme"></param>
            <param name="control"></param>
            <param name="name"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ClientThemeReader.GetHeight(Wisej.Core.ClientTheme,Wisej.Core.IWisejControl)">
            <summary>
            Returns the resolved height from the specified property.
            </summary>
            <param name="theme"></param>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ClientThemeReader.GetWidth(Wisej.Core.ClientTheme,Wisej.Core.IWisejControl)">
            <summary>
            Returns the resolved height from the specified property.
            </summary>
            <param name="theme"></param>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ClientThemeReader.GetHeight(Wisej.Core.ClientTheme,System.String,System.String)">
            <summary>
            Returns the resolved height from the specified property.
            </summary>
            <param name="theme"></param>
            <param name="appearanceKey"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ClientThemeReader.GetWidth(Wisej.Core.ClientTheme,System.String,System.String)">
            <summary>
            Returns the resolved width from the specified property.
            </summary>
            <param name="theme"></param>
            <param name="appearanceKey"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ClientThemeReader.GetPadding(Wisej.Core.ClientTheme,Wisej.Core.IWisejControl,System.String)">
            <summary>
            Returns the value of the padding properties.
            </summary>
            <param name="theme"></param>
            <param name="control"></param>
            <param name="stateName"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ClientThemeReader.GetMargin(Wisej.Core.ClientTheme,Wisej.Core.IWisejControl,System.String)">
            <summary>
            Returns the value of the margin properties.
            </summary>
            <param name="theme"></param>
            <param name="control"></param>
            <param name="stateName"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ClientThemeReader.GetPadding(Wisej.Core.ClientTheme,System.String,System.String)">
            <summary>
            Returns the value of the padding properties.
            </summary>
            <param name="theme"></param>
            <param name="appearanceKey"></param>
            <param name="stateName"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ClientThemeReader.GetMargin(Wisej.Core.ClientTheme,System.String,System.String)">
            <summary>
            Returns the value of the margin properties.
            </summary>
            <param name="theme"></param>
            <param name="appearanceKey"></param>
            <param name="stateName"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ClientThemeReader.GetPixels(Wisej.Core.ClientTheme,System.String,System.String,System.String)">
            <summary>
            Returns the pixel values defined in a css string.
            </summary>
            <param name="theme"></param>
            <param name="appearanceKey"></param>
            <param name="name"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ClientThemeReader.GetColorStyle(Wisej.Core.ClientTheme,Wisej.Core.IWisejControl,System.String)">
            <summary>
            Returns the resolved color from the specified style.
            </summary>
            <param name="theme"></param>
            <param name="control"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ClientThemeReader.GetColorStyle(Wisej.Core.ClientTheme,System.String,System.String)">
            <summary>
            Returns the resolved color from the specified style.
            </summary>
            <param name="theme"></param>
            <param name="appearanceKey"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ClientThemeReader.GetColorProperty(Wisej.Core.ClientTheme,Wisej.Core.IWisejControl,System.String)">
            <summary>
            Returns the resolved color from the specified property.
            </summary>
            <param name="theme"></param>
            <param name="control"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ClientThemeReader.GetColorProperty(Wisej.Core.ClientTheme,System.String,System.String)">
            <summary>
            Returns the resolved color from the specified property.
            </summary>
            <param name="theme"></param>
            <param name="appearanceKey"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ClientThemeReader.GetColorProperty(Wisej.Core.ClientTheme,System.String,System.String,System.String)">
            <summary>
            Returns the resolved color from the specified property.
            </summary>
            <param name="theme"></param>
            <param name="appearanceKey"></param>
            <param name="name"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ClientThemeReader.GetThemeColor(Wisej.Core.ClientTheme,System.String)">
            <summary>
            Returns the themed color.
            </summary>
            <param name="theme"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ClientThemeReader.GetThemeFont(Wisej.Core.ClientTheme,System.String)">
            <summary>
            Returns the themed font.
            </summary>
            <param name="theme"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ClientThemeReader.GetThemeFontHeight(Wisej.Core.ClientTheme,System.String)">
            <summary>
            Returns the height in pixels of the theme font.
            </summary>
            <param name="theme"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ClientThemeReader.GetThemeImage(Wisej.Core.ClientTheme,System.String)">
            <summary>
            Returns the themed image.
            </summary>
            <param name="theme">Target <see cref="T:Wisej.Core.ClientTheme"/> instance.</param>
            <param name="name">The name of the theme image to return as a <see cref="T:System.Drawing.Image"/>.</param>
            <returns>The image to render on the screen.</returns>
            <remarks>
            Used mostly by the designer to render svg files to bitmaps.
            </remarks>
        </member>
        <member name="M:Wisej.Core.ClientThemeReader.GetThemeImage(Wisej.Core.ClientTheme,System.String,System.String)">
            <summary>
            Returns the themed image.
            </summary>
            <param name="theme">Target <see cref="T:Wisej.Core.ClientTheme"/> instance.</param>
            <param name="name">The name of the theme image to return as a <see cref="T:System.Drawing.Image"/>.</param>
            <param name="color">The color to apply to SVG images.</param>
            <returns>The image to render on the screen.</returns>
            <remarks>
            Used mostly by the designer to render svg files to bitmaps.
            </remarks>
        </member>
        <member name="M:Wisej.Core.ClientThemeReader.TranslateImage(System.String,System.String,System.String)">
            <summary>
            Translates a base64 string to an Image object.
            </summary>
            <param name="value"></param>
            <param name="baseUrl"></param>
            <param name="color">The optional color to apply to SVG images.</param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ClientThemeReader.ImageFromBase64(System.String,System.String)">
            <summary>
            Returns the Image encoded in a base64 string.
            </summary>
            <param name="base64"></param>
            <param name="color">The optional color to apply to SVG images.</param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ClientThemeReader.GetStyle(Wisej.Core.ClientTheme,Wisej.Core.IWisejControl,System.String,System.String)">
            <summary>
            Returns the value of the style for the specified
            appearance and state.
            </summary>
            <param name="theme"></param>
            <param name="control"></param>
            <param name="styleName"></param>
            <param name="stateName"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ClientThemeReader.GetStyle(Wisej.Core.ClientTheme,System.String,System.String,System.String)">
            <summary>
            Returns the value of the style for the specified
            appearance and state.
            </summary>
            <param name="theme"></param>
            <param name="appearanceKey"></param>
            <param name="styleName"></param>
            <param name="stateName"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ClientThemeReader.GetProperty(Wisej.Core.ClientTheme,Wisej.Core.IWisejControl,System.String,System.String)">
            <summary>
            Returns the value of the property for the specified
            appearance and state.
            </summary>
            <param name="theme"></param>
            <param name="control"></param>
            <param name="propertyName"></param>
            <param name="stateName"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ClientThemeReader.GetProperty(Wisej.Core.ClientTheme,System.String,System.String,System.String)">
            <summary>
            Returns the value of the property for the specified
            appearance and state.
            </summary>
            <param name="theme"></param>
            <param name="appearanceKey"></param>
            <param name="propertyName"></param>
            <param name="stateName"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ClientThemeReader.FindComponent(Wisej.Core.ClientTheme,System.Object,System.String)">
            <summary>
            Returns the child appearance. Searches the parent and the inherited appearances.
            </summary>
            <param name="theme"></param>
            <param name="parent"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ClientThemeReader.GetAppearance(Wisej.Core.ClientTheme,System.String)">
            <summary>
            Returns the cached appearance definition.
            </summary>
            <param name="theme"></param>
            <param name="appearanceKey"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ClientThemeReader.GetState(Wisej.Core.ClientTheme,System.String,System.String)">
            <summary>
            Returns the cached state.
            </summary>
            <param name="theme"></param>
            <param name="appearanceKey"></param>
            <param name="stateName"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ClientThemeReader.ResolveColor(Wisej.Core.ClientTheme,System.String)">
            <summary>
            Resolves the color definition by translating the string
            or by dereferencing the theme color.
            </summary>
            <param name="theme"></param>
            <param name="value">Can be the name of a theme color or a color definition: rgb(), rgba(), #rrggbb, name of a known colors or a system color.</param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ClientThemeReader.TranslateColor(System.String,System.String)">
            <summary>
            Translates a color string to a Color object.
            </summary>
            <param name="value"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ClientThemeReader.CreateNamedColor(System.Drawing.Color,System.String)">
            <summary>
            Creates a new KnownColor.
            </summary>
            <param name="color"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ClientThemeReader.ResolveFont(Wisej.Core.ClientTheme,System.Object)">
            <summary>
            Resolves a font definition object or a named theme font.
            </summary>
            <param name="theme"></param>
            <param name="value">Can be a font config object or the name of a theme font.</param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ClientThemeReader.TranslateFont(System.Object,System.String)">
            <summary>
            Translates a font definition from the theme into a System.Drawing.Font.
            </summary>
            <param name="font"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ClientThemeReader.GetRectGroup(System.Object,System.String)">
            <summary>
            Reads any Top,Right,Bottom,Left group and individual values
            and returns them in a Padding instance.
            </summary>
            <param name="owner"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ClientThemeReader.ReadFromMetricsCache``1(Wisej.Core.ClientTheme,System.String,System.Func{``0})">
            <summary>
            Returns the value related the key from the metrics cache.
            </summary>
            <param name="theme"></param>
            <param name="key"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ClientThemeReader.IsThemeFont(System.Drawing.Font)">
            <summary>
            Returns true if the font is a theme font: the name starts with "@".
            </summary>
            <param name="font"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ClientThemeReader.IsThemeColor(System.Drawing.Color)">
            <summary>
            Returns true if the color is a theme color: named but unknown or starts with "@".
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="P:Wisej.Core.ClientThemeReader.SvgRenderer">
            <summary>
            Sets the SVG render callback method. Used by the ClientThemeReader to render
            SVG images at design time.
            </summary>
        </member>
        <member name="T:Wisej.Core.ComponentManager">
            <summary>
            Manages all Wisej components on the session.
            </summary>
        </member>
        <member name="M:Wisej.Core.ComponentManager.#ctor">
            <summary>
            Initializes a new ComponentManager.
            </summary>
        </member>
        <member name="M:Wisej.Core.ComponentManager.GetNewComponentId">
            <summary>
            Generate a new unique component id.
            </summary>
            <returns>The new id guaranteed to be unique in the ComponentsByHandle dictionary.</returns>
        </member>
        <member name="M:Wisej.Core.ComponentManager.Register(Wisej.Core.IWisejComponent)">
            <summary>
            Initializes the component and registers it with the session.
            </summary>
            <param name="component"></param>
            <returns>The component's unique id.</returns>
        </member>
        <member name="M:Wisej.Core.ComponentManager.InitializeAndRegister(Wisej.Core.IWisejComponent)">
            <summary>
            Initializes the component.
            </summary>
            <param name="component">The component to initialize.</param>
            <returns>The component's unique id.</returns>
        </member>
        <member name="M:Wisej.Core.ComponentManager.Unregister(Wisej.Core.IWisejComponent)">
            <summary>
            Unregisters the component.
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:Wisej.Core.ComponentManager.Unregister(System.Collections.IList)">
            <summary>
            Removes the list of components.
            </summary>
            <param name="components"></param>
        </member>
        <member name="M:Wisej.Core.ComponentManager.SetDirty(Wisej.Core.IWisejComponent)">
            <summary>
            Adds the component to the dirty list.
            
            That is the list containing the components that need to update
            their client representation.
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:Wisej.Core.ComponentManager.SetDisposed(Wisej.Core.IWisejComponent)">
            <summary>
            Adds the component to the disposed list.
            
            That is the list containing the components that need to 
            get destroyed on the client.
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:Wisej.Core.ComponentManager.RemoveComponent(Wisej.Core.IWisejComponent)">
            <summary>
            Removes the component from the collection
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:Wisej.Core.ComponentManager.GetComponent(System.String)">
            <summary>
            Returns the component with the specified id.
            </summary>
            <param name="id">Id of the control to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ComponentManager.GetComponent(System.Int32)">
            <summary>
            Returns the component with the specified key.
            </summary>
            <param name="key">Key of the control to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ComponentManager.FindComponents(System.Predicate{Wisej.Core.IWisejComponent})">
            <summary>
            Finds the components that match a set of rules.
            </summary>
            <param name="match">Callback to match the components to find.</param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ComponentManager.FindComponent(System.Predicate{Wisej.Core.IWisejComponent})">
            <summary>
            Finds the components that match a set of rules.
            </summary>
            <param name="match">Callback to match the components to find.</param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ComponentManager.CreateComponent(System.Object)">
            <summary>
            Creates a new components.
            </summary>
            <param name="data">Data received with the create message. Contains the type of the component to create and the constructor arguments.</param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ComponentManager.RegisterEndResponseCallback(System.Action)">
            <summary>
            Registers the callback for post processing.
            </summary>
            <param name="callback">Callback  invoked at the end of the request processing.</param>
        </member>
        <member name="M:Wisej.Core.ComponentManager.InvokeEndResponseCallbacks(Wisej.Core.ResponseManager)">
            <summary>
            Calls the registered post-processing callback.
            </summary>
            <param name="response">The <see cref="T:Wisej.Core.ResponseManager"/> requesting the rendering of the components.</param>
        </member>
        <member name="M:Wisej.Core.ComponentManager.RegisterClientScript(Wisej.Core.IWisejComponent,System.String)">
            <summary>
            Adds the script to the response. Scripts are sent back to
            the client as the last actions before sending the response.
            </summary>
            <param name="component">Component that should execute the script on the client side.</param>
            <param name="script">JavaScript to execute on the client side.</param>
        </member>
        <member name="M:Wisej.Core.ComponentManager.RegisterClientScript(Wisej.Core.IWisejComponent,System.String,System.Action{System.Object})">
            <summary>
            Adds the script to the response. Scripts are sent back to
            the client as the last actions before sending the response.
            </summary>
            <param name="component">Component that should execute the script on the client side.</param>
            <param name="script">JavaScript to execute on the client side.</param>
            <param name="callback">Callback method that will receive the return value, or null if the script doesn't return anything.</param>
        </member>
        <member name="M:Wisej.Core.ComponentManager.GetClientCallback(System.Int32)">
            <summary>
            Returns the callback action associated with the specified <paramref name="callbackId"/>.
            </summary>
            <param name="callbackId">Unique id associated with the callback method.</param>
            <returns>null or an Action instance.</returns>
        </member>
        <member name="M:Wisej.Core.ComponentManager.GetNewClientCallbackId">
            <summary>
            Generate a new unique client callback id.
            </summary>
            <returns>The new id guaranteed to be unique in the ClientCallbacks dictionary.</returns>
        </member>
        <member name="M:Wisej.Core.ComponentManager.RegisterClientFunction(Wisej.Core.IWisejComponent,System.String,System.Object[],System.Boolean)">
            <summary>
            Adds the script to the response. Scripts are sent back to
            the client as the last actions before sending the response to the client.
            </summary>
            <param name="component"></param>
            <param name="name">The name of the function to execute.</param>
            <param name="args">The arguments to pass to the function.</param>
            <param name="first">When true, the client call is added at the top of the list.</param>
        </member>
        <member name="M:Wisej.Core.ComponentManager.RegisterClientFunction(Wisej.Core.IWisejComponent,System.String,System.Action{System.Object},System.Object[],System.Boolean)">
            <summary>
            Adds the script to the response. Scripts are sent back to
            the client as the last actions before sending the response to the client.
            </summary>
            <param name="component"></param>
            <param name="name">The name of the function to execute.</param>
            <param name="callback">Callback method that will receive the return value, or null if the script doesn't return anything.</param>
            <param name="args">The arguments to pass to the function.</param>
            <param name="first">When true, the client call is added at the top of the list.</param>
        </member>
        <member name="M:Wisej.Core.ComponentManager.Render(Wisej.Core.ResponseManager)">
            <summary>
            Renders all the components in the session.
            </summary>
            <param name="response">The <see cref="T:Wisej.Core.ResponseManager"/> requesting the rendering of the components.</param>
        </member>
        <member name="M:Wisej.Core.ComponentManager.RenderClientScripts(Wisej.Core.ResponseManager)">
            <summary>
            Returns client scripts.
            </summary>
            <param name="response"></param>
        </member>
        <member name="M:Wisej.Core.ComponentManager.RenderAppState(Wisej.Core.ResponseManager)">
            <summary>
            Returns the application state.
            </summary>
            <param name="response"></param>
        </member>
        <member name="M:Wisej.Core.ComponentManager.DestroyComponents(Wisej.Core.ResponseManager)">
            <summary>
            Remove disposed components.
            </summary>
            <param name="response"></param>
        </member>
        <member name="M:Wisej.Core.ComponentManager.RenderComponents(Wisej.Core.ResponseManager)">
            <summary>
            Renders the components.
            </summary>
            <param name="response"></param>
        </member>
        <member name="M:Wisej.Core.ComponentManager.RenderReferenced(Wisej.Core.ResponseManager,Wisej.Core.IWisejComponent)">
            <summary>
            Renders referenced components.
            </summary>
            <param name="response"></param>
            <param name="component"></param>
        </member>
        <member name="M:Wisej.Core.ComponentManager.RenderComponent(Wisej.Core.ResponseManager,Wisej.Core.IWisejComponent)">
            <summary>
            Renders the single component.
            </summary>
            <param name="response"></param>
            <param name="component"></param>
        </member>
        <member name="M:Wisej.Core.ComponentManager.RefreshAll(System.Boolean)">
            <summary>
            Marks all components new to refresh the rendering on the client.
            </summary>
            <param name="create">Indicates whether the refresh should update or recreate the widgets.</param>
        </member>
        <member name="M:Wisej.Core.ComponentManager.ApplyState(Wisej.Core.Session,System.Object)">
            <summary>
            Updates the state of all the components returned by the client.
            </summary>
            <param name="session">The current session.</param>
            <param name="state">Array of state JSON objects.</param>
        </member>
        <member name="M:Wisej.Core.ComponentManager.DispatchEvents(Wisej.Core.Session,System.Collections.ICollection)">
            <summary>
            Dispatch the events received from the client.
            </summary>
            <param name="session">The current session.</param>
            <param name="events">List of events to dispatch.</param>
        </member>
        <member name="M:Wisej.Core.ComponentManager.MergeState(Wisej.Core.DynamicObject,Wisej.Core.DynamicObject)">
            <summary>
            Merges the state returned by the client with the last rendered state.
            </summary>
            <param name="oldConfig">Component last configuration.</param>
            <param name="newConfig">State returned by the client as a JSON object.</param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ComponentManager.Dispose">
            <summary>
            The ComponentManager is being destroyed.
            </summary>
        </member>
        <member name="P:Wisej.Core.ComponentManager.IsDisposed">
            <summary>
            Returns true if this ComponentManager has been disposed.
            </summary>
        </member>
        <member name="P:Wisej.Core.ComponentManager.Wisej#Core#IWisejSynchronized#SyncLock">
            <summary>
            Returns the object to use to synchronize access.
            </summary>
        </member>
        <member name="T:Wisej.Core.DynamicObject">
            <summary>
            Custom fast implementation of a dynamic object that can handle the JSON
            serialization and deserialization.
            
            This class implements IDynamicMetaObjectProvider allowing the DLR to compile the
            dynamic member access on the fly. We could have derived from System.Dynamic.Dynamic but
            the implementation in the .NET framework uses exceptions to manage custom properties.
            
            </summary>
        </member>
        <member name="M:Wisej.Core.DynamicObject.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Wisej.Core.DynamicObject.#ctor(System.Int32)">
            <summary>
            Optional constructor. Takes the initial capacity to
            allocate the specified number of slots in the store.
            </summary>
            <param name="capacity">Initial number of store entries.</param>
        </member>
        <member name="M:Wisej.Core.DynamicObject.#ctor(Wisej.Core.DynamicObject)">
            <summary>
            Creates a new DynamicObject cloned from the source object.
            </summary>
            <param name="source">Source object to copy the fields from.</param>
        </member>
        <member name="M:Wisej.Core.DynamicObject.Delete(System.String)">
            <summary>
            Deletes the field.
            </summary>
            <param name="name">Name of the field to remove.</param>
            <returns>Itself, this call can be chained.</returns>
        </member>
        <member name="P:Wisej.Core.DynamicObject.Count">
            <summary>
            Returns the number of fields.
            </summary>
            <returns>Number of fields in the object.</returns>
        </member>
        <member name="M:Wisej.Core.DynamicObject.Clear">
            <summary>
            Wipes out the object.
            </summary>
        </member>
        <member name="M:Wisej.Core.DynamicObject.TrimExcess">
            <summary>
            Removes the excess entries in the inner array and in all child fields, recursively.
            </summary>
        </member>
        <member name="M:Wisej.Core.DynamicObject.Sort">
            <summary>
            Sorts the field by their name.
            </summary>
        </member>
        <member name="M:Wisej.Core.DynamicObject.Clone">
            <summary>
            Clones the members of the dynamic object.
            </summary>
            <remarks>This is a shallow copy. Reference members are copied by reference.</remarks>
            <returns>The cloned instance.</returns>
        </member>
        <member name="P:Wisej.Core.DynamicObject.Item(System.String)">
            <summary>
            Returns or sets the value of the specified member.
            </summary>
            <param name="name">Name of the field to read or write.</param>
            <returns>The value associated with the field <paramref name="name"/>.</returns>
        </member>
        <member name="M:Wisej.Core.DynamicObject.Notify(System.String)">
            <summary>
            Fires the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event.
            </summary>
            <param name="name">Name of the property that has changed in the dynamic object.</param>
        </member>
        <member name="M:Wisej.Core.DynamicObject.Contains(System.String)">
            <summary>
            Returns whether the object contains the specified field.
            </summary>
            <param name="name">Name of the field to check.</param>
            <returns>True if the field <paramref name="name"/> exists in the store.</returns>
        </member>
        <member name="M:Wisej.Core.DynamicObject.TryGetValue(System.String,System.Object@)">
            <summary>
            Tries to retrieve the value for the specified member.
            </summary>
            <param name="name">Name of the field to retrieve.</param>
            <param name="value">Will receive the value of the <paramref name="name"/> field.</param>
            <returns>True if the member was found, otherwise false.</returns>
        </member>
        <member name="P:Wisej.Core.DynamicObject.IsEmpty">
            <summary>
            Returns true if the dynamic doesn't object contains any field.
            </summary>
        </member>
        <member name="M:Wisej.Core.DynamicObject.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/></returns>
        </member>
        <member name="M:Wisej.Core.DynamicObject.Rename(System.String,System.String)">
            <summary>
            Renames the field.
            </summary>
            <param name="oldName">Name of the field to rename.</param>
            <param name="newName">New name to assign to the field.</param>
            <returns>True if the field was found and renamed, otherwise false.</returns>
        </member>
        <member name="M:Wisej.Core.DynamicObject.MoveUp(System.String)">
            <summary>
            Moves the specified member up one position in the list of fields.
            </summary>
            <param name="name">Name of the field to move up in the internal store order.</param>
            <returns>True if the member was moved, false if not found.</returns>
        </member>
        <member name="M:Wisej.Core.DynamicObject.MoveDown(System.String)">
            <summary>
            Moves the specified member down one position in the list of fields.
            </summary>
            <param name="name">Name of the field to move down in the internal store order.</param>
            <returns>True if the member was moved, false if not found.</returns>
        </member>
        <member name="M:Wisej.Core.DynamicObject.Merge(Wisej.Core.DynamicObject)">
            <summary>
            Merges the fields from the source object into this object.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Wisej.Core.DynamicObject.Diff(Wisej.Core.DynamicObject)">
            <summary>
            Returns a new ComponentConfiguration object containing only the values that
            don't exist in the ComponentConfiguration object passed to the method.
            </summary>
            <param name="original">previous values to diff against.</param>
            <returns>Returns null if there are no differences.</returns>
        </member>
        <member name="M:Wisej.Core.DynamicObject.IsEqual(Wisej.Core.DynamicObject)">
            <summary>
            Returns true if the specified dynamic object contains the
            same values.
            </summary>
            <param name="original">previous values to diff against.</param>
            <returns>Returns false if there are no differences.</returns>
        </member>
        <member name="M:Wisej.Core.DynamicObject.ObjectEquals(System.Object,System.Object)">
            <summary>
            Determines whether the specified object instances are considered equal.
            </summary>
            <returns>true if the objects are considered equal; otherwise, false.</returns>
            <param name="obj1">The first object to compare. </param>
            <param name="obj2">The second object to compare. </param>
        </member>
        <member name="M:Wisej.Core.DynamicObject.IsDifferent(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Compares two collections.
            </summary>
            <param name="coll1"></param>
            <param name="coll2"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.DynamicObject.ToString">
            <summary>
            Returns a string that represents the <see cref="T:Wisej.Core.DynamicObject" /> values.
            </summary>
            <returns>A <see cref="T:System.String" /> that represent the type and state of the instance.</returns>
        </member>
        <member name="M:Wisej.Core.DynamicObject.Equals(System.Object)">
            <summary>
            Compares this instance with another DynamicObject.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.DynamicObject.GetHashCode">
            <returns>
            The hash code for the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="T:Wisej.Core.DynamicObject.Member">
            <summary>
            Represent a member in the <see cref="T:Wisej.Core.DynamicObject"/> instance.
            </summary>
        </member>
        <member name="F:Wisej.Core.DynamicObject.Member.Empty">
            <summary>
            Returns a default empty member.
            </summary>
        </member>
        <member name="M:Wisej.Core.DynamicObject.Member.#ctor(System.String,System.Object)">
            <summary>
            Creates a new initialized Member structure.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="F:Wisej.Core.DynamicObject.Member.Name">
            <summary>
            Returns the name of the member.
            </summary>
        </member>
        <member name="F:Wisej.Core.DynamicObject.Member.Value">
            <summary>
            Returns the value of the member.
            </summary>
        </member>
        <member name="T:Wisej.Core.DynamicObject.MetaStore">
            <summary>
            Optimized dictionary implementation to
            preserve fields' relative index in the collection and
            speed up data management operations.
            </summary>
        </member>
        <member name="M:Wisej.Core.DynamicObject.MetaStore.#ctor">
            <summary>
            Creates a new Dictionary instance.
            </summary>
        </member>
        <member name="M:Wisej.Core.DynamicObject.MetaStore.#ctor(System.Int32)">
            <summary>
            Creates a new Dictionary instance initialize with the specified capacity.
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Wisej.Core.DynamicObject.MetaStore.#ctor(Wisej.Core.DynamicObject.MetaStore)">
            <summary>
            Creates a new Dictionary instance as a clone of the source.
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:Wisej.Core.DynamicObject.MetaStore.Length">
            <summary>
            Returns the number of members in the store, not the capacity.
            </summary>
        </member>
        <member name="P:Wisej.Core.DynamicObject.MetaStore.Item(System.String)">
            <summary>
            Sets or gets the value of the specified member.
            </summary>
            <param name="name">Name of the member to get or set.</param>
            <returns>Value associated to <paramref name="name"/> in the store.</returns>
        </member>
        <member name="P:Wisej.Core.DynamicObject.MetaStore.Item(System.Int32)">
            <summary>
            Sets or gets the member at the specified index.
            </summary>
            <param name="position">Position of the member to get or set.</param>
            <returns>A <see cref="T:Wisej.Core.DynamicObject.Member"/> instance at the specified <paramref name="position"/> in the store.</returns>
        </member>
        <member name="M:Wisej.Core.DynamicObject.MetaStore.IndexOf(System.String)">
            <summary>
            Returns the index of the specified member, or -1 if not found.
            </summary>
            <param name="name">Name of the member to find in the store.</param>
            <returns>The position of the member identified by <paramref name="name"/> or -1 if not found.</returns>
        </member>
        <member name="M:Wisej.Core.DynamicObject.MetaStore.Clear">
            <summary>
            Clears the store from all members.
            </summary>
        </member>
        <member name="M:Wisej.Core.DynamicObject.MetaStore.TrimExcess">
            <summary>
            Removes the excess array entries from the inner array.
            </summary>
        </member>
        <member name="M:Wisej.Core.DynamicObject.MetaStore.Sort">
            <summary>
            Sorts the members by name.
            </summary>
        </member>
        <member name="M:Wisej.Core.DynamicObject.MetaStore.Remove(System.String)">
            <summary>
            Removes the specified member.
            </summary>
            <param name="name"></param>
            <returns>True if the member was removed, false if not found.</returns>
        </member>
        <member name="M:Wisej.Core.DynamicObject.MetaStore.RemoveAt(System.Int32)">
            <summary>
            Removes the member at the specified position.
            </summary>
            <param name="position"></param>
        </member>
        <member name="M:Wisej.Core.DynamicObject.MetaStore.CopyTo(Wisej.Core.DynamicObject.Member[],System.Int32)">
            <summary>
             Copies the members into the specified destination array.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Wisej.Core.DynamicObject.GetMemberInternal(Wisej.Core.DynamicObject,System.String)">
            <summary>
            Returns the value of the specified field by name.
            This is referenced by the dynamic expression built in the DynamicMetaObject implementation.
            </summary>
            <param name="target"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.DynamicObject.SetMemberInternal(Wisej.Core.DynamicObject,System.String,System.Object)">
            <summary>
            Sets the value of the field specified by name.
            This is referenced by the dynamic expression built in the DynamicMetaObject implementation.
            </summary>
            <param name="target"></param>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.DynamicObject.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>
            Provides a <see cref="T:System.Dynamic.DynamicMetaObject" /> that dispatches to the dynamic virtual methods.
            </summary>
            <returns>An object of the <see cref="T:System.Dynamic.DynamicMetaObject" /> type.</returns>
            <param name="parameter">The expression that represents <see cref="T:System.Dynamic.DynamicMetaObject" /> to dispatch to the dynamic virtual methods.</param>
        </member>
        <member name="T:Wisej.Core.DynamicObject.DynamicPropertyDescriptor">
            <summary>
            The PropertyDescriptor that reads/writes properties
            from a DyamicObject.
            </summary>
        </member>
        <member name="T:Wisej.Core.HttpHandler">
            <summary>
            IIS Wisej Handler.
            
            All Wisej requests (*.wx) are handled by this class.
            
            - Resource requests (images, scripts, ...) go to ResourceManager
            - Application and Data requests go to ResponseManager
            
            If the requests comes in as a WebSocket request, the handler
            manages it and sits in a WebSocket loop dispatching incoming
            messages to ResponseManager.
            
            </summary>
        </member>
        <member name="P:Wisej.Core.HttpHandler.IsReusable">
            <summary>
            IHttpAsyncHandler.IsReusable implementation.
            </summary>
        </member>
        <member name="M:Wisej.Core.HttpHandler.BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)">
            <summary>
            IHttpAsyncHandler.BeginProcessRequest implementation.
            </summary>
            <param name="context"></param>
            <param name="cb"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.HttpHandler.EndProcessRequest(System.IAsyncResult)">
            <summary>
            IHttpAsyncHandler.EndProcessRequest implementation.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:Wisej.Core.HttpHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Process the incoming request http request.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Wisej.Core.HttpHandler.GetRequestName(System.Web.HttpRequest)">
            <summary>
            Extracts the request name from the request path.
            
            Could be:
            
            	wisej.wx
            	wisej.wx/init
            	/Folder/wisej.wx
            	/Folder/wisej.wx/init
            	~/Folder/wisej.wx
            	~/Folder/wisej.wx/init
            	
            In all cases the request name is "wisej.wx".
            
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.HttpHandler.ProcessWebSocketRequest(System.Web.WebSockets.AspNetWebSocketContext)">
            <summary>
            Starts the WebSocket loop in response to a WebSocket upgrade request.
            </summary>
            <param name="context">An instance of <see cref="T:System.Web.WebSocket.AspNetWebSocketContext"/> that represents the WebSocket connection.</param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.HttpHandler.GetAcceptedEncodig(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Returns the encoding type specified in the "accept-encoding"
            request header that matches the PreferredEncoding set it the configuration.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Wisej.Core.HttpModule">
            <summary>
            IIS Wisej Module.
            
            This class hooks the BeginRequest event in order
            to manage smart URLs. It's not needed for the correct
            functioning of Wisej. It's only needed if the application
            wants to handle smart urls: 
            
            http://mysite.com/appname instead of http://mysite.com/appname.html
            
            The module finds appname.json (the Wisej configuration file) in the /appname
            folder, reads it and finds the url property and redirects the web server
            to the url specified in the configuration file.
            
            Otherwise the request must match an html file and it must be in the same
            folder as the Wisej configuration file.
            
            </summary>
        </member>
        <member name="M:Wisej.Core.HttpModule.Dispose">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="T:Wisej.Core.IWisejCacheProvider">
            <summary>
            Provides basic caching functionality to Wisej.
            </summary>
        </member>
        <member name="M:Wisej.Core.IWisejCacheProvider.Get(System.String)">
            <summary>
            Returns the object identified by the key or null if it
            doesn't exist.
            </summary>
            <param name="key">Unique cache item key.</param>
            <returns>Object stored in the cache or null.</returns>
        </member>
        <member name="M:Wisej.Core.IWisejCacheProvider.Add(System.String,System.Object,System.TimeSpan,System.Web.Caching.CacheItemRemovedCallback)">
            <summary>
            Adds or updates an object on the cache.
            </summary>
            <param name="key">Unique cache item key.</param>
            <param name="value">Object to store in the cache.</param>
            <param name="slidingExpiration">Lifetime of the object.</param>
            <param name="itemRemovedCallback">Callback method invoked when the item is removed from the cache.</param>
        </member>
        <member name="M:Wisej.Core.IWisejCacheProvider.Update(System.String)">
            <summary>
            Updates the sliding expiration of the item in the cache.
            </summary>
            <param name="key">Unique cache item key.</param>
        </member>
        <member name="M:Wisej.Core.IWisejCacheProvider.Remove(System.String)">
            <summary>
            Removes the object from the cache.
            </summary>
            <param name="key">Unique cache item key.</param>
        </member>
        <member name="M:Wisej.Core.IWisejCacheProvider.CreateNewID">
            <summary>
            Creates a new session id. It guarantees that it's unique.
            </summary>
            <returns>Unique id in  the cache.</returns>
        </member>
        <member name="T:Wisej.Core.IWisejComponent">
            <summary>
            All wisej components implement this interface.
            </summary>
        </member>
        <member name="P:Wisej.Core.IWisejComponent.Id">
            <summary>
            The unique client id of the component.
            </summary>
        </member>
        <member name="P:Wisej.Core.IWisejComponent.Handle">
            <summary>
            The unique server handle of the component.
            </summary>
        </member>
        <member name="P:Wisej.Core.IWisejComponent.IsNew">
            <summary>
            Returns or sets the new status.
            </summary>
        </member>
        <member name="P:Wisej.Core.IWisejComponent.IsDisposed">
            <summary>
            Indicates that the component has been disposed.
            </summary>
        </member>
        <member name="P:Wisej.Core.IWisejComponent.IsDirty">
            <summary>
            Indicates that the component needs to be updated on the client.
            </summary>
        </member>
        <member name="P:Wisej.Core.IWisejComponent.DesignMode">
            <summary>
            Indicates that the control is being rendered in the designer.
            </summary>
        </member>
        <member name="P:Wisej.Core.IWisejComponent.IsTopLevel">
            <summary>
            Indicates that the component is rendered at the top level
            on the client: the parent is the root.
            </summary>
        </member>
        <member name="P:Wisej.Core.IWisejComponent.Session">
            <summary>
            Holds a reference to the session where this
            component lives.
            </summary>
        </member>
        <member name="P:Wisej.Core.IWisejComponent.Configuration">
            <summary>
            Stores the last configuration for the component.
            </summary>
        </member>
        <member name="P:Wisej.Core.IWisejComponent.Locked">
            <summary>
            Locks UI updated to the control.
            </summary>
        </member>
        <member name="P:Wisej.Core.IWisejComponent.DesignRect">
            <summary>
            Returns or sets the design rectangle for the component when
            it is used as a child widget in a designable control.
            </summary>
        </member>
        <member name="M:Wisej.Core.IWisejComponent.Reference(System.Collections.IList)">
            <summary>
            Returns a collection of referenced components or collection of components.
            </summary>
            <param name="list">List of referenced components or collection of components.</param>
        </member>
        <member name="M:Wisej.Core.IWisejComponent.UpdateWidget">
            <summary>
            Updates the client widget.
            </summary>
        </member>
        <member name="M:Wisej.Core.IWisejComponent.UpdateComponent(System.Object)">
            <summary>
            Updates the server component using the state information.
            </summary>
            <param name="state">Dynamic state object.</param>
        </member>
        <member name="M:Wisej.Core.IWisejComponent.Render(System.Object)">
            <summary>
            Renders the component into the config definition.
            </summary>
            <param name="config">Dynamic configuration object.</param>
        </member>
        <member name="M:Wisej.Core.IWisejComponent.Event(Wisej.Core.WisejEventArgs)">
            <summary>
            Processes the event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="E:Wisej.Core.IWisejComponent.Updated">
            <summary>
            Fired after the component has been updated.
            </summary>
        </member>
        <member name="T:Wisej.Core.IWisejControl">
            <summary>
            All wisej controls derived from the <see cref="T:Wisej.Web.Control"/> class must implement
            this interface.
            </summary>
        </member>
        <member name="P:Wisej.Core.IWisejControl.Bounds">
            <summary>
            Returns or sets the control's boundaries.
            </summary>
        </member>
        <member name="P:Wisej.Core.IWisejControl.Name">
            <summary>
            Returns the name of the window component.
            </summary>
        </member>
        <member name="P:Wisej.Core.IWisejControl.Visible">
            <summary>
            Returns or sets whether the control is visible.
            </summary>
        </member>
        <member name="P:Wisej.Core.IWisejControl.Created">
            <summary>
            Returns whether the control has been created fully and it's ready to be sent to the
            client. A control is marked as Created after it has been made visible the first time.
            </summary>
        </member>
        <member name="P:Wisej.Core.IWisejControl.Parent">
            <summary>
            Returns or sets the parent control.
            </summary>
        </member>
        <member name="P:Wisej.Core.IWisejControl.Size">
            <summary>
            Returns or sets the control's size..
            </summary>
        </member>
        <member name="P:Wisej.Core.IWisejControl.Children">
            <summary>
            Returns the children of the control or null if the control doesn't have children.
            </summary>
        </member>
        <member name="M:Wisej.Core.IWisejControl.Focus">
            <summary>
            Moves the focus to the control.
            </summary>
        </member>
        <member name="M:Wisej.Core.IWisejControl.SetDesignMetrics(System.Object)">
            <summary>
            Sets the design-time metrics used by the designer to adapt the
            control on the screen to the HTML metrics used by the renderer.
            </summary>
            <param name="metrics">Design properties received from the renderer.</param>
        </member>
        <member name="P:Wisej.Core.IWisejControl.DesignerTimeout">
            <summary>
            Returns the designer timeout in milliseconds.
            </summary>
        </member>
        <member name="P:Wisej.Core.IWisejControl.AppearanceKey">
            <summary>
            Returns the theme appearance key.
            </summary>
        </member>
        <member name="P:Wisej.Core.IWisejControl.Theme">
            <summary>
            Returns the current application theme.
            </summary>
        </member>
        <member name="P:Wisej.Core.IWisejControl.Platform">
            <summary>
            Returns the current application platform.
            </summary>
        </member>
        <member name="T:Wisej.Core.IWisejDataStore">
            <summary>
            All wisej data stores implement this interface.
            </summary>
        </member>
        <member name="M:Wisej.Core.IWisejDataStore.OnDataRead(System.Object)">
            <summary>
            Returns a data object.
            </summary>
            <param name="data">Request parameters. The parameters depend on the data consumer. For example, the <see cref="T:Wisej.Web.DataGridView" /> control uses: first, last, sortIndex, and sortDirection("asc" or "desc").</param>
            <returns>An object that contains the data requested by the component.</returns>
        </member>
        <member name="M:Wisej.Core.IWisejDataStore.OnDataCount">
            <summary>
            Returns the number of available records.
            </summary>
            <returns>The total number of rows.</returns>
        </member>
        <member name="T:Wisej.Core.IWisejHandler">
            <summary>
            Represents a wisej component that is capable of handling
            postback requests from  the client.
            </summary>
        </member>
        <member name="P:Wisej.Core.IWisejHandler.Compress">
            <summary>
            Enables the response compression.
            </summary>
        </member>
        <member name="M:Wisej.Core.IWisejHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Process the http request.
            </summary>
            <param name="context">The current <see cref="T:System.Web.HttpContext"/>.</param>
        </member>
        <member name="T:Wisej.Core.IWisejHandlerExtension">
            <summary>
            Standard implementation for the IWisejHandler interface.
            </summary>
        </member>
        <member name="M:Wisej.Core.IWisejHandlerExtension.GetPostbackURL(Wisej.Core.IWisejHandler,System.String[])">
            <summary>
            Returns a special URL that generates a callback to the component
            that implements the IWisejHandler interface.
            </summary>
            <param name="handler"></param>
            <param name="args">Optional arguments to add to the postback URL as name=value pairs.</param>
            <returns></returns>
        </member>
        <member name="T:Wisej.Core.LogManager">
            <summary>
            Provides logging services to the all classes in Wisej.
            </summary>
        </member>
        <member name="M:Wisej.Core.LogManager.Log(System.Exception)">
            <summary>
            Writes the exception to the trace listeners.
            </summary>
            <param name="ex">The <see cref="T:System.Exception"/> to log.</param>
        </member>
        <member name="M:Wisej.Core.LogManager.Log(System.String,System.Object[])">
            <summary>
            Writes the message text to the trace listeners.
            </summary>
            <param name="message">A <see cref="T:System.String"/> representing the message to log.</param>
            <param name="args">Variable list of arguments to substitute in the <paramref name="message"/> string.</param>
        </member>
        <member name="M:Wisej.Core.LogManager.Debug(System.String,System.Object[])">
            <summary>
            Writes the message to the output debug tool window.
            </summary>
            <param name="message">A <see cref="T:System.String"/> representing the message to log.</param>
            <param name="args">Variable list of arguments to substitute in the <paramref name="message"/> string.</param>
        </member>
        <member name="M:Wisej.Core.LogManager.DebugIf(System.Boolean,System.String,System.Object[])">
            <summary>
            Writes the message to the output debug tool window
            when <paramref name="condition"/> is true.
            </summary>
            <param name="condition">Conditional flag. When false the message is not logged.</param>
            <param name="message">A <see cref="T:System.String"/> representing the message to log.</param>
            <param name="args">Variable list of arguments to substitute in the <paramref name="message"/> string.</param>
        </member>
        <member name="T:Wisej.Core.PlatformProvider">
            <summary>
            Platforms supported by Wisej.
            </summary>
        </member>
        <member name="F:Wisej.Core.PlatformProvider.QXDesktop">
            <summary>
            Desktop platform by qooxdoo.
            </summary>
        </member>
        <member name="T:Wisej.Core.IWisejWindow">
            <summary>
            All wisej top-level windows implement this interface.
            </summary>
        </member>
        <member name="P:Wisej.Core.IWisejWindow.Active">
            <summary>
            Returns true if the window is active.
            </summary>
            <remarks>
            A <see cref="T:Wisej.Web.Page"/> is active when it is the <see cref="P:Wisej.Web.Application.MainPage"/>.
            A <see cref="T:Wisej.Web.Form"/> is active when it is above the other forms and matches <see cref="P:Wisej.Web.Form.ActiveForm"/>.
            </remarks>
        </member>
        <member name="M:Wisej.Core.IWisejWindow.Show">
            <summary>
            Shows the window.
            </summary>
        </member>
        <member name="M:Wisej.Core.IWisejWindow.Close(Wisej.Base.CloseReason)">
            <summary>
            Closes the window.
            </summary>
            <param name="reason">Reason for closing the window.</param>
        </member>
        <member name="M:Wisej.Core.IWisejWindow.Activate">
            <summary>
            Activates the window.
            </summary>
        </member>
        <member name="T:Wisej.Core.PlatformAttribute">
            <summary>
            Indicates the platform for which the component is valid.
            </summary>
        </member>
        <member name="T:Wisej.Core.ResourceManager">
            <summary>
            This class manages resources requests from a) the client
            side of the application, b) the designer, c) the server side rendering of the components.
            
            Resource requests are URLs for scripts, stylesheets and images.
            </summary>
        </member>
        <member name="M:Wisej.Core.ResourceManager.#ctor(System.Web.HttpContext)">
            <summary>
            Constructs an instance of  the ResourceManager using the current http context.
            </summary>
            <param name="context"></param>
        </member>
        <member name="P:Wisej.Core.ResourceManager.Context">
            <summary>
            The current context, wraps HttpContext or WebSocketContext.
            </summary>
        </member>
        <member name="P:Wisej.Core.ResourceManager.Service">
            <summary>
            Returns the <see cref="T:Wisej.Core.ResourceManager.ServiceType"/> being processed.
            </summary>
        </member>
        <member name="M:Wisej.Core.ResourceManager.Process(Wisej.Core.ResourceManager.ServiceType)">
            <summary>
            Process the resource request.
            </summary>
            <param name="service">Service type requested by the client.</param>
        </member>
        <member name="M:Wisej.Core.ResourceManager.SaveWisejScripts(System.Boolean,System.Boolean)">
            <summary>
            Generates the Wisej.js temp file by extracting and combining
            all the qualified js resources.
            
            Saves two files:
            - Wisej.js
            - Wisej.jsz (gzip compressed)
            
            </summary>
            <param name="designMode"></param>
            <param name="debugMode"></param>
        </member>
        <member name="M:Wisej.Core.ResourceManager.GetFileName(System.String)">
            <summary>
            Extract the name from the resource name: it's the string after the
            second (or third in case if minified embedded files) to last dot.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ResourceManager.IsCachedVersionValid(System.Web.HttpRequest,System.DateTime,System.String)">
            <summary>
            Checks if the date/time in the "If-Modified-Since" header
            is newer of the modified date of the resource file.
            </summary>
            <param name="request"></param>
            <param name="lastModified"></param>
            <param name="eTag"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ResourceManager.SendNotModifiedResponse(System.Web.HttpResponse,System.DateTime,System.String)">
            <summary>
            Sends the HTTP 304 Not Modified response.
            </summary>
            <param name="response"></param>
            <param name="lastModified"></param>
            <param name="eTag"></param>
        </member>
        <member name="M:Wisej.Core.ResourceManager.GetLastModified(System.String)">
            <summary>
            Returns the last modified date/time or DateTime.MaxValue if an error occurs.
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ResourceManager.GetETag(System.String,System.DateTime)">
            <summary>
            Generates an e-tag string from the file full path and last modified date/time.
            </summary>
            <param name="filePath"></param>
            <param name="lastModified"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ResourceManager.CreateMD5Hash(System.IO.Stream)">
            <summary>
            Creates an MD5 hash from the content of a byte stream.
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ResourceManager.IsResourceFile(System.String,System.String)">
            <summary>
            Qualifies the name as an embedded resources name: must be in /Platform or in /Resources folder.
            </summary>
            <param name="name">The name of the resource to verify.</param>
            <param name="rootName">The full name of the assembly that must match the name of the resource.</param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ResourceManager.SaveWisejStyleSheets(System.Boolean,System.Boolean)">
            <summary>
            Generates the Wisej.css temp file by extracting and combining
            all the qualified css resources.
            
            Saves two files:
            - Wisej.css
            - Wisej.css (gzip compressed)
            
            </summary>
            <param name="designMode"></param>
            <param name="debugMode"></param>
        </member>
        <member name="M:Wisej.Core.ResourceManager.ReturnComponentResource">
            <summary>
            Returns the image resource stored in the specified property of the referenced component.
            </summary>
        </member>
        <member name="M:Wisej.Core.ResourceManager.ReturnFile">
            <summary>
            Returns the file requested in the "x" request package as a downloadable stream.
            </summary>
        </member>
        <member name="M:Wisej.Core.ResourceManager.ReturnFileResource">
             <summary>
             Loads an embedded resource from any assembly or from the file system.
             Files in the file system can override embedded resources. The root
             is the web application root folder.
            
             The resource is specified as:
             
             resource.wx/{Path}
             resource.wx/{Assembly}/{Name}
             
             i.e. /resource.wx/image.jpg
                  /resource.wx/images/image.jpg
                  /resource.wx/MyApp/image.jpg
                  /resource.wx/MyApp/MyApp.Resources.image.jpg
                  
             </summary>
        </member>
        <member name="M:Wisej.Core.ResourceManager.GetRequestPath(System.Web.HttpRequest)">
            <summary>
            Extracts the request path.
            
            Could be:
            
            	resource.wx/qx.js
            	resource.wx/Wisej.Web/qx.js
            	/Folder/resource.wx/qx.js
            	/Folder/resource.wx/Wisej.Web/qx.js
            	~/Folder/resource.wx/qx.js
            	~/Folder/resource.wx/Wisej.Web/qx.js
            	
            In all cases the path to return is "resource.wx/qx.js" or "resource.wx/Wisej.Web/qx.js".
            Which is basically whatever comes after "resource.wx" including "resource.wx" excluding
            anything before "resource.wx".
            
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ResourceManager.IsAllowedResource(System.String)">
            <summary>
            Checks if the file extension is allowed for download.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ResourceManager.GetFileResourcePath(System.String)">
            <summary>
            Returns the full path to the specified resource.
            
            If the resource is a local project file, it returns the project-root path.
            
            If the resource is an embedded file, it extracts the embedded file to the 
            project's temporary folder and returns the full temp path. For embedded resources it
            checks whether the date of the assembly is newer than the date of the temp file.
            </summary>
            <param name="resource"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ResourceManager.ToBase64(System.Object)">
            <summary>
            Converts the object to a serialized base64 format.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ResourceManager.FromBase64(System.String)">
            <summary>
            Converts the base64 string to the original object.
            </summary>
            <param name="base64"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ResourceManager.GetSvgBase64(System.String)">
            <summary>
            Returns the svg definition using the base64 embedded format.
            </summary>
            <param name="svg"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ResourceManager.GetImageBase64(System.Drawing.Image)">
            <summary>
            Returns the image using the base64 embedded format.
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ResourceManager.GetImageMediaType(System.Drawing.Image)">
            <summary>
            Returns the normalized image media type. Defaults to image/png if the format is not recognized.
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ResourceManager.GetImageFormat(System.Drawing.Image)">
            <summary>
            Returns the normalized image format: gif, png, bmp, jpeg. If not recognized it returns png.
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ResourceManager.GetComponentResourceUrl(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Returns a URL that will cause the browsers to pull the resource
            held by the component in the property specified.
            </summary>
            <param name="id">The id of the component that owns the property.</param>
            <param name="propertyName">The name of property that holds the image.</param>
            <param name="version">An arbitrary cache buster string.</param>
            <param name="dispose">Indicates that the ResourceManager should dispose of the image after returning it to the client.</param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ResourceManager.GetResourceContent(System.String,System.String,System.Reflection.Assembly)">
            <summary>
            Returns the content of the specified resource.
            </summary>
            <param name="name"></param>
            <param name="folder"></param>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ResourceManager.GetResourceStream(System.String,System.String,System.Reflection.Assembly)">
             <summary>
             Returns a stream for the named resource.
            
             If the assembly is null, it looks in the /bin
             folder first, for an override file, and in all the loaded assemblies
             marked with the [WisejResources] attribute.
             </summary>
             <param name="name"></param>
             <param name="folder"></param>
             <param name="assembly"></param>
             <returns></returns>
        </member>
        <member name="M:Wisej.Core.ResourceManager.GetResourcePath(System.String,System.String,System.Reflection.Assembly)">
             <summary>
             Returns the temp file path for the named resource.
            
             If the assembly is null, it looks in the /bin
             folder first, for an override file, and in all the loaded assemblies
             marked with the [WisejResources] attribute.
             </summary>
             <param name="name"></param>
             <param name="folder"></param>
             <param name="assembly"></param>
             <returns></returns>
        </member>
        <member name="M:Wisej.Core.ResourceManager.GetResourceAssemblies">
            <summary>
            Returns the referenced (and loaded) assemblies with the
            WisejResourcesAttribute. These are the assemblies that export
            js and css resources to be bundled and distributed to the client.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ResourceManager.GetCoreResourceAssemblies">
            <summary>
            Returns the referenced (and loaded) *core* assemblies with the
            WisejResourcesAttribute.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ResourceManager.GetNonCoreResourceAssemblies">
            <summary>
            Returns the referenced (and loaded) *core* assemblies with the
            WisejResourcesAttribute.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ResourceManager.GetTempPath(System.String)">
            <summary>
            Returns a temp path that is unique for this instance of Wisej.
            </summary>
            <param name="subdir">Optional sub-directory in the application's temp.</param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ResourceManager.GetTempFilePath(System.String)">
            <summary>
            Returns a new temporary in the application's temp path at:
            {System Temp}\Wisej\{Application Name}\Temp.
            </summary>
            <remarks>
            The file path is guaranteed not to exist.
            </remarks>
            <param name="extension">The extension of the temporary file name preceded by a dot, i.e. ".png".</param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ResourceManager.GetApplicationPath">
            <summary>
            Returns the path of the application.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Wisej.Core.ResourceManager.ServiceType">
            <summary>
            Type of service requested by the client.
            </summary>
        </member>
        <member name="T:Wisej.Core.ResourceManager.Cache">
            <summary>
            Caches Wisej resources.
            </summary>
        </member>
        <member name="M:Wisej.Core.ResourceManager.Cache.Get(System.String,System.Func{System.String},System.Boolean)">
            <summary>
            Returns the requested item or null.
            </summary>
            <param name="name">Key in the cache.</param>
            <param name="callback">Callback to load the resource when not found.</param>
            <param name="checkFileExists">True to check whether the cached file path still exists.</param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ResourceManager.Cache.Set(System.String,System.String)">
            <summary>
            Stores the item in the cache.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Wisej.Core.ResourceManager.Cache.Remove(System.String)">
            <summary>
            Removes the item from the cache.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Wisej.Core.ResourceManager.Cache.Clear">
            <summary>
            Removes all entries from the cache.
            </summary>
        </member>
        <member name="T:Wisej.Core.ResponseManager">
            <summary>
            This class processes all the actions requested by the client side
            of the application. Every communication with the client goes through the Process() method.
            </summary>
        </member>
        <member name="F:Wisej.Core.ResponseManager.Actions">
            <summary>
            List of pending actions to send back to the client.
            </summary>
        </member>
        <member name="P:Wisej.Core.ResponseManager.Modal">
            <summary>
            Modal state for this instance of the ResponseManager.
            It's used only by the Http ResponseManager since it's lifetime
            is limited to the request.
            </summary>
        </member>
        <member name="P:Wisej.Core.ResponseManager.Context">
            <summary>
            The current context, wraps HttpContext or WebSocketContext.
            </summary>
        </member>
        <member name="M:Wisej.Core.ResponseManager.#ctor(Wisej.Core.WisejContext)">
            <summary>
            Default constructor, nothing to do here.
            </summary>
        </member>
        <member name="P:Wisej.Core.ResponseManager.Current">
            <summary>
            Returns the current ResponseManager. The
            singleton is saved in a ThreadStatic variable and 
            updated each time the thread starts processing a new request.
            </summary>
        </member>
        <member name="P:Wisej.Core.ResponseManager.IsWebSocket">
            <summary>
            Returns true if the manager is running on a WebSocket connection.
            </summary>
        </member>
        <member name="P:Wisej.Core.ResponseManager.IsHttp">
            <summary>
            Returns true if the manager is processing an Http request.
            </summary>
        </member>
        <member name="P:Wisej.Core.ResponseManager.Service">
            <summary>
            Returns the <see cref="T:Wisej.Core.ResponseManager.ServiceType"/> being processed.
            </summary>
        </member>
        <member name="M:Wisej.Core.ResponseManager.Begin">
            <summary>
            Every request must start by calling Begin.
            </summary>
        </member>
        <member name="M:Wisej.Core.ResponseManager.End">
            <summary>
            Every request must terminate by calling End.
            </summary>
        </member>
        <member name="M:Wisej.Core.ResponseManager.ProcessRequest(Wisej.Core.ResponseManager.ServiceType,System.Object)">
            <summary>
            Process the request.
            </summary>
            <param name="service">Service type requested by the client.</param>
            <param name="message">Payload associated with the service.</param>
        </member>
        <member name="M:Wisej.Core.ResponseManager.ValidateApplication(Wisej.Core.Session,Wisej.Core.ResponseManager.ServiceType)">
            <summary>
            Validates the session and the application.
            </summary>
            <param name="session"></param>
            <param name="service"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ResponseManager.OnKeepAlive(Wisej.Core.Session,System.Object)">
             <summary>
             Request: keepalive
             </summary>
            <param name="session">the current session.</param>
             <param name="message">the message received from the client.</param>
        </member>
        <member name="M:Wisej.Core.ResponseManager.OnEvent(Wisej.Core.Session,System.Object)">
             <summary>
             Request: event
             </summary>
            <param name="session">the current session.</param>
             <param name="message">the message received from the client.</param>
        </member>
        <member name="M:Wisej.Core.ResponseManager.OnPoll(Wisej.Core.Session,System.Object)">
             <summary>
             Request: poll
             </summary>
            <param name="session">the current session.</param>
             <param name="message">the message received from the client.</param>
        </member>
        <member name="M:Wisej.Core.ResponseManager.OnApplicationException(System.Exception)">
            <summary>
            Process the exception from the user code.
            </summary>
            <param name="exception">the exception thrown by the user code.</param>
        </member>
        <member name="M:Wisej.Core.ResponseManager.OnInvalidSessionException(System.Exception)">
            <summary>
            Process the invalid-session exception.
            </summary>
            <param name="ex">the invalid session exception to return to the client.</param>
        </member>
        <member name="M:Wisej.Core.ResponseManager.OnLoad(Wisej.Core.Session,System.Object)">
             <summary>
             Request: load
             </summary>
            <param name="session">the current session.</param>
             <param name="message">the message received from the client.</param>
        </member>
        <member name="M:Wisej.Core.ResponseManager.OnRefresh(Wisej.Core.Session,System.Object)">
             <summary>
             Request: refresh
             </summary>
            <param name="session">the current session.</param>
             <param name="message">the message received from the client.</param>
        </member>
        <member name="M:Wisej.Core.ResponseManager.CheckAvailability">
            <summary>
            Check:
            	- if the server is being used over the maximum limit set in web.config.
            	- if the server has reached its load balancing limits or must be skipped programmatically.
            </summary>
            <returns>True if the server instance is available.</returns>
        </member>
        <member name="M:Wisej.Core.ResponseManager.OnMethodCall(Wisej.Core.Session,System.Object)">
             <summary>
             Request: method
             </summary>
            <param name="session">the current session.</param>
             <param name="message">the message received from the client.</param>
        </member>
        <member name="M:Wisej.Core.ResponseManager.OnPostback(Wisej.Core.Session,System.Web.HttpContext)">
             <summary>
             Routes the postback request to the referenced component.
             </summary>
            <param name="session">the current session.</param>
             <param name="context">the current http context.</param>
        </member>
        <member name="M:Wisej.Core.ResponseManager.GetWisejRequestType(System.Web.HttpContext)">
            <summary>
            Returns true if the request is an ajax XMLHttpRequest.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.ResponseManager.OnSessionTimeout(Wisej.Core.Session,System.Object)">
             <summary>
             Request: timeout
             </summary>
            <param name="session">the current session.</param>
             <param name="message">the message received from the client.</param>
        </member>
        <member name="M:Wisej.Core.ResponseManager.OnExit(Wisej.Core.Session,System.Object)">
             <summary>
             Request: exit
             </summary>
            <param name="session">the current session.</param>
             <param name="message">the message received from the client.</param>
        </member>
        <member name="M:Wisej.Core.ResponseManager.OnDataRead(Wisej.Core.Session,System.Object)">
             <summary>
             Request: dataread
             </summary>
            <param name="session">the current session.</param>
             <param name="message">the message received from the client.</param>
        </member>
        <member name="M:Wisej.Core.ResponseManager.OnDataCount(Wisej.Core.Session,System.Object)">
             <summary>
             Request: datacount
             </summary>
            <param name="session">the current session.</param>
             <param name="message">the message received from the client.</param>
        </member>
        <member name="M:Wisej.Core.ResponseManager.GetDataStoreTarget(System.String)">
            <summary>
            Returns the instance of the data store that generated the request.
            </summary>
            <param name="id">Id of the IWisejDataStore.</param>
        </member>
        <member name="M:Wisej.Core.ResponseManager.ProcessResponse(System.Boolean)">
            <summary>
            Completes the request by:
            
            - invoking registered delayed callbacks.
            - rendering all the components that may have changed.
            - sending all javascript that may have been called by the app.
            
            </summary>
            <param name="processCallbacks">true to process Application.Post callback before returning the actions to the client.</param>
        </member>
        <member name="M:Wisej.Core.ResponseManager.RaiseApplicationException(System.Exception)">
            <summary>
            Raises an exception.
            </summary>
            <param name="exception">Exception to raise.</param>
        </member>
        <member name="T:Wisej.Core.ResponseManager.ResponseActions">
            <summary>
            Represents a response record. Each ResponseAction
            indicates the ActionType and carries the data related to the action.
            </summary>
        </member>
        <member name="F:Wisej.Core.ResponseManager.ResponseActions.Count">
            <summary>
            Total count of actions ready to be sent back to the client.
            </summary>
        </member>
        <member name="M:Wisej.Core.ResponseManager.ResponseActions.Clear">
            <summary>
            Resets and clears the action repository.
            </summary>
        </member>
        <member name="M:Wisej.Core.ResponseManager.ResponseActions.Add(Wisej.Core.ResponseManager.ActionType,System.Object)">
            <summary>
            Appends a new action to the pending list of actions
            to send to the client.
            </summary>
            <param name="type"></param>
            <param name="data"></param>
        </member>
        <member name="T:Wisej.Core.ResponseManager.ActionType">
            <summary>
            More or less self explanatory actions supported by the Wisej infrastructure.
            
            NOTE: The order is important!
            </summary>
        </member>
        <member name="M:Wisej.Core.ResponseManager.DoModal(Wisej.Core.IWisejComponent)">
            <summary>
            Enters a modal loop blocking this thread.
            </summary>
            <param name="component">The <see cref="T:Wisej.Core.IWisejComponent"/> that entered the modal state.</param>
            <returns>One of the <see cref="T:Wisej.Base.ModalResult"/> values.</returns>
        </member>
        <member name="M:Wisej.Core.ResponseManager.EndModal(Wisej.Core.IWisejComponent,Wisej.Base.ModalResult)">
            <summary>
            Terminates the current (last) modal loop and returns the result.
            </summary>
            <param name="component">The <see cref="T:Wisej.Core.IWisejComponent"/> that entered the modal state.</param>
            <param name="result">One of the <see cref="T:Wisej.Base.ModalResult"/> value that will be returned
            by <see cref="M:Wisej.Core.ResponseManager.DoModal(Wisej.Core.IWisejComponent)"/>.</param>
        </member>
        <member name="T:Wisej.Core.ResponseManager.Http">
            <summary>
            ResponseManager for Http requests.
            </summary>
        </member>
        <member name="P:Wisej.Core.ResponseManager.Http.IsWebSocket">
            <summary>
            This is NOT the WebSocket manager.
            </summary>
        </member>
        <member name="P:Wisej.Core.ResponseManager.Http.IsHttp">
            <summary>
            This is the Http manager.
            </summary>
        </member>
        <member name="P:Wisej.Core.ResponseManager.Http.Modal">
            <summary>
            Store for the modal frame managed by this thread.
            </summary>
        </member>
        <member name="M:Wisej.Core.ResponseManager.Http.DoModal(Wisej.Core.IWisejComponent)">
            <summary>
            Enters a modal loop blocking this thread.
            </summary>
            <param name="component">The <see cref="T:Wisej.Core.IWisejComponent"/> that entered the modal state.</param>
            <returns>One of the <see cref="T:Wisej.Base.ModalResult"/> values.</returns>
        </member>
        <member name="M:Wisej.Core.ResponseManager.Http.EndModal(Wisej.Core.IWisejComponent,Wisej.Base.ModalResult)">
            <summary>
            Terminates the current (last) modal loop and returns the result.
            </summary>
            <param name="component">The <see cref="T:Wisej.Core.IWisejComponent"/> that entered the modal state.</param>
            <param name="result">One of the <see cref="T:Wisej.Base.ModalResult"/> value that will be returned
            by <see cref="M:Wisej.Core.ResponseManager.Http.DoModal(Wisej.Core.IWisejComponent)"/>.</param>
        </member>
        <member name="T:Wisej.Core.ResponseManager.WebSocket">
            <summary>
            ResponseManager for WebSocket requests.
            </summary>
        </member>
        <member name="P:Wisej.Core.ResponseManager.WebSocket.IsWebSocket">
            <summary>
            This is the WebSocket manager.
            </summary>
        </member>
        <member name="P:Wisej.Core.ResponseManager.WebSocket.IsHttp">
            <summary>
            This is NOT the Http manager.
            </summary>
        </member>
        <member name="P:Wisej.Core.ResponseManager.WebSocket.Modal">
            <summary>
            WebSocket don't save the current modal frame.
            </summary>
        </member>
        <member name="M:Wisej.Core.ResponseManager.WebSocket.DoModal(Wisej.Core.IWisejComponent)">
            <summary>
            Enters a modal loop blocking this thread.
            </summary>
            <param name="component">The <see cref="T:Wisej.Core.IWisejComponent"/> that entered the modal state.</param>
            <returns>One of the <see cref="T:Wisej.Base.ModalResult"/> values.</returns>
        </member>
        <member name="M:Wisej.Core.ResponseManager.WebSocket.EndModal(Wisej.Core.IWisejComponent,Wisej.Base.ModalResult)">
            <summary>
            Terminates the current (last) modal loop and returns the result.
            </summary>
            <param name="component">The <see cref="T:Wisej.Core.IWisejComponent"/> that entered the modal state.</param>
            <param name="result">One of the <see cref="T:Wisej.Base.ModalResult"/> value that will be returned
            by <see cref="M:Wisej.Core.ResponseManager.WebSocket.DoModal(Wisej.Core.IWisejComponent)"/>.</param>
        </member>
        <member name="T:Wisej.Core.ResponseManager.ServiceType">
            <summary>
            Type of service requested by the client.
            </summary>
        </member>
        <member name="M:Wisej.Core.ResponseManager.Dispose">
            <summary>
            The ResponseManager is being destroyed. If this is
            the Http manager, this happens at the end of every request, for the
            WebSocket manager it happens only when the connection is terminated.
            </summary>
        </member>
        <member name="P:Wisej.Core.ResponseManager.IsDisposed">
            <summary>
            Returns true if this ResponseManager has been disposed.
            </summary>
        </member>
        <member name="P:Wisej.Core.ResponseManager.Wisej#Core#IWisejSynchronized#SyncLock">
            <summary>
            Returns the object to use to synchronize access.
            </summary>
        </member>
        <member name="T:Wisej.Core.SessionManager">
            <summary>
            Manages Wisej sessions.
            </summary>
        </member>
        <member name="P:Wisej.Core.SessionManager.NewId">
            <summary>
            Returns a new unique session id.
            </summary>
        </member>
        <member name="P:Wisej.Core.SessionManager.CacheProvider">
            <summary>
            Returns the singleton cache provider configured in web.config.
            </summary>
        </member>
        <member name="M:Wisej.Core.SessionManager.Create(Wisej.Core.ResponseManager,System.Object)">
            <summary>
            Creates a new Session and saves it into the global application cache.
            
            The cache entry is set to expire twice the number of seconds of the keep alive interval.
            That means that if the server doesn't hear from the client for KeepAliveInterval * 2 seconds it
            will remove the session and terminate the session. Cold turkey.
            </summary>
            <param name="response">The instance of the ResponseManager that is restoring the session.</param>
            <param name="message">The message payload being processed by the ResponseManager.</param>
            <returns>A new <see cref="T:Wisej.Core.Session"/>.</returns>
        </member>
        <member name="F:Wisej.Core.SessionManager.ActiveCount">
            <summary>
            The total number of active sessions.
            </summary>
        </member>
        <member name="M:Wisej.Core.SessionManager.OnCacheItemRemoved(System.String,System.Object,System.Web.Caching.CacheItemRemovedReason)">
            <summary>
            Invoked when a Session is removed from the cache.
            </summary>
            <param name="key">Key of the session being removed.</param>
            <param name="value">Session instance being removed.</param>
            <param name="reason">Reason for the removal.</param>
        </member>
        <member name="M:Wisej.Core.SessionManager.Restore(Wisej.Core.ResponseManager,System.Object,Wisej.Core.ResponseManager.ServiceType)">
            <summary>
            Restores the Session from the application global cache.
            </summary>
            <param name="manager">The instance of the ResponseManager that is restoring the session.</param>
            <param name="message">The message payload being processed by the ResponseManager.</param>
            <param name="service">Service type requested by the client.</param>
        </member>
        <member name="M:Wisej.Core.SessionManager.Restore(Wisej.Core.ResourceManager,System.Object,System.Boolean)">
            <summary>
            Restores the Session from the application global cache using the cookie, or the data in the message.
            </summary>
            <param name="manager">The instance of the ResourceManager that is restoring the session.</param>
            <param name="message">The message payload being processed by the ResponseManager.</param>
            <param name="validate">if true, the session validates the client fingerprint.</param>
        </member>
        <member name="M:Wisej.Core.SessionManager.Restore(Wisej.Core.WisejContext,System.Object,System.Boolean)">
            <summary>
            Restores the Session from the application global cache.
            </summary>
            <param name="context">The request context.</param>
            <param name="message">The message payload being processed by the ResponseManager.</param>
            <param name="validate">if true, the session validates the client fingerprint.</param>
        </member>
        <member name="M:Wisej.Core.SessionManager.Restore(System.Web.HttpRequest)">
            <summary>
            Restores the Session from the application global cache using the 
            id of the session stored in the URL of the request or the referrer.
            
            Used primarily by HttpModule to restore the Wisej Session when 
            processing an ASP.NET/MVC page hosted in a Wisej Application.
            </summary>
            <param name="request">Current <see cref="T:System.Web.HttpRequest"/>.</param>
        </member>
        <member name="M:Wisej.Core.SessionManager.Remove(Wisej.Core.Session)">
            <summary>
            Removes the session.
            </summary>
            <param name="session"></param>
        </member>
        <member name="M:Wisej.Core.SessionManager.EndRequest(Wisej.Core.Session)">
            <summary>
            Updates the Session in the cache.
            </summary>
            <param name="session"></param>
        </member>
        <member name="M:Wisej.Core.SessionManager.ReadSessionId(Wisej.Core.WisejContext,System.Object)">
            <summary>
            Returns the session id from: 1-the payload, 2-request data, 3-url, 4-cookie.
            </summary>
            <param name="context"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="P:Wisej.Core.SessionManager.ActiveSessionCount">
            <summary>
            Returns the active session count.
            </summary>
        </member>
        <member name="M:Wisej.Core.SessionManager.CreateCacheProvider">
            <summary>
            Returns an instance of the cache provider configured in web.config.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Wisej.Core.SessionManager.DefaultCacheProvider">
            <summary>
            The default cache provider using HttpApplication.Cache.
            </summary>
        </member>
        <member name="T:Wisej.Core.Session">
            <summary>
            Contains the full state for the user session.
            </summary>
        </member>
        <member name="M:Wisej.Core.Session.#ctor(Wisej.Core.ResponseManager)">
            <summary>
            Creates a new session.
            </summary>
            <param name="response">The instance of the ResponseManager that is creating the session.</param>
        </member>
        <member name="P:Wisej.Core.Session.Current">
            <summary>
            Returns the current Session. The
            singleton is saved in a ThreadStatic variable and 
            updated each time the thread starts processing a new request.
            </summary>
        </member>
        <member name="P:Wisej.Core.Session.ResponseManager">
            <summary>
            Returns the ResponseManager associated with this session.
            
            WebSocket ResponseManagers are stored with the session to be
            reused by different threads/requests.
            
            Http ResponseManagers are stored at the beginning of a request and cleared
            at the end of the request when unlocking the session.
            </summary>
        </member>
        <member name="P:Wisej.Core.Session.ComponentManager">
            <summary>
            Returns the ComponentManager instance associated with the session.
            There is always only one instance of the ComponentManager per session.
            </summary>
        </member>
        <member name="M:Wisej.Core.Session.ReadApplicationUri(Wisej.Core.WisejContext)">
            <summary>
            Reads the startup Uri from the request.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.Session.IsValidClient(Wisej.Core.WisejContext)">
            <summary>
            Checks if the client that has restored this session has the same
            fingerprint as the client that created it in the first place.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.Session.IsApplicationUrl(Wisej.Core.WisejContext)">
            <summary>
            Checks if the URL is the same as the URL used to
            launch the application.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.Session.ReadClientFingerPrint(Wisej.Core.WisejContext)">
            <summary>
            Returns a (almost) unique signature to identify the client.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.Session.PushModalFrame(Wisej.Core.IWisejComponent)">
            <summary>
            Creates a new modal frame and pushes it to the modal frame stack.
            </summary>
            <param name="component">The <see cref="T:Wisej.Core.IWisejComponent"/> that started the modal state.</param>
            <returns>A new instance of <see cref="T:Wisej.Core.Session.ModalFrame"/>.</returns>
        </member>
        <member name="M:Wisej.Core.Session.PopModalFrame(Wisej.Core.IWisejComponent)">
            <summary>
            Pops the last modal frame from the stack.
            </summary>
            <param name="component">The <see cref="T:Wisej.Core.IWisejComponent"/> that started the modal state.</param>
            <returns>Either the last <see cref="T:Wisej.Core.Session.ModalFrame"/> pushed on the stack or null
            if the component associated with the modal frame doesn't match <paramref name="component"/>. </returns>
        </member>
        <member name="T:Wisej.Core.Session.ModalFrame">
            <summary>
            Represents a frame in the modal stack.
            </summary>
        </member>
        <member name="P:Wisej.Core.Session.IsDisposed">
            <summary>
            Returns true if this context has been disposed.
            </summary>
        </member>
        <member name="M:Wisej.Core.Session.Dispose">
            <summary>
            Clean up all the application resources held up by the session.
            </summary>
        </member>
        <member name="E:Wisej.Core.Session.Disposed">
            <summary>
            Fired when the session is disposed.
            </summary>
        </member>
        <member name="P:Wisej.Core.Session.Wisej#Core#IWisejSynchronized#SyncLock">
            <summary>
            Returns the object to use to synchronize access.
            </summary>
        </member>
        <member name="T:Wisej.Core.WebMethodAttribute">
            <summary>
            Indicates that the method can be called from the browser
            using JavaScript.
            </summary>
            <remarks>
            <para>
            You can add this attribute to static methods in your Wisej application
            Program class and to instance methods in top level containers: Page, Form, and Desktop.
            </para>
            <para>
            If you want to register web methods on child controls, you can, but Wisej only searches
            top level containers automatically. To register web methods on a child control, extend
            the control class, override <see cref="M:Wisej.Web.Control.OnWebRender"/> and
            call <see cref="M:Wisej.Web.Control.RegisterWebMethods"/>.
            </para>
            <code lang="cs">
            public class MyButton : Button
            {
            	protected override void OnWebRender(dynamic config)
            	{
            		base.OnWebRender((object)config);
            		RegisterWebMethods(config);
            	}
            }
            </code>
            </remarks>
        </member>
        <member name="M:Wisej.Core.WebMethodAttribute.#ctor">
            <summary>
            Initializes the <see cref="T:Wisej.Core.WebMethodAttribute"/> attribute.
            </summary>
        </member>
        <member name="M:Wisej.Core.WebMethodAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the <see cref="T:Wisej.Core.WebMethodAttribute"/> attribute.
            </summary>
            <param name="inheritable">Indicates whether the web method is inherited by derived classes.</param>
        </member>
        <member name="P:Wisej.Core.WebMethodAttribute.Inheritable">
            <summary>
            Returns a value indicating whether the web method is inherited by derived classes.
            </summary>
        </member>
        <member name="M:Wisej.Core.WebMethodAttribute.IsWebMethod(System.Reflection.MethodInfo,System.Type)">
            <summary>
            Checks if the specified <paramref name="method"/> can be called as a web method.
            </summary>
            <param name="method">The <see cref="T:System.Reflection.MethodInfo"/> descriptor.</param>
            <param name="targetType">Target type for the method call.</param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.WebMethodAttribute.GetMethods(System.Type,System.Boolean)">
            <summary>
            Returns the registered web methods on the object.
            </summary>
            <param name="type">The type defining the web methods.</param>
            <param name="declaredOnly">True to enumerate the web methods declared in <paramref name="type"/> ignoring inherited methods.</param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.WebMethodAttribute.GetMethod(System.Type,System.String,System.Int32)">
            <summary>
            Returns the request web method.
            </summary>
            <param name="type">The type to search to the web method <paramref name="name"/>.</param>
            <param name="name">Name of the web method to find.</param>
            <param name="parametersCount">Number of parameters of the web method to find.</param>
            <returns></returns>
        </member>
        <member name="T:Wisej.Core.WisejConfiguration">
            <summary>
            Reads the Wisej application settings.
            </summary>
        </member>
        <member name="P:Wisej.Core.WisejConfiguration.LicenseKey">
            <summary>
            License Key.
            </summary>
        </member>
        <member name="P:Wisej.Core.WisejConfiguration.DefaultTheme">
            <summary>
            Default application theme.
            </summary>
        </member>
        <member name="P:Wisej.Core.WisejConfiguration.DebugMode">
            <summary>
            Debug mode.
            </summary>
        </member>
        <member name="P:Wisej.Core.WisejConfiguration.DesignMode">
            <summary>
            Design mode.
            </summary>
        </member>
        <member name="P:Wisej.Core.WisejConfiguration.ProjectPath">
            <summary>
            Project's full path at design time.
            </summary>
        </member>
        <member name="P:Wisej.Core.WisejConfiguration.AssemblyName">
            <summary>
            Project's assembly name at design time.
            </summary>
        </member>
        <member name="P:Wisej.Core.WisejConfiguration.DefaultNamespace">
            <summary>
            Project's default namespace name at design time.
            </summary>
        </member>
        <member name="P:Wisej.Core.WisejConfiguration.LocalHost">
            <summary>
            Design time local embedded http server url.
            </summary>
        </member>
        <member name="P:Wisej.Core.WisejConfiguration.WebApplication">
            <summary>
            Design time reference to IWebApplication. Used to read web.config at design time.
            </summary>
        </member>
        <member name="M:Wisej.Core.WisejConfiguration.GetValue(System.String,System.String)">
            <summary>
            Returns the configuration setting or the default value.
            </summary>
            <param name="name"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="T:Wisej.Core.Configuration">
            <summary>
            Wisej configuration settings.
            </summary>
        </member>
        <member name="F:Wisej.Core.Configuration.Timestamp">
            <summary>
            The last file modified time.
            </summary>
        </member>
        <member name="E:Wisej.Core.Configuration.LoadConfiguration">
            <summary>
            Fired when the system needs to load a Wisej configuration file.
            </summary>
        </member>
        <member name="M:Wisej.Core.Configuration.#ctor(System.String)">
            <summary>
            Creates a new instance from the specified <para>json</para> string.
            </summary>
            <param name="json">The json string that defines the configuration values.</param>
        </member>
        <member name="M:Wisej.Core.Configuration.GetInstance(Wisej.Core.WisejContext,System.Uri)">
            <summary>
            Loads or retrieves the configuration file.
            </summary>
            <param name="context"></param>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.Configuration.GetInstance(System.String)">
            <summary>
            Loads or retrieves the configuration file.
            </summary>
            <param name="filePath">The full path to the .json file to load.</param>
            <returns></returns>
        </member>
        <member name="F:Wisej.Core.Configuration.Empty">
            <summary>
            Shared empty instance. Used when a configuration object cannot be found.
            </summary>
        </member>
        <member name="P:Wisej.Core.Configuration.IsEmpty">
            <summary>
            Checks whether this instance is the same as the shared Empty instance.
            </summary>
        </member>
        <member name="P:Wisej.Core.Configuration.FilePath">
            <summary>
            The full path of the configuration file.
            </summary>
        </member>
        <member name="P:Wisej.Core.Configuration.StartUp">
            <summary>
            The startup Main method.
            </summary>
        </member>
        <member name="P:Wisej.Core.Configuration.AutoReload">
            <summary>
            When true, the application is automatically reloaded
            when the session expires or <see cref="M:Wisej.Base.ApplicationBase.Exit"/> is called.
            </summary>
            <remarks>
            The application can always override this feature by changing
            the Wisej.onExit method using a script.
            <code lang="js">
            <![CDATA[
            	<script>
            		Wisej.onExit = function() {
            			// this is the default implementation
            			// when AutoReload is set to true.
            			location.reload();
            		}
            	</script>
            ]]>
            </code>
            </remarks>
        </member>
        <member name="P:Wisej.Core.Configuration.MainWindow">
            <summary>
            Full name of the first window created automatically at startup.
            </summary>
        </member>
        <member name="P:Wisej.Core.Configuration.ThemeName">
            <summary>
            Theme name.
            </summary>
        </member>
        <member name="P:Wisej.Core.Configuration.Url">
            <summary>
            Url redirection.
            </summary>
        </member>
        <member name="P:Wisej.Core.Configuration.AllowedRoutes">
            <summary>
            List of allowed Url routes separated by a semicolon.
            i.e.: "api;product;log/performance".
            </summary>
        </member>
        <member name="P:Wisej.Core.Configuration.Culture">
            <summary>
            Returns the culture set at the application's level.
            It can be any of the supported cultures or the
            keyword "auto", in which case we will detect the culture from the browser.
            </summary>
        </member>
        <member name="P:Wisej.Core.Configuration.RightToLeft">
            <summary>
            Returns the rightToLeft mode.
            It can be "true", "false", or "auto". When set to 
            "auto" the RightToLeft layout is enabled automatically
            using the current language. The default is "auto".
            </summary>
        </member>
        <member name="P:Wisej.Core.Configuration.IsRightToLeft">
            <summary>
            Returns null when <see cref="P:Wisej.Core.Configuration.RightToLeft"/> is set to "auto". Otherwise
            returns whether <see cref="P:Wisej.Core.Configuration.RightToLeft"/> is "true" or "false".
            </summary>
        </member>
        <member name="P:Wisej.Core.Configuration.SessionTimeout">
            <summary>
            The session timeout in seconds. The timeout is enforced on the client side.
            </summary>
        </member>
        <member name="P:Wisej.Core.Configuration.ResponseTimeout">
            <summary>
            The timeout for the server to respond to a wisej request in seconds.
            </summary>
        </member>
        <member name="P:Wisej.Core.Configuration.LoaderTimeout">
            <summary>
            The ajax loader timeout in milliseconds.
            </summary>
        </member>
        <member name="P:Wisej.Core.Configuration.KeepAliveInterval">
            <summary>
            The keep-alive interval in seconds.
            </summary>
        </member>
        <member name="P:Wisej.Core.Configuration.PollingInterval">
            <summary>
            Polling interval in milliseconds. The default is zero (disabled). If this value
            is set, the polling starts when the application is loaded.
            </summary>
            <remarks>
            <para>
            The polling interval determines the frequency of the automatic
            poll requests coming from the client when a WebSocket connection is not
            available. When the client is connected using a WebSocket channel, this
            value is ignored.
            </para>
            <para>
            An application that wants to enable automatic client updates in absence
            of a WebSocket connection can set this value, or it can call
            <see cref="M:Wisej.Base.ApplicationBase.StartPolling(System.Int32)"/> and <see cref="M:Wisej.Base.ApplicationBase.EndPolling"/> 
            to start and terminate the automatic polling from the client. Both methods are ignored when
            the client is using a WebSocket connection.
            </para>
            </remarks>
        </member>
        <member name="P:Wisej.Core.Configuration.Secure">
            <summary>
            Forces the client to switch to a secure connection (HTTPS and WSS).
            </summary>
        </member>
        <member name="P:Wisej.Core.Configuration.ValidateClient">
            <summary>
            Verifies the client fingerprint when retrieving a session.
            It prevents session hijacking over unsecured connections.
            </summary>
        </member>
        <member name="P:Wisej.Core.Configuration.ShowLoader">
            <summary>
            Shows the loader animated gif while initializing the application.
            </summary>
        </member>
        <member name="P:Wisej.Core.Configuration.Debug">
            <summary>
            Enabled/disables debug mode.
            </summary>
        </member>
        <member name="P:Wisej.Core.Configuration.Options">
            <summary>
            Native client-side platform options.
            </summary>
        </member>
        <member name="P:Wisej.Core.Configuration.Settings">
            <summary>
            Application settings.
            </summary>
        </member>
        <member name="P:Wisej.Core.Configuration.EnableWebSocket">
            <summary>
            Enabled/disables the WebSocket protocol.
            </summary>
        </member>
        <member name="P:Wisej.Core.Configuration.EnableWebSocketCompression">
            <summary>
            Enabled/disables gzip compression when using the WebSocket protocol.
            </summary>
        </member>
        <member name="P:Wisej.Core.Configuration.MaxSessions">
            <summary>
            Returns the maximum number of active sessions before 
            redirecting to <see cref="P:Wisej.Core.Configuration.NotAvailableUrl"/>.
            </summary>
        </member>
        <member name="P:Wisej.Core.Configuration.MaxModalStack">
            <summary>
            Returns the maximum number of nested modal loops.
            </summary>
        </member>
        <member name="P:Wisej.Core.Configuration.BrowserCheck">
            <summary>
            The custom function used to validate the browser. If it returns false the browser
            is not supported and Wisej redirects to NotSupportedUrl.
            </summary>
        </member>
        <member name="P:Wisej.Core.Configuration.NotSupportedUrl">
            <summary>
            The URL of the page to load when the client browser is not supported.
            </summary>
        </member>
        <member name="P:Wisej.Core.Configuration.NotAvailableUrl">
            <summary>
            The URL of the page to load when the server cannot respond to the request.
            </summary>
        </member>
        <member name="P:Wisej.Core.Configuration.InvalidEntries">
            <summary>
            Returns the list of the invalid entries found on the configuration file.
            </summary>
        </member>
        <member name="P:Wisej.Core.Configuration.Exception">
            <summary>
            Returns the exception that was handled when loading the json configuration file.
            </summary>
        </member>
        <member name="P:Wisej.Core.Configuration.Standalone">
            <summary>
            Returns whether this Wisej application is running in a standalone host (Wisej.Application.exe).
            </summary>
        </member>
        <member name="P:Wisej.Core.Configuration.DropDuplicateClicks">
            <summary>
            When true, the client drops all "execute" events triggered while there is a pending request.
            </summary>
        </member>
        <member name="P:Wisej.Core.Configuration.DisableClientObjectModel">
            <summary>
            When true, the client will not be able to access the application's
            controls using the object model registered with javascript under the "App" namespace.
            </summary>
        </member>
        <member name="T:Wisej.Core.LoadConfigurationEventHandler">
            <summary>
            Represents a method that handles the <see cref="E:Wisej.Core.Configuration.LoadConfiguration"/> event.
            </summary>
            <param name="sender">The source of the event. Always null.</param>
            <param name="args">The event data.</param>
            <returns></returns>
        </member>
        <member name="T:Wisej.Core.LoadConfigurationEventArgs">
            <summary>
            Specifies the event arguments for the <see cref="E:Wisej.Core.Configuration.LoadConfiguration"/> event.
            </summary>
        </member>
        <member name="P:Wisej.Core.LoadConfigurationEventArgs.FilePath">
            <summary>
            The full file path to the configuration file to load.
            </summary>
        </member>
        <member name="T:Wisej.Core.WisejContext">
            <summary>
            Wrapper for HttpContext or AspWebSocketContext.
            Provides standardizes services to the ResponseManager.
            </summary>
        </member>
        <member name="P:Wisej.Core.WisejContext.IsWebSocket">
            <summary>
            Returns true if in WbeSocket mode.
            </summary>
        </member>
        <member name="P:Wisej.Core.WisejContext.SupportsWebSocket">
            <summary>
            Checks if the client and the server support the WebSocket protocol.
            </summary>
        </member>
        <member name="P:Wisej.Core.WisejContext.SupportsWebSocketCompression">
            <summary>
            Checks if the client support the array buffers for the WebSocket compression.
            </summary>
        </member>
        <member name="P:Wisej.Core.WisejContext.URL">
            <summary>
            Returns the current URL.
            </summary>
        </member>
        <member name="P:Wisej.Core.WisejContext.HostName">
            <summary>
            Returns the entry host name.
            </summary>
        </member>
        <member name="P:Wisej.Core.WisejContext.QueryString">
            <summary>
            Returns the query string parsed from the request.
            </summary>
        </member>
        <member name="P:Wisej.Core.WisejContext.Request">
            <summary>
            Returns the HttpRequest object.
            </summary>
        </member>
        <member name="P:Wisej.Core.WisejContext.Response">
            <summary>
            Returns the HttpResponse object.
            </summary>
        </member>
        <member name="P:Wisej.Core.WisejContext.LogonUserIdentity">
            <summary>
            Returns the security token for the current Windows user.
            </summary>
        </member>
        <member name="P:Wisej.Core.WisejContext.User">
            <summary>
            Returns the security information for the current request.
            </summary>
        </member>
        <member name="P:Wisej.Core.WisejContext.IsAuthenticated">
            <summary>
            Returns a value indicating whether the request has been authenticated.
            </summary>
        </member>
        <member name="P:Wisej.Core.WisejContext.ServerVariables">
            <summary>
            Returns the server variables collection.
            </summary>
        </member>
        <member name="P:Wisej.Core.WisejContext.IsSecure">
            <summary>
            Returns a value indicating whether the HTTP connection uses secure sockets (that
            is, HTTPS or WSS).
            </summary>
        </member>
        <member name="P:Wisej.Core.WisejContext.UrlReferrer">
            <summary>
            Returns the referrer URI.
            </summary>
        </member>
        <member name="P:Wisej.Core.WisejContext.Cookies">
            <summary>
            Returns the cookie collection.
            </summary>
        </member>
        <member name="P:Wisej.Core.WisejContext.Headers">
            <summary>
            Returns the headers collection.
            </summary>
        </member>
        <member name="P:Wisej.Core.WisejContext.UserHostAddress">
            <summary>
            Returns the UserHostAddress.
            </summary>
        </member>
        <member name="P:Wisej.Core.WisejContext.UserAgent">
            <summary>
            Returns the v.
            </summary>
        </member>
        <member name="M:Wisej.Core.WisejContext.AddHeader(System.String,System.String)">
            <summary>
            Adds the header to the Http response.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Wisej.Core.WisejContext.MapPath(System.String)">
            <summary>
            Maps the path to the server path.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="P:Wisej.Core.WisejContext.Configuration">
            <summary>
            Returns the configuration settings bound to this context.
            
            We use the url to load the corresponding Wisej configuration json file.
            </summary>
        </member>
        <member name="P:Wisej.Core.WisejContext.Output">
            <summary>
            Returns the output stream.
            
            NOT SYNCHRONIZED.
            </summary>
        </member>
        <member name="M:Wisej.Core.WisejContext.End">
            <summary>
            Terminates the request. Works only for Http.
            </summary>
        </member>
        <member name="M:Wisej.Core.WisejContext.CloseWebSocket(System.String)">
            <summary>
            Closes the underlying WebSocket.
            </summary>
            <param name="reason"></param>
        </member>
        <member name="M:Wisej.Core.WisejContext.Write(System.String)">
            <summary>
            Writes the JSON string to the current output buffer.
            </summary>
            <param name="json">JSON string to append to the output buffer.</param>
        </member>
        <member name="M:Wisej.Core.WisejContext.SendResponse">
            <summary>
            Sends the response data back to the client.
            </summary>
        </member>
        <member name="M:Wisej.Core.WisejContext.UpdateWebSocketAuthentication">
            <summary>
            Updates the stored authentication fields using the
            current HttpContext. It's called when the browser tab is
            activated to detect if the AspNet authentication has changed.
            </summary>
        </member>
        <member name="P:Wisej.Core.WisejContext.IsDisposed">
            <summary>
            Returns true if this context has been disposed.
            </summary>
        </member>
        <member name="T:Wisej.Core.WisejEventArgs">
            <summary>
            Default arguments for Wisej events.
            </summary>
        </member>
        <member name="M:Wisej.Core.WisejEventArgs.#ctor(Wisej.Core.IWisejComponent,System.String,System.Object)">
            <summary>
            Creates a new instance of WisejEventArgs
            </summary>
            <param name="target">The target component.</param>
            <param name="type">The event type.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:Wisej.Core.WisejEventArgs.#ctor(System.Object)">
            <summary>
            Creates a new instance of WisejEventArgs using the incoming event data.
            </summary>
            <param name="e">The event data received from the client.</param>
        </member>
        <member name="P:Wisej.Core.WisejEventArgs.Target">
            <summary>
            Target component.
            </summary>
        </member>
        <member name="P:Wisej.Core.WisejEventArgs.OriginalTarget">
            <summary>
            Returns the original target of the event.
            </summary>
            <remarks>
            This property returns the Wisej component that was the original target of the event. It is mostly used
            by drag and drop operation when dropping on top of a child component, like a treenode or a listview item.
            </remarks>
        </member>
        <member name="P:Wisej.Core.WisejEventArgs.Type">
            <summary>
            Event type.
            </summary>
        </member>
        <member name="P:Wisej.Core.WisejEventArgs.Parameters">
            <summary>
            Event parameters.
            </summary>
        </member>
        <member name="F:Wisej.Core.WisejEventArgs.Pointer">
            <summary>
            Pointer information.
            </summary>
        </member>
        <member name="F:Wisej.Core.WisejEventArgs.Role">
            <summary>
            The "role" attribute of the clicked element.
            </summary>
        </member>
        <member name="F:Wisej.Core.WisejEventArgs.Keyboard">
            <summary>
            Keyboard information.
            </summary>
        </member>
        <member name="M:Wisej.Core.WisejEventArgs.ToString">
            <summary>
            Returns a string that represents the <see cref="T:Wisej.Core.WisejEventArgs" /> values.
            </summary>
            <returns>A <see cref="T:System.String" /> that represent the type and state of the instance.</returns>
        </member>
        <member name="T:Wisej.Core.WisejEventArgs.PointerInfo">
            <summary>
            Pointer information from the event.
            </summary>
        </member>
        <member name="P:Wisej.Core.WisejEventArgs.PointerInfo.IsEmpty">
            <summary>
            Indicates whether the PointerInfo properties have been initialize or not.
            </summary>
        </member>
        <member name="P:Wisej.Core.WisejEventArgs.PointerInfo.Location">
            <summary>
            Pointer location.
            </summary>
        </member>
        <member name="P:Wisej.Core.WisejEventArgs.PointerInfo.Button">
            <summary>
            Mouse button.
            </summary>
        </member>
        <member name="P:Wisej.Core.WisejEventArgs.PointerInfo.WheelDelta">
            <summary>
            Wheel delta.
            </summary>
        </member>
        <member name="P:Wisej.Core.WisejEventArgs.PointerInfo.Modifiers">
            <summary>
            Keyboard modifiers.
            </summary>
        </member>
        <member name="M:Wisej.Core.WisejEventArgs.PointerInfo.ToString">
            <summary>
            Returns a string that represents the <see cref="T:Wisej.Core.WisejEvents.PointerInfo" /> values.
            </summary>
            <returns>A <see cref="T:System.String" /> that represent the type and state of the instance.</returns>
        </member>
        <member name="T:Wisej.Core.WisejEventArgs.KeyboardInfo">
            <summary>
            Keyboard informs from the event.
            </summary>
        </member>
        <member name="P:Wisej.Core.WisejEventArgs.KeyboardInfo.IsEmpty">
            <summary>
            Indicates whether the KeyboardInfo properties have been initialize or not.
            </summary>
        </member>
        <member name="P:Wisej.Core.WisejEventArgs.KeyboardInfo.Modifiers">
            <summary>
            Keyboard modifiers.
            </summary>
        </member>
        <member name="P:Wisej.Core.WisejEventArgs.KeyboardInfo.KeyValue">
            <summary>
            Raw pressed key code.
            </summary>
        </member>
        <member name="P:Wisej.Core.WisejEventArgs.KeyboardInfo.KeyCode">
            <summary>
            Pressed key.
            </summary>
        </member>
        <member name="P:Wisej.Core.WisejEventArgs.KeyboardInfo.KeyData">
            <summary>
            Pressed key with modifier.
            </summary>
        </member>
        <member name="M:Wisej.Core.WisejEventArgs.KeyboardInfo.ToString">
            <summary>
            Returns a string that represents the <see cref="T:Wisej.Core.WisejEvents.KeyboardInfo" /> values.
            </summary>
            <returns>A <see cref="T:System.String" /> that represent the type and state of the instance.</returns>
        </member>
        <member name="T:Wisej.Core.WisejResourcesAttribute">
            <summary>
            Enables automatic resource loading form the assembly.
            </summary>
        </member>
        <member name="M:Wisej.Core.WisejResourcesAttribute.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Wisej.Core.WisejResourcesAttribute"/>.
            </summary>
        </member>
        <member name="M:Wisej.Core.WisejResourcesAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Wisej.Core.WisejResourcesAttribute"/> using the
            initialization arguments.
            </summary>
            <param name="ExcludeList">List of resource files to exclude.</param>
        </member>
        <member name="M:Wisej.Core.WisejResourcesAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Wisej.Core.WisejResourcesAttribute"/> using the
            initialization arguments.
            </summary>
            <param name="ExcludeList">List of resource files to exclude.</param>
            <param name="RootName">Default namespace. If left null, it uses the assembly name.</param>
        </member>
        <member name="P:Wisej.Core.WisejResourcesAttribute.ExcludeList">
            <summary>
            List of embedded resource files that are excluded from
            the bundled js and css in wisej.js and wisej.css.
            </summary>
        </member>
        <member name="P:Wisej.Core.WisejResourcesAttribute.RootName">
            <summary>
            Default namespace name, or root name of the embedded resources.
            </summary>
        </member>
        <member name="M:Wisej.Core.WisejResourcesAttribute.GetAttribute(System.Reflection.Assembly)">
            <summary>
            Returns the <see cref="T:Wisej.Core.WisejResourcesAttribute"/> assigned
            to the specified <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The assembly for which to retrieve the <see cref="T:Wisej.Core.WisejResourcesAttribute"/>.</param>
            <returns>The instance of the <see cref="T:Wisej.Core.WisejResourcesAttribute"/> assigned to the assembly or null.</returns>
        </member>
        <member name="T:Wisej.Core.IWisejSerializable">
            <summary>
            Allows an object to serialize itself.
            </summary>
        </member>
        <member name="M:Wisej.Core.IWisejSerializable.Serialize(System.IO.TextWriter,Wisej.Core.WisejSerializerOptions)">
            <summary>
            Serialize the object in JSON format.
            </summary>
            <param name="writer">The JSON text writer.</param>
            <param name="options">Set of serializer options.</param>
            <returns>True of the object handled the serialization, otherwise false to perform the default serialization.</returns>
        </member>
        <member name="T:Wisej.Core.WisejSerializer">
            <summary>
            Wisej super performant JSON serializer.
            
            This is a high performant and low memory footprint JSON serializer/deserializer.
            It has been optimized to work with Wisej DynamicObject and to streamline serialization/deserialization.
            
            It appears to be the fastest JSON serializer/deserializer using the least memory.
            </summary>
        </member>
        <member name="T:Wisej.Core.WisejSerializer.JsonWriter">
            <summary>
            Writes the serialized JSON to the destination stream.
            </summary>
            <remarks>
            The output can be formatted setting the Formatted property to true.
            </remarks>
        </member>
        <member name="M:Wisej.Core.WisejSerializer.SerializeInternal(System.Object,Wisej.Core.WisejSerializerOptions)">
            <summary>
            Serializes an object to a JSON string.
            </summary>
            <param name="value"></param>
            <param name="options">Serializer options.</param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.WisejSerializer.TranslateColor(System.Drawing.Color)">
            <summary>
            Translates the color to the equivalent HTML definition.
            
            - System colors are converted to their name matching the theme color.
            - Known named colors are converted to their lower case name.
            
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.WisejSerializer.TranslateFont(System.Drawing.Font)">
            <summary>
            Translate the windows font to a list of CSS font properties separated by a space.
            </summary>
            <param name="font"></param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.WisejSerializer.ParseInternal(System.String)">
            <summary>
            Deserializes a json string to a DynamicObject instance.
            </summary>
            <param name="json">The JSON source string.</param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.WisejSerializer.ParseInternal(System.IO.Stream)">
            <summary>
            Deserializes a json string stream to a DynamicObject instance.
            </summary>
            <param name="stream">The JSON source stream.</param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.WisejSerializer.Serialize(System.Object,Wisej.Core.WisejSerializerOptions)">
            <summary>
            Serializes an object to standard JSON.
            </summary>
            <param name="value"></param>
            <param name="options">Serializer options.</param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.WisejSerializer.Parse(System.String)">
            <summary>
            Deserializes a JSON string to a System.Wisej.Core.DynamicObject.
            </summary>
            <param name="json">The JSON source string.</param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.WisejSerializer.Parse(System.IO.Stream)">
            <summary>
            Deserializes a JSON stream to a System.Wisej.Core.DynamicObject.
            </summary>
            <param name="stream">The JSON source stream.</param>
            <returns></returns>
        </member>
        <member name="T:Wisej.Core.IWisejEditorService">
            <summary>
            Provides an interface for a <see cref="T:System.Drawing.Design.UITypeEditor" /> to display 
            an editor form or a control in a drop-down area from a property grid control.
            </summary>
        </member>
        <member name="M:Wisej.Core.IWisejEditorService.CloseDropDown">
            <summary>
            Closes any previously opened drop down control area.
            </summary>
        </member>
        <member name="M:Wisej.Core.IWisejEditorService.DropDownControl(Wisej.Base.ControlBase)">
            <summary>
            Displays the specified control in a drop down panel below a value field of the property grid that provides this service.
            </summary>
            <param name="control">The <see cref="T:Wisej.Base.ControlBase" /> to show in the drop down panel. </param>
        </member>
        <member name="M:Wisej.Core.IWisejEditorService.ShowDialog(Wisej.Core.IWisejWindow)">
            <summary>
            Shows the specified <see cref="T:Wisej.Web.Form" />.
            </summary>
            <returns>A <see cref="T:Wisej.Base.ModalResult" /> indicating the result returned by the <see cref="T:Wisej.Core.IWisejWindow" />.</returns>
            <param name="dialog">The <see cref="T:Wisej.Core.IWisejWindow" /> to display. </param>
        </member>
        <member name="T:Wisej.Core.LicenseRequest">
            <summary>
            Handler for license.wx requests.
            </summary>
        </member>
        <member name="T:Wisej.Core.License.LicenseInfo">
            <summary>
            Holds all the license information.
            </summary>
            <remarks>
            Uses this JSON:
            {
            	"success": true|false,
            	"error": "missing", "revoked" | "expired" | "no_activations_left",
            	"license_limit": false | #,
            	"site_count": #,
            	"expires": false | "yyyy-MM-DD hh:mm:ss",
            	"activations_left": "unlimited" | #,
            	"license": "invalid" | "valid",
            	"item_name":"",
            	"payment_id": false | "#",
            	"customer_name": "",
            	"customer_email": "",
            	"sku" : "",
            	"max_users" : # (0 = unlimited)
            }
            </remarks>
        </member>
        <member name="M:Wisej.Core.License.LicenseInfo.#ctor">
            <summary>
            Constructs an empty LicenseInfo.
            Used by the deserialization method FromString().
            </summary>
        </member>
        <member name="M:Wisej.Core.License.LicenseInfo.#ctor(System.String,System.String)">
            <summary>
            Constructs a new instance initialized with the specified data.
            </summary>
            <param name="key">License key.</param>
            <param name="json">License data from the activation server.</param>
        </member>
        <member name="P:Wisej.Core.License.LicenseInfo.Key">
            <summary>
            The license key.
            </summary>
        </member>
        <member name="P:Wisej.Core.License.LicenseInfo.Valid">
            <summary>
            Validity flag.
            </summary>
        </member>
        <member name="P:Wisej.Core.License.LicenseInfo.Status">
            <summary>
            Status of the license.
            </summary>
        </member>
        <member name="P:Wisej.Core.License.LicenseInfo.ExpirationDate">
            <summary>
            Expiration date for free upgrades.
            </summary>
        </member>
        <member name="P:Wisej.Core.License.LicenseInfo.MaxUsers">
            <summary>
            Maximum number of concurrent users (sessions) allowed by this license.
            </summary>
        </member>
        <member name="P:Wisej.Core.License.LicenseInfo.PaymentID">
            <summary>
            Returns the payment ID from the shopping cart.
            </summary>
        </member>
        <member name="P:Wisej.Core.License.LicenseInfo.CustomerEmail">
            <summary>
            Returns the email of the customer.
            </summary>
        </member>
        <member name="P:Wisej.Core.License.LicenseInfo.CustomerName">
            <summary>
            Returns the full name of the customer.
            </summary>
        </member>
        <member name="P:Wisej.Core.License.LicenseInfo.MAC">
            <summary>
            Returns the MAC address associated to the license when it was generated.
            </summary>
        </member>
        <member name="P:Wisej.Core.License.LicenseInfo.ProductName">
            <summary>
            Returns or sets the product name linked to the license.
            </summary>
        </member>
        <member name="P:Wisej.Core.License.LicenseInfo.SKU">
            <summary>
            Returns or sets the product code linked to the license.
            </summary>
        </member>
        <member name="P:Wisej.Core.License.LicenseInfo.Signature">
            <summary>
            SHA1 signature generated by the server.
            </summary>
        </member>
        <member name="P:Wisej.Core.License.LicenseInfo.LicenseType">
            <summary>
            Specifies the <see cref="P:Wisej.Core.License.LicenseInfo.LicenseType"/> .
            </summary>
        </member>
        <member name="P:Wisej.Core.License.LicenseInfo.IsTrial">
            <summary>
            Returns true if this license is a trial license.
            </summary>
        </member>
        <member name="P:Wisej.Core.License.LicenseInfo.IsBeta">
            <summary>
            Returns true if this license is a beta license.
            </summary>
        </member>
        <member name="P:Wisej.Core.License.LicenseInfo.FilePath">
            <summary>
            Returns the file path from where this license was loaded from.
            </summary>
        </member>
        <member name="P:Wisej.Core.License.LicenseInfo.LastException">
            <summary>
            Stores the last exception that occurred
            while activating or validating this license.
            </summary>
        </member>
        <member name="P:Wisej.Core.License.LicenseInfo.OriginalJSON">
            <summary>
            Stores the original JSON response received by the license server.
            </summary>
        </member>
        <member name="M:Wisej.Core.License.LicenseInfo.LoadResponse(System.String)">
            <summary>
            Loads  the response from the license server.
            </summary>
            <param name="json">License data from the activation server.</param>
        </member>
        <member name="M:Wisej.Core.License.LicenseInfo.ReadFromFile(System.String)">
            <summary>
            Reads the license from the file indicated by
            <paramref name="path"/>.
            </summary>
            <param name="path">File where to read the license from.</param>
            <returns>An instance of <see cref="T:Wisej.Core.License.LicenseInfo"/>.</returns>
        </member>
        <member name="M:Wisej.Core.License.LicenseInfo.SaveToFile(Wisej.Core.License.LicenseInfo,System.String)">
            <summary>
            Saves the <paramref name="license"/> to a file indicated
            by <paramref name="path"/>.
            </summary>
            <param name="license">License to save.</param>
            <param name="path">File where to save the license.</param>
        </member>
        <member name="M:Wisej.Core.License.LicenseInfo.ToString">
            <summary>
            Returns a string that represents the <see cref="T:Wisej.Core.License.LicenseInfo" /> values.
            </summary>
            <returns>A <see cref="T:System.String" /> that represent the type and state of the instance.</returns>
        </member>
        <member name="T:Wisej.Core.License.LicenseManager">
            <summary>
            Manages all things related to Wisej licensing.
            </summary>
        </member>
        <member name="M:Wisej.Core.License.LicenseManager.CheckLicense(System.String,System.Reflection.Assembly)">
            <summary>
            Verifies the license as follows:
            
            	- reads the license key and loads the existing license.
            	- if there is no license saved on the machine, activates the license key.
            	- if the license key is different from the saved license, activates the new license key.
            
            </summary>
            <param name="key">
            The known license key from web.config or entered by the user.
            Or null if the caller just wants to read and validate the local license.
            </param>
            <param name="assembly">The assembly requesting the license check.</param>
            <returns></returns>
        </member>
        <member name="M:Wisej.Core.License.LicenseManager.DeleteLicense">
            <summary>
            Deletes the license files.
            </summary>
        </member>
        <member name="M:Wisej.Core.License.LicenseManager.Activate(System.String,Wisej.Core.License.LicenseType)">
            <summary>
            Activates the specified license key.
            </summary>
            <param name="key">The license key to activate.</param>
            <param name="licenseType">The type of license being activated.</param>
            <returns>An instance of <see cref="T:Wisej.Core.License.LicenseInfo"/>.</returns>
        </member>
        <member name="M:Wisej.Core.License.LicenseManager.Validate(Wisej.Core.License.LicenseInfo,Wisej.Core.License.LicenseType)">
            <summary>
            Validates the specified LicenseInfo.
            </summary>
            <param name="license">The <see cref="T:Wisej.Core.License.LicenseInfo"/> to validate.</param>
            <param name="licenseType">The <see cref="T:Wisej.Core.License.LicenseType"/> being validated.</param>
        </member>
        <member name="M:Wisej.Core.License.LicenseManager.PerformAction(System.String,System.String)">
            <summary>
            Performs the request EDD action through a REST request.
            </summary>
            <param name="action">The action to perform: "activate_license", or "check_license".</param>
            <param name="license">The license key to validate or activate.</param>
            <returns>A JSON string with the response information returned by the license server.</returns>
        </member>
        <member name="T:Wisej.Core.License.LicenseType">
            <summary>
            Specified the type of license to load, check, or validate.
            </summary>
        </member>
        <member name="F:Wisej.Core.License.LicenseType.Invalid">
            <summary>
            Invalid license marker.
            </summary>
        </member>
        <member name="F:Wisej.Core.License.LicenseType.Developer">
            <summary>
            Developer license. It's valid only for the designer.
            </summary>
        </member>
        <member name="F:Wisej.Core.License.LicenseType.Server">
            <summary>
            Server license. It's valid only for the server.
            </summary>
        </member>
        <member name="F:Wisej.Core.License.LicenseType.Trial">
            <summary>
            Trial license.
            </summary>
        </member>
        <member name="F:Wisej.Core.License.LicenseType.Beta">
            <summary>
            Beta license.
            </summary>
        </member>
        <member name="T:Wisej.Core.License.LicenseStatus">
            <summary>
            License statuses.
            </summary>
        </member>
        <member name="F:Wisej.Core.License.LicenseStatus.Invalid">
            <summary>
            The license is invalid and cannot be  used..
            </summary>
        </member>
        <member name="F:Wisej.Core.License.LicenseStatus.Valid">
            <summary>
            The license key is valid.
            </summary>
        </member>
        <member name="F:Wisej.Core.License.LicenseStatus.Revoked">
            <summary>
            The license key has been revoked.
            </summary>
        </member>
        <member name="F:Wisej.Core.License.LicenseStatus.Expired">
            <summary>
            The license key is expired. But the license could still be valid for
            the installed version of Wisej.
            </summary>
        </member>
        <member name="F:Wisej.Core.License.LicenseStatus.Moved">
            <summary>
            The license has been moved to another machine. We can still
            try to activate it again.
            </summary>
        </member>
        <member name="F:Wisej.Core.License.LicenseStatus.MaxedOut">
            <summary>
            The license couldn't get activated, the maximum activations have been reached.
            </summary>
        </member>
        <member name="F:Wisej.Core.License.LicenseStatus.WrongProductName">
            <summary>
            The license is invalid because the product name didn't match.
            It mostly likely means that the key that was used to activate is for a trial or a beta license.
            </summary>
        </member>
        <member name="F:Wisej.Core.License.LicenseStatus.NetworkError">
            <summary>
            Failed to activate the license because of the network connection.
            </summary>
        </member>
        <member name="F:Wisej.Core.License.LicenseStatus.SystemError">
            <summary>
            Failed to activate the license because of any other error.
            </summary>
        </member>
        <member name="T:Wisej.Core.License.ReleaseDateAttribute">
            <summary>
            Associates a release date with the assembly.
            </summary>
        </member>
        <member name="P:Wisej.Core.License.ReleaseDateAttribute.Value">
            <summary>
            The release date associated with the assembly.
            </summary>
        </member>
        <member name="M:Wisej.Core.License.ReleaseDateAttribute.Get(System.Reflection.Assembly)">
            <summary>
            Returns the release date associated to the assembly.
            </summary>
            <param name="assembly">The target assembly.</param>
            <returns>The release date of the assembly or DateTime.MinValue.</returns>
        </member>
        <member name="T:Wisej.Core.License.LicenseTypeAttribute">
            <summary>
            Associates a <see cref="T:Wisej.Core.License.LicenseType"/> with the assembly.
            </summary>
        </member>
        <member name="P:Wisej.Core.License.LicenseTypeAttribute.Value">
            <summary>
            The <see cref="T:Wisej.Core.License.LicenseType"/> associated with the assembly.
            </summary>
        </member>
        <member name="M:Wisej.Core.License.LicenseTypeAttribute.Get(System.Reflection.Assembly)">
            <summary>
            Returns the <see cref="T:Wisej.Core.License.LicenseType"/> associated to the assembly.
            </summary>
            <param name="assembly">The target assembly.</param>
            <returns>The release date of the assembly or DateTime.MinValue.</returns>
        </member>
        <member name="T:Wisej.Web.BindingCompleteEventHandler">
            <summary>
            Represents the delegate that handles the <see cref="E:Wisej.Web.Binding.BindingComplete"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Wisej.Web.BindingCompleteEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Wisej.Web.BindingCompleteEventArgs">
            <summary>
            Provides data for the <see cref="E:Wisej.Web.BindingComplete" /> event.
            </summary>
        </member>
        <member name="M:Wisej.Web.BindingCompleteEventArgs.#ctor(System.Windows.Forms.BindingCompleteEventArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:Wisej.Web.BindingCompleteEventArgs" /> class with the specified binding, error state and text, 
            binding context, exception, and whether the binding should be canceled.
            </summary>
            <param name="source">The source arguments.</param>
        </member>
        <member name="M:Wisej.Web.BindingCompleteEventArgs.#ctor(Wisej.Web.Binding,Wisej.Web.BindingCompleteState,Wisej.Web.BindingCompleteContext,System.String,System.Exception,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Wisej.Web.BindingCompleteEventArgs" /> class with the specified binding, error state and text, 
            binding context, exception, and whether the binding should be canceled.
            </summary>
            <param name="binding">The binding associated with this occurrence of a <see cref="E:Wisej.Web.Binding.BindingComplete" /> event.</param>
            <param name="state">One of the <see cref="T:Wisej.Web.BindingCompleteState" /> values.</param>
            <param name="context">One of the <see cref="T:Wisej.Web.BindingCompleteContext" /> values. </param>
            <param name="errorText">The error text or exception message for errors that occurred during the binding.</param>
            <param name="exception">The <see cref="T:System.Exception" /> that occurred during the binding.</param>
            <param name="cancel">true to cancel the binding and keep focus on the current control; false to allow focus to shift to another control.</param>
        </member>
        <member name="M:Wisej.Web.BindingCompleteEventArgs.#ctor(Wisej.Web.Binding,Wisej.Web.BindingCompleteState,Wisej.Web.BindingCompleteContext,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Wisej.Web.BindingCompleteEventArgs" /> class with the specified binding, error state and text, binding context, and exception.
            </summary>
            <param name="binding">The binding associated with this occurrence of a <see cref="E:Wisej.Web.Binding.BindingComplete" /> event.</param>
            <param name="state">One of the <see cref="T:Wisej.Web.BindingCompleteState" /> values.</param>
            <param name="context">One of the <see cref="T:Wisej.Web.BindingCompleteContext" /> values. </param>
            <param name="errorText">The error text or exception message for errors that occurred during the binding.</param>
            <param name="exception">The <see cref="T:System.Exception" /> that occurred during the binding.</param>
        </member>
        <member name="M:Wisej.Web.BindingCompleteEventArgs.#ctor(Wisej.Web.Binding,Wisej.Web.BindingCompleteState,Wisej.Web.BindingCompleteContext,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Wisej.Web.BindingCompleteEventArgs" /> class with the specified binding, error state and text, and binding context.
            </summary>
            <param name="binding">The binding associated with this occurrence of a <see cref="E:Wisej.Web.Binding.BindingComplete" /> event.</param>
            <param name="state">One of the <see cref="T:Wisej.Web.BindingCompleteState" /> values.</param>
            <param name="context">One of the <see cref="T:Wisej.Web.BindingCompleteContext" /> values. </param>
            <param name="errorText">The error text or exception message for errors that occurred during the binding.</param>
        </member>
        <member name="M:Wisej.Web.BindingCompleteEventArgs.#ctor(Wisej.Web.Binding,Wisej.Web.BindingCompleteState,Wisej.Web.BindingCompleteContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Wisej.Web.BindingCompleteEventArgs" /> class with the specified binding, error state, and binding context.
            </summary>
            <param name="binding">The binding associated with this occurrence of a <see cref="E:Wisej.Web.Binding.BindingComplete" /> event.</param>
            <param name="state">One of the <see cref="T:Wisej.Web.BindingCompleteState" /> values.</param>
            <param name="context">One of the <see cref="T:Wisej.Web.BindingCompleteContext" /> values. </param>
        </member>
        <member name="P:Wisej.Web.BindingCompleteEventArgs.Binding">
            <summary>
            Returns the binding associated with this occurrence of a <see cref="E:Wisej.Web.Binding.BindingComplete" /> event.
            </summary>
            <returns>The <see cref="T:Wisej.Web.Binding" /> associated with this <see cref="T:Wisej.Web.BindingCompleteEventArgs" />.</returns>
        </member>
        <member name="P:Wisej.Web.BindingCompleteEventArgs.BindingCompleteContext">
            <summary>
            Returns the direction of the binding operation.
            </summary>
            <returns>One of the <see cref="T:Wisej.Web.BindingCompleteContext" /> values. </returns>
        </member>
        <member name="P:Wisej.Web.BindingCompleteEventArgs.BindingCompleteState">
            <summary>
            Returns the completion state of the binding operation.
            </summary>
            <returns>One of the <see cref="T:Wisej.Web.BindingCompleteState" /> values.</returns>
        </member>
        <member name="P:Wisej.Web.BindingCompleteEventArgs.ErrorText">
            <summary>
            Returns the text description of the error that occurred during the binding operation.
            </summary>
            <returns>The text description of the error that occurred during the binding operation.</returns>
        </member>
        <member name="P:Wisej.Web.BindingCompleteEventArgs.Exception">
            <summary>
            Returns the exception that occurred during the binding operation.
            </summary>
            <returns>The <see cref="T:System.Exception" /> that occurred during the binding operation.</returns>
        </member>
        <member name="T:Wisej.Web.BindingManagerBase">
            <summary>
            Manages all <see cref="T:Wisej.Web.Binding" /> objects that are bound to the same data source and data member.
            </summary>
        </member>
        <member name="E:Wisej.Web.BindingManagerBase.BindingComplete">
            <summary>
            Fired at the completion of a data-binding operation.
            </summary>
        </member>
        <member name="E:Wisej.Web.BindingManagerBase.CurrentChanged">
            <summary>
            Fired when the currently bound item changes.
            </summary>
        </member>
        <member name="E:Wisej.Web.BindingManagerBase.CurrentItemChanged">
            <summary>
            Fired when the state of the currently bound item changes.
            </summary>
        </member>
        <member name="E:Wisej.Web.BindingManagerBase.DataError">
            <summary>
            Fired when an <see cref="T:System.Exception" /> is silently handled by the <see cref="T:Wisej.Web.BindingManagerBase" />.
            </summary>
        </member>
        <member name="E:Wisej.Web.BindingManagerBase.PositionChanged">
            <summary>
            Fired after the value of the <see cref="P:Wisej.Web.BindingManagerBase.Position" /> property has changed.
            </summary>
        </member>
        <member name="P:Wisej.Web.BindingManagerBase.Bindings">
            <summary>
            Returns the collection of bindings being managed.
            </summary>
            <returns>A <see cref="T:Wisej.Web.BindingsCollection" /> that contains the <see cref="T:Wisej.Web.Binding" /> objects managed by this <see cref="T:Wisej.Web.BindingManagerBase" />.</returns>
        </member>
        <member name="P:Wisej.Web.BindingManagerBase.Count">
            <summary>
            Returns the number of items in the list.
            </summary>
            <returns>The number of items in the list.</returns>
        </member>
        <member name="P:Wisej.Web.BindingManagerBase.Current">
            <summary>
            Returns the current item in the list.
            </summary>
            <returns>A list item of type <see cref="T:System.Object" />.</returns>
        </member>
        <member name="P:Wisej.Web.BindingManagerBase.IsBindingSuspended">
            <summary>
            Returns whether binding is suspended.
            </summary>
            <returns>true if binding is suspended; otherwise, false.</returns>
        </member>
        <member name="P:Wisej.Web.BindingManagerBase.Position">
            <summary>
            Returns or sets the position of the data binding source within the list.
            </summary>
            <returns>The position in the underlying list.</returns>
        </member>
        <member name="M:Wisej.Web.BindingManagerBase.AddNew">
            <summary>
            Adds a new item to the underlying list.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The underlying data source does not implement <see cref="T:System.ComponentModel.IBindingList" />, or the data source has thrown an exception 
            because the user has attempted to add a row to a read-only or fixed-size <see cref="T:System.Data.DataView" />.
            </exception>
        </member>
        <member name="M:Wisej.Web.BindingManagerBase.CancelCurrentEdit">
            <summary>
            Cancels the current edit operation.
            </summary>
        </member>
        <member name="M:Wisej.Web.BindingManagerBase.EndCurrentEdit">
            <summary>
            Ends the current edit operation.
            </summary>
        </member>
        <member name="M:Wisej.Web.BindingManagerBase.GetItemProperties">
            <summary>
            Returns the property descriptor collection for the underlying list.
            </summary>
            <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> for the list.</returns>
        </member>
        <member name="M:Wisej.Web.BindingManagerBase.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">The index of the item to remove from the list. </param>
            <exception cref="T:System.IndexOutOfRangeException">There is no row at the specified <paramref name="index" />. </exception>
        </member>
        <member name="M:Wisej.Web.BindingManagerBase.ResumeBinding">
            <summary>
            Resumes data binding.
            </summary>
        </member>
        <member name="M:Wisej.Web.BindingManagerBase.SuspendBinding">
            <summary>
            Suspends data binding to prevents changes from updating the bound data source.
            </summary>
        </member>
        <member name="M:Wisej.Web.BindingManagerBase.op_Implicit(System.Windows.Forms.BindingManagerBase)~Wisej.Web.BindingManagerBase">
            <exclude/>
        </member>
        <member name="M:Wisej.Web.BindingManagerBase.op_Implicit(Wisej.Web.BindingManagerBase)~System.Windows.Forms.BindingManagerBase">
            <exclude/>
        </member>
        <member name="T:Wisej.Web.BindingManagerDataErrorEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Wisej.Web.BindingManagerBase.DataError" /> event. 
            </summary>
            <param name="sender">The source of the event. </param>
            <param name="e">A <see cref="T:Wisej.Web.BindingManagerDataErrorEventArgs" /> that contains the event data. </param>
        </member>
        <member name="T:Wisej.Web.BindingManagerDataErrorEventArgs">
            <summary>
            Provides data for the DataError event.
            </summary>
        </member>
        <member name="M:Wisej.Web.BindingManagerDataErrorEventArgs.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Wisej.Web.BindingManagerDataErrorEventArgs" /> class.
            </summary>
            <param name="exception">The <see cref="T:System.Exception" /> that occurred in the binding process.</param>
        </member>
        <member name="P:Wisej.Web.BindingManagerDataErrorEventArgs.Exception">
            <summary>
            Returns the <see cref="T:System.Exception" /> caught in the binding process.
            </summary>
            <returns>The <see cref="T:System.Exception" /> that occurred in the binding process.</returns>
        </member>
        <member name="T:Wisej.Web.BindingsCollection">
            <summary>
            Represents a collection of <see cref="T:Wisej.Web.Binding" /> objects for a control.
            </summary>
        </member>
        <member name="E:Wisej.Web.BindingsCollection.CollectionChanged">
            <summary>
            Fired when the collection has changed.
            </summary>
        </member>
        <member name="E:Wisej.Web.BindingsCollection.CollectionChanging">
            <summary>
            Fired when the collection is about to change.
            </summary>
        </member>
        <member name="P:Wisej.Web.BindingsCollection.Count">
            <summary>
            Returns the total number of bindings in the collection.
            </summary>
            <returns>The total number of bindings in the collection.</returns>
        </member>
        <member name="P:Wisej.Web.BindingsCollection.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:Wisej.Web.Binding" /> at the specified index.
            </summary>
            <returns>The <see cref="T:Wisej.Web.Binding" /> at the specified index.</returns>
            <param name="index">The index of the <see cref="T:Wisej.Web.Binding" /> to find. </param>
            <exception cref="T:System.IndexOutOfRangeException">The collection doesn't contain an item at the specified index. </exception>
        </member>
        <member name="P:Wisej.Web.BindingsCollection.IsReadOnly">
            <summary>
            Returns a value indicating whether the collection is read-only.
            </summary>
            <returns>This property is always false.</returns>
        </member>
        <member name="P:Wisej.Web.BindingsCollection.IsSynchronized">
            <summary>
            Returns a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized.
            </summary>
            <returns>This property always returns false.</returns>
        </member>
        <member name="P:Wisej.Web.BindingsCollection.SyncRoot">
            <summary>
            Returns an object that can be used to synchronize access to the <see cref="T:Wisej.Web.BaseCollection" />.
            </summary>
            <returns>An object that can be used to synchronize the <see cref="T:Wisej.Web.BaseCollection" />.</returns>
        </member>
        <member name="M:Wisej.Web.BindingsCollection.op_Implicit(System.Windows.Forms.BindingsCollection)~Wisej.Web.BindingsCollection">
            <exclude/>
        </member>
        <member name="M:Wisej.Web.BindingsCollection.op_Implicit(Wisej.Web.BindingsCollection)~System.Windows.Forms.BindingsCollection">
            <exclude/>
        </member>
        <member name="T:Wisej.Web.ConvertEventHandler">
            <summary>
            Represents the method that handles the <see cref="E:Wisej.Web.Binding.Parse" /> and <see cref="E:Wisej.Web.Binding.Format" /> events 
            of a <see cref="T:Wisej.Web.Binding" />.
            </summary>
            <param name="sender">The source of the event. </param>
            <param name="e">A <see cref="T:Wisej.Web.ConvertEventArgs" /> that contains the event data. </param>
        </member>
        <member name="T:Wisej.Web.ConvertEventArgs">
            <summary>
            Base for the specialized convert event handlers.
            </summary>
        </member>
        <member name="M:Wisej.Web.ConvertEventArgs.#ctor(System.Windows.Forms.ConvertEventArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:Wisej.Web.ConvertEventArgs" /> class.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Wisej.Web.ConvertEventArgs.#ctor(System.Object,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Wisej.Web.ConvertEventArgs" /> class.
            </summary>
            <param name="value">An <see cref="T:System.Object" /> that contains the value of the current property. </param>
            <param name="desiredType">The <see cref="T:System.Type" /> of the value. </param>
        </member>
        <member name="P:Wisej.Web.ConvertEventArgs.Value">
            <summary>
            Returns or sets the value of the <see cref="T:Wisej.Web.ConvertEventArgs" />.
            </summary>
            <returns>The value of the <see cref="T:Wisej.Web.ConvertEventArgs" />.</returns>
        </member>
        <member name="P:Wisej.Web.ConvertEventArgs.DesiredType">
            <summary>
            Returns the data type of the desired value.
            </summary>
            <returns>The <see cref="T:System.Type" /> of the desired value.</returns>
        </member>
        <member name="T:Wisej.Web.CurrencyManager">
            <summary>
            Keeps data-bound controls synchronized with each other: showing data from the same record.
            </summary>
        </member>
        <member name="E:Wisej.Web.CurrencyManager.ItemChanged">
            <summary>
            Fired when the current item has been altered.
            </summary>
        </member>
        <member name="E:Wisej.Web.CurrencyManager.ListChanged">
            <summary>
            Fired when the list changes or an item in the list changes.
            </summary>
        </member>
        <member name="E:Wisej.Web.CurrencyManager.MetaDataChanged">
            <summary>
            Fired when the metadata of the <see cref="P:Wisej.Web.CurrencyManager.List" /> has changed.
            </summary>
        </member>
        <member name="P:Wisej.Web.CurrencyManager.Item(System.Int32)">
            <summary>
            Returns or sets the data item at the specified position.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Wisej.Web.CurrencyManager.List">
            <summary>
            Returns the list for this <see cref="T:Wisej.Web.CurrencyManager" />.
            </summary>
            <returns>An <see cref="T:System.Collections.IList" /> that contains the list.</returns>
        </member>
        <member name="M:Wisej.Web.CurrencyManager.Refresh">
            <summary>
            Forces a refresh of the data-bound list.
            </summary>
        </member>
        <member name="P:Wisej.Web.CurrencyManager.Count">
            <summary>
            Returns the number of items in the list.
            </summary>
            <returns>The number of items in the list.</returns>
        </member>
        <member name="P:Wisej.Web.CurrencyManager.Current">
            <summary>
            Returns the current item in the list.
            </summary>
            <returns>A list item of type <see cref="T:System.Object" />.</returns>
        </member>
        <member name="P:Wisej.Web.CurrencyManager.Position">
            <summary>
            Returns or sets the current position within the list.
            </summary>
            <returns>The index of the current item within the list.</returns>
        </member>
        <member name="M:Wisej.Web.CurrencyManager.ResumeBinding">
            <summary>
            Resumes data binding.
            </summary>
        </member>
        <member name="M:Wisej.Web.CurrencyManager.SuspendBinding">
            <summary>
            Suspends data binding to prevents changes from updating the bound data source.
            </summary>
        </member>
        <member name="P:Wisej.Web.CurrencyManager.ShouldBind">
            <summary>
            Returns true when the bound data source can accept changes.
            Calling <see cref="M:Wisej.Web.CurrencyManager.SuspendBinding"/> sets this flag to false and
            <see cref="M:Wisej.Web.CurrencyManager.ResumeBinding"/> sets it to true (default).
            </summary>
        </member>
        <member name="M:Wisej.Web.CurrencyManager.op_Implicit(System.Windows.Forms.CurrencyManager)~Wisej.Web.CurrencyManager">
            <exclude/>
        </member>
        <member name="M:Wisej.Web.CurrencyManager.op_Implicit(Wisej.Web.CurrencyManager)~System.Windows.Forms.CurrencyManager">
            <exclude/>
        </member>
        <member name="M:Wisej.Web.CurrencyManager.op_Implicit(System.Windows.Forms.BindingManagerBase)~Wisej.Web.CurrencyManager">
            <exclude/>
        </member>
        <member name="T:Wisej.Web.ICurrencyManagerProvider">
            <summary>
            Provides custom binding management for components.
            </summary>
        </member>
        <member name="P:Wisej.Web.ICurrencyManagerProvider.CurrencyManager">
            <summary>
            Returns the <see cref="T:Wisej.Web.CurrencyManager" /> associated with this <see cref="T:Wisej.Web.ICurrencyManagerProvider" />.
            </summary>
            <returns>The <see cref="T:Wisej.Web.CurrencyManager" /> associated with this <see cref="T:Wisej.Web.ICurrencyManagerProvider" />.</returns>
        </member>
        <member name="M:Wisej.Web.ICurrencyManagerProvider.GetRelatedCurrencyManager(System.String)">
            <summary>Return the <see cref="T:Wisej.Web.CurrencyManager" /> for this <see cref="T:Wisej.Web.ICurrencyManagerProvider" /> and the specified data member.
            </summary>
            <returns>The related <see cref="T:Wisej.Web.CurrencyManager" /> obtained from this <see cref="T:Wisej.Web.ICurrencyManagerProvider" /> and the specified data member.</returns>
            <param name="dataMember">The name of the column or list, within the data source, to obtain the <see cref="T:Wisej.Web.CurrencyManager" /> for.</param>
        </member>
        <member name="T:Wisej.Web.ItemChangedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Wisej.Web.CurrencyManager.ItemChanged" /> event of the <see cref="T:Wisej.Web.CurrencyManager" /> class.
            </summary>
            <param name="sender">The source of the event. </param>
            <param name="e">An <see cref="T:Wisej.Web.ItemChangedEventArgs" /> that contains the event data. </param>
        </member>
        <member name="T:Wisej.Web.ItemChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Wisej.Web.CurrencyManager.ItemChanged" /> event.
            </summary>
        </member>
        <member name="M:Wisej.Web.ItemChangedEventArgs.#ctor(System.Int32)">
            <summary>
            Constructs a new instance of <see cref="T:Wisej.Web.ItemChangedEventArgs"/>
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:Wisej.Web.ItemChangedEventArgs.Index">
            <summary>
            Returns the position of the item being changed within the list.
            </summary>
            <returns>The index to the item being changed.</returns>
        </member>
        <member name="T:Wisej.Web.ListBindingHelper">
            <summary>
            Provides functionality to discover a bindable list and the properties of 
            the items contained in the list when they differ from the public properties of the object to which they bind.
            </summary>
        </member>
        <member name="M:Wisej.Web.ListBindingHelper.GetList(System.Object)">
            <summary>
            Returns a list associated with the specified data source.
            </summary>
            <param name="list">The data source to examine for its underlying list.</param>
            <returns>An <see cref="T:System.Object" /> representing the underlying list if it exists; otherwise, the original data source specified by <paramref name="list" />.</returns>
        </member>
        <member name="M:Wisej.Web.ListBindingHelper.GetList(System.Object,System.String)">
            <summary>
            Returns an object, typically a list, from the evaluation of a specified data source and optional data member.
            </summary>
            <param name="dataSource">The data source from which to find the list.</param>
            <param name="dataMember">The name of the data source property that contains the list. This can be null.</param>
            <returns>An <see cref="T:System.Object" /> representing the underlying list if it was found; otherwise, <paramref name="dataSource" />.</returns>
            <exception cref="T:System.ArgumentException">The specified data member name did not match any of the properties found for the data source.</exception>
        </member>
        <member name="M:Wisej.Web.ListBindingHelper.GetListItemProperties(System.Object)">
            <summary>
            Returns the <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> that describes the properties of 
            an item type contained in a specified data source, or properties of the specified data source.
            </summary>
            <param name="list">The data source to examine for property information.</param>
            <returns>The <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> containing the properties of the items contained in <paramref name="list" />, or properties of <paramref name="list.." /></returns>
        </member>
        <member name="M:Wisej.Web.ListBindingHelper.GetListItemProperties(System.Object,System.ComponentModel.PropertyDescriptor[])">
            <summary>
            Returns the <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> that describes the properties of 
            an item type contained in a collection property of a data source. Uses the specified <see cref="T:System.ComponentModel.PropertyDescriptor" /> array to indicate which properties to examine.
            </summary>
            <param name="list">The data source to be examined for property information.</param>
            <param name="listAccessors">The <see cref="T:System.ComponentModel.PropertyDescriptor" /> array describing which properties of the data source to examine. This can be null.</param>
            <returns>The <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> describing the properties of the item type contained in a collection property of the data source.</returns>
        </member>
        <member name="M:Wisej.Web.ListBindingHelper.GetListItemProperties(System.Object,System.String,System.ComponentModel.PropertyDescriptor[])">
            <summary>Returns the <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> that describes the properties of 
            an item type contained in the specified data member of a data source. Uses the specified <see cref="T:System.ComponentModel.PropertyDescriptor" /> array to indicate which properties to examine.
            </summary>
            <param name="dataSource">The data source to be examined for property information.</param>
            <param name="dataMember">The optional data member to be examined for property information. This can be null.</param>
            <param name="listAccessors">The <see cref="T:System.ComponentModel.PropertyDescriptor" /> array describing which properties of the data member to examine. This can be null.</param>
            <returns>The <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> describing the properties of an item type contained in a collection property of the specified data source.</returns>
            <exception cref="T:System.ArgumentException">The specified data member could not be found in the specified data source.</exception>
        </member>
        <member name="M:Wisej.Web.ListBindingHelper.GetListItemType(System.Object)">
            <summary>
            Returns the data type of the items in the specified list.
            </summary>
            <param name="list">The list to be examined for type information. </param>
            <returns>The <see cref="T:System.Type" /> of the items contained in the list.</returns>
        </member>
        <member name="M:Wisej.Web.ListBindingHelper.GetListItemType(System.Object,System.String)">
            <summary>
            Returns the data type of the items in the specified data source.
            </summary>
            <param name="dataSource">The data source to examine for items. </param>
            <param name="dataMember">The optional name of the property on the data source that is to be used as the data member. This can be null.</param>
            <returns>For complex data binding, the <see cref="T:System.Type" /> of the items represented by the <paramref name="dataMember" /> in the data source; otherwise, the <see cref="T:System.Type" /> of the item in the list itself.</returns>
        </member>
        <member name="M:Wisej.Web.ListBindingHelper.GetListName(System.Object,System.ComponentModel.PropertyDescriptor[])">
            <summary>
            Returns the name of an underlying list, given a data source and optional <see cref="T:System.ComponentModel.PropertyDescriptor" /> array.
            </summary>
            <param name="list">The data source to examine for the list name.</param>
            <param name="listAccessors">An array of <see cref="T:System.ComponentModel.PropertyDescriptor" /> objects to find in the data source. This can be null.</param>
            <returns>The name of the list in the data source, as described by <paramref name="listAccessors" />, or the name of the data source type.</returns>
        </member>
        <member name="T:Wisej.Web.PropertyManager">
            <summary>
            Maintains a <see cref="T:Wisej.Web.Binding" /> between an object's property and a data-bound control property.
            </summary>
        </member>
        <member name="P:Wisej.Web.PropertyManager.Count">
            <summary>
            This property is not relevant for this class.
            </summary>
            <returns>Always 1.</returns>
            <exclude/>
        </member>
        <member name="P:Wisej.Web.PropertyManager.Current">
            <summary>
            Returns the object owning the data-bound property belongs.
            </summary>
            <returns>An <see cref="T:System.Object" /> that represents the object to which the property belongs.</returns>
        </member>
        <member name="P:Wisej.Web.PropertyManager.Position">
            <summary>
            This property is not relevant for this class.
            </summary>
            <returns>Always 0.</returns>
            <exclude/>
        </member>
        <member name="M:Wisej.Web.PropertyManager.AddNew">
            <summary>
            This method is not supported.
            </summary>
            <exclude/>
        </member>
        <member name="M:Wisej.Web.PropertyManager.RemoveAt(System.Int32)">
            <summary>
            This method is not supported.
            </summary>
            <exclude/>
        </member>
        <member name="M:Wisej.Web.PropertyManager.EndCurrentEdit">
            <summary>
            Ends the current edit operation.
            </summary>
        </member>
        <member name="M:Wisej.Web.PropertyManager.ResumeBinding">
            <summary>
            Resumes data binding.
            </summary>
        </member>
        <member name="M:Wisej.Web.PropertyManager.SuspendBinding">
            <summary>
            Suspends the data binding between a data source and a data-bound property.
            </summary>
        </member>
        <member name="M:Wisej.Web.PropertyManager.op_Implicit(System.Windows.Forms.PropertyManager)~Wisej.Web.PropertyManager">
            <exclude/>
        </member>
        <member name="M:Wisej.Web.PropertyManager.op_Implicit(Wisej.Web.PropertyManager)~System.Windows.Forms.PropertyManager">
            <exclude/>
        </member>
        <member name="M:Wisej.Web.PropertyManager.op_Implicit(System.Windows.Forms.BindingManagerBase)~Wisej.Web.PropertyManager">
            <exclude/>
        </member>
        <member name="T:Wisej.Web.Binding">
            <summary>
            Represents the simple binding between the property value of an object and the property value of a control.
            </summary>
        </member>
        <member name="M:Wisej.Web.Binding.#ctor(System.String,System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Wisej.Web.Binding" /> class that simple-binds the 
            indicated control property to the specified data member of the data source.
            </summary>
            <param name="propertyName">The name of the control property to bind. </param>
            <param name="dataSource">An <see cref="T:System.Object" /> that represents the data source. </param>
            <param name="dataMember">The property or list to bind to. </param>
            <exception cref="T:System.Exception">
              <paramref name="propertyName" /> is neither a valid property of a control nor an empty string (""). </exception>
            <exception cref="T:System.ArgumentException">The property given by <paramref name="propertyName" /> does not exist on the control.</exception>
        </member>
        <member name="M:Wisej.Web.Binding.#ctor(System.String,System.Object,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Wisej.Web.Binding" /> class that binds the indicated control property 
            to the specified data member of the data source, and optionally enables formatting to be applied.
            </summary>
            <param name="propertyName">The name of the control property to bind. </param>
            <param name="dataSource">An <see cref="T:System.Object" /> that represents the data source. </param>
            <param name="dataMember">The property or list to bind to. </param>
            <param name="formattingEnabled">true to format the displayed data; otherwise, false. </param>
            <exception cref="T:System.ArgumentException">The property given by <paramref name="propertyName" /> does not exist on the control; or the property given is a read-only property.</exception>
            <exception cref="T:System.Exception">Formatting is disabled and <paramref name="propertyName" /> is neither a valid property of a control nor an empty string (""). </exception>
        </member>
        <member name="M:Wisej.Web.Binding.#ctor(System.String,System.Object,System.String,System.Boolean,Wisej.Web.DataSourceUpdateMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Wisej.Web.Binding" /> class that binds the specified control property 
            to the specified data member of the specified data source. Optionally enables formatting and propagates values to the data source 
            based on the specified update setting.
            </summary>
            <param name="propertyName">The name of the control property to bind. </param>
            <param name="dataSource">An <see cref="T:System.Object" /> representing the data source. </param>
            <param name="dataMember">The property or list to bind to.</param>
            <param name="formattingEnabled">true to format the displayed data; otherwise, false.</param>
            <param name="dataSourceUpdateMode">One of the <see cref="T:Wisej.Web.DataSourceUpdateMode" /> values.</param>
            <exception cref="T:System.ArgumentException">The property given by <paramref name="propertyName" /> does not exist on the control; or the data source or data member or control property specified are associated with another binding in the collection.</exception>
        </member>
        <member name="M:Wisej.Web.Binding.#ctor(System.String,System.Object,System.String,System.Boolean,Wisej.Web.DataSourceUpdateMode,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Wisej.Web.Binding" /> class that binds the indicated control property 
            to the specified data member of the specified data source. Optionally enables formatting, propagates values to the data source 
            based on the specified update setting, and sets the property to the specified value when a <see cref="T:System.DBNull" /> is 
            returned from the data source.
            </summary>
            <param name="propertyName">The name of the control property to bind. </param>
            <param name="dataSource">An <see cref="T:System.Object" /> representing the data source. </param>
            <param name="dataMember">The property or list to bind to.</param>
            <param name="formattingEnabled">true to format the displayed data; otherwise, false.</param>
            <param name="dataSourceUpdateMode">One of the <see cref="T:Wisej.Web.DataSourceUpdateMode" /> values.</param>
            <param name="nullValue">The <see cref="T:System.Object" /> to be applied to the bound control property if the data source value is <see cref="T:System.DBNull" />.</param>
            <exception cref="T:System.ArgumentException">The property given by <paramref name="propertyName" /> does not exist on the control; or the data source or data member or control property specified are associated with another binding in the collection.</exception>
        </member>
        <member name="M:Wisej.Web.Binding.#ctor(System.String,System.Object,System.String,System.Boolean,Wisej.Web.DataSourceUpdateMode,System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Wisej.Web.Binding" /> class that binds the specified control property to the 
            specified data member of the specified data source. Optionally enables formatting with the specified format string; propagates values to 
            the data source based on the specified update setting; and sets the property to the specified value when a <see cref="T:System.DBNull" /> 
            is returned from the data source.
            </summary>
            <param name="propertyName">The name of the control property to bind. </param>
            <param name="dataSource">An <see cref="T:System.Object" /> representing the data source. </param>
            <param name="dataMember">The property or list to bind to.</param>
            <param name="formattingEnabled">true to format the displayed data; otherwise, false.</param>
            <param name="dataSourceUpdateMode">One of the <see cref="T:Wisej.Web.DataSourceUpdateMode" /> values.</param>
            <param name="nullValue">The <see cref="T:System.Object" /> to be applied to the bound control property if the data source value is <see cref="T:System.DBNull" />.</param>
            <param name="formatString">One or more format specifier characters that indicate how a value is to be displayed.</param>
            <exception cref="T:System.ArgumentException">The property given by <paramref name="propertyName" /> does not exist on the control; or the data source or data member or control property specified are associated with another binding in the collection.</exception>
        </member>
        <member name="M:Wisej.Web.Binding.#ctor(System.String,System.Object,System.String,System.Boolean,Wisej.Web.DataSourceUpdateMode,System.Object,System.String,System.IFormatProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Wisej.Web.Binding" /> class with the specified control property to the specified 
            data member of the specified data source.
            
            Optionally enables formatting with the specified format string; propagates values to the data source based on 
            the specified update setting; enables formatting with the specified format string; sets the property to the
            specified value when a <see cref="T:System.DBNull" /> is returned from the data source; and sets the specified format provider.
            </summary>
            <param name="propertyName">The name of the control property to bind. </param>
            <param name="dataSource">An <see cref="T:System.Object" /> representing the data source. </param>
            <param name="dataMember">The property or list to bind to.</param>
            <param name="formattingEnabled">true to format the displayed data; otherwise, false.</param>
            <param name="dataSourceUpdateMode">One of the <see cref="T:Wisej.Web.DataSourceUpdateMode" /> values.</param>
            <param name="nullValue">The <see cref="T:System.Object" /> to be applied to the bound control property if the data source value is <see cref="T:System.DBNull" />.</param>
            <param name="formatString">One or more format specifier characters that indicate how a value is to be displayed.</param>
            <param name="formatInfo">An implementation of <see cref="T:System.IFormatProvider" /> to override default formatting behavior.</param>
            <exception cref="T:System.ArgumentException">The property given by <paramref name="propertyName" /> does not exist on the control; or the data source or data member or control property specified are associated with another binding in the collection.</exception>
        </member>
        <member name="P:Wisej.Web.Binding.Events">
            <summary>
            Returns the list of event handlers that are attached to this <see cref="T:System.ComponentModel.Component" />.
            </summary>
            <returns>An <see cref="T:System.ComponentModel.EventHandlerList" /> that provides the delegates for this component.</returns>
        </member>
        <member name="E:Wisej.Web.Binding.BindingComplete">
            <summary>
            Fired when the <see cref="P:Wisej.Web.Binding.FormattingEnabled"/> property true and a binding operation is completed.
            </summary>
        </member>
        <member name="E:Wisej.Web.Binding.Format">
            <summary>
            Fired when the property of a control is bound to a data value.
            </summary>
        </member>
        <member name="E:Wisej.Web.Binding.Parse">
            <summary>
            Fired when the value of a data-bound control changes.
            </summary>
        </member>
        <member name="M:Wisej.Web.Binding.OnBindingComplete(System.Windows.Forms.BindingCompleteEventArgs)">
            <exclude/>
        </member>
        <member name="M:Wisej.Web.Binding.OnFormat(System.Windows.Forms.ConvertEventArgs)">
            <exclude/>
        </member>
        <member name="M:Wisej.Web.Binding.OnParse(System.Windows.Forms.ConvertEventArgs)">
            <exclude/>
        </member>
        <member name="M:Wisej.Web.Binding.OnBindingComplete(Wisej.Web.BindingCompleteEventArgs)">
            <summary>
            Fires the <see cref="E:Wisej.Web.Binding.BindingComplete" /> event.
            </summary>
            <param name="e">A <see cref="T:Wisej.Web.BindingCompleteEventArgs" />  that contains the event data.</param>
        </member>
        <member name="M:Wisej.Web.Binding.OnFormat(Wisej.Web.ConvertEventArgs)">
            <summary>
            Fires the <see cref="E:Wisej.Web.Binding.Format"/> event.
            </summary>
            <param name="e">A <see cref="T:Wisej.Web.ConvertEventArgs" />  that contains the event data.</param>
        </member>
        <member name="M:Wisej.Web.Binding.OnParse(Wisej.Web.ConvertEventArgs)">
            <summary>
            Fires the <see cref="E:Wisej.Web.Binding.Parse"/> event.
            </summary>
            <param name="e">A <see cref="T:Wisej.Web.ConvertEventArgs" />  that contains the event data.</param>
        </member>
        <member name="P:Wisej.Web.Binding.Control">
            <summary>
            Returns the control that the binding belongs to.</summary>
            <returns>The <see cref="T:Wisej.Base.ControlBase" /> that the binding belongs to.</returns>
        </member>
        <member name="P:Wisej.Web.Binding.ControlUpdateMode">
            <summary>
            Returns or sets when changes to the data source are propagated to the bound control property.
            </summary>
            <returns>One of the <see cref="T:Wisej.Web.ControlUpdateMode" /> values. The default is <see cref="F:Wisej.Web.ControlUpdateMode.OnPropertyChanged" />.</returns>
        </member>
        <member name="P:Wisej.Web.Binding.DataSourceUpdateMode">
            <summary>
            Returns or sets a value that indicates when changes to the bound control property are propagated to the data source.
            </summary>
            <returns>A value that indicates when changes are propagated. The default is <see cref="F:Wisej.Web.DataSourceUpdateMode.OnValidation" />.</returns>
        </member>
        <member name="P:Wisej.Web.Binding.BindableComponent">
            <summary>
            Returns the control the <see cref="T:Wisej.Web.Binding" /> is associated with.
            </summary>
            <returns>The <see cref="T:Wisej.Web.IBindableComponent" /> the <see cref="T:Wisej.Web.Binding" /> is associated with.</returns>
        </member>
        <member name="P:Wisej.Web.Binding.BindingMemberInfo">
            <summary>
            Return the binding information based on the dataMember parameter in the <see cref="M:Wisej.Web.Binding.Binding" /> constructor.
            </summary>
            <returns>A instance of the <see cref="T:Wisej.Web.BindingMemberInfo" /> struct that contains information about this <see cref="T:Wisej.Web.Binding" />.</returns>
        </member>
        <member name="T:Wisej.Web.BindingCompleteContext">
            <summary>
            Specifies the direction of the binding operation.
            </summary>
        </member>
        <member name="F:Wisej.Web.BindingCompleteContext.ControlUpdate">
            <summary>
            The control property value is being updated from the data source.
            </summary>
        </member>
        <member name="F:Wisej.Web.BindingCompleteContext.DataSourceUpdate">
            <summary>
            The data source value is being updated from the control property.
            </summary>
        </member>
        <member name="T:Wisej.Web.BindingCompleteState">
            <summary>
            Indicates the result of a binding operation.
            </summary>
        </member>
        <member name="F:Wisej.Web.BindingCompleteState.Success">
            <summary>
            The binding operation completed successfully.
            </summary>
        </member>
        <member name="F:Wisej.Web.BindingCompleteState.DataError">
            <summary>
            The binding operation failed with a data error.
            </summary>
        </member>
        <member name="F:Wisej.Web.BindingCompleteState.Exception">
            <summary>
            The binding operation failed with an exception.
            </summary>
        </member>
        <member name="T:Wisej.Web.BindingContext">
            <summary>
            Manages the collection of <see cref="T:Wisej.Web.BindingManagerBase" /> objects for any object 
            that inherits from the <see cref="T:Wisej.Base.ControlBase" /> class.
            </summary>
        </member>
        <member name="P:Wisej.Web.BindingContext.Item(System.Object)">
            <summary>
            Returns the <see cref="T:Wisej.Web.BindingManagerBase" /> that is associated with the data source.
            </summary>
            <returns>A <see cref="T:Wisej.Web.BindingManagerBase" /> for the data source.</returns>
            <param name="dataSource">The data source associated with a <see cref="T:Wisej.Web.BindingManagerBase" />. </param>
        </member>
        <member name="P:Wisej.Web.BindingContext.Item(System.Object,System.String)">
            <summary>
            Returns a <see cref="T:Wisej.Web.BindingManagerBase" /> that is associated with the data source and data member.
            </summary>
            <returns>The <see cref="T:Wisej.Web.BindingManagerBase" /> for the specified data source and data member.
            </returns>
            <param name="dataSource">The data source associated with a <see cref="T:Wisej.Web.BindingManagerBase" />.</param>
            <param name="dataMember">A property path containing that resolves to a <see cref="T:Wisej.Web.BindingManagerBase" />. </param>
            <exception cref="T:System.Exception">The specified <paramref name="dataMember" /> does not exist in the specified data source. </exception>
        </member>
        <member name="P:Wisej.Web.BindingContext.IsReadOnly">
            <summary>
            Returns whether the collection is read-only.
            </summary>
            <returns>Always false.</returns>
        </member>
        <member name="M:Wisej.Web.BindingContext.Contains(System.Object)">
            <summary>
            Returns whether the 
            <see cref="T:Wisej.Web.BindingContext" /> contains the 
            <see cref="T:Wisej.Web.BindingManagerBase" /> associated with the data source.
            </summary>
            <returns>true if the <see cref="T:Wisej.Web.BindingContext" /> contains the <see cref="T:Wisej.Web.BindingManagerBase" />; otherwise, false.</returns>
            <param name="dataSource">An <see cref="T:System.Object" /> that represents the data source. </param>
        </member>
        <member name="M:Wisej.Web.BindingContext.Contains(System.Object,System.String)">
            <summary>
            Returns whether the <see cref="T:Wisej.Web.BindingContext" /> contains the <see cref="T:Wisej.Web.BindingManagerBase" /> associated with the data source and data member.
            </summary>
            <returns>true if the <see cref="T:Wisej.Web.BindingContext" /> contains the <see cref="T:Wisej.Web.BindingManagerBase" />; otherwise, false.</returns>
            <param name="dataSource">An <see cref="T:System.Object" /> that represents the data source. </param>
            <param name="dataMember">The information needed to resolve to a specific <see cref="T:Wisej.Web.BindingManagerBase" />. </param>
        </member>
        <member name="M:Wisej.Web.BindingContext.UpdateBinding(Wisej.Web.BindingContext,Wisej.Web.Binding)">
            <summary>
            Associates a 
            <see cref="T:Wisej.Web.Binding" /> with a new 
            <see cref="T:Wisej.Web.BindingContext" />.
            </summary>
            <param name="newBindingContext">The new <see cref="T:Wisej.Web.BindingContext" /> to associate with the <see cref="T:Wisej.Web.Binding" />.</param>
            <param name="binding">The <see cref="T:Wisej.Web.Binding" /> to associate with the new <see cref="T:Wisej.Web.BindingContext" />.</param>
        </member>
        <member name="T:Wisej.Web.BindingMemberInfo">
            <summary>
            Contains information that enables a <see cref="T:Wisej.Web.Binding" /> to resolve a data binding to 
            either the property of an object or the property of the current object in a list of objects.
            </summary>
        </member>
        <member name="M:Wisej.Web.BindingMemberInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Wisej.Web.BindingMemberInfo" /> class.
            </summary>
            <param name="dataMember">A navigation path that resolves to either the property of an object or the property of the current object in a list of objects. </param>
        </member>
        <member name="P:Wisej.Web.BindingMemberInfo.BindingField">
            <summary>
            Returns the property name of the data-bound object.
            </summary>
            <returns>The property name of the data-bound object. This can be an empty string ("").</returns>
        </member>
        <member name="P:Wisej.Web.BindingMemberInfo.BindingMember">
            <summary>
            Returns the information that is used to specify the property name of the data-bound object.
            </summary>
            <returns>An empty string (""), a single property name, or a hierarchy of period-delimited property names that resolves to the property name of the final data-bound object.</returns>
        </member>
        <member name="P:Wisej.Web.BindingMemberInfo.BindingPath">
            <summary>
            Returns the property name, or the period-delimited hierarchy of property names, that comes 
            before the property name of the data-bound object.
            </summary>
            <returns>The property name, or the period-delimited hierarchy of property names, that comes before the data-bound object property name.</returns>
        </member>
        <member name="M:Wisej.Web.BindingMemberInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to this <see cref="T:Wisej.Web.BindingMemberInfo" />.
            </summary>
            <returns>true if <paramref name="other" /> is a <see cref="T:Wisej.Web.BindingMemberInfo" /> and both <see cref="P:Wisej.Web.BindingMemberInfo.BindingMember" /> strings are equal; otherwise false.</returns>
            <param name="other">The object to compare for equality.</param>
        </member>
        <member name="M:Wisej.Web.BindingMemberInfo.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:Wisej.Web.BindingMemberInfo" />.
            </summary>
            <returns>The hash code for this <see cref="T:Wisej.Web.BindingMemberInfo" />.</returns>
        </member>
        <member name="M:Wisej.Web.BindingMemberInfo.op_Equality(Wisej.Web.BindingMemberInfo,Wisej.Web.BindingMemberInfo)">
            <summary>
            Determines whether two <see cref="T:Wisej.Web.BindingMemberInfo" /> objects are equal.
            </summary>
            <returns>true if the <see cref="P:Wisej.Web.BindingMemberInfo.BindingMember" /> strings for <paramref name="a" /> and <paramref name="b" /> are equal; otherwise false.</returns>
            <param name="a">The first <see cref="T:Wisej.Web.BindingMemberInfo" /> to compare for equality.</param>
            <param name="b">The second <see cref="T:Wisej.Web.BindingMemberInfo" /> to compare for equality.</param>
        </member>
        <member name="M:Wisej.Web.BindingMemberInfo.op_Inequality(Wisej.Web.BindingMemberInfo,Wisej.Web.BindingMemberInfo)">
            <summary>
            Determines whether two <see cref="T:Wisej.Web.BindingMemberInfo" /> objects are not equal.
            </summary>
            <returns>true if the <see cref="P:Wisej.Web.BindingMemberInfo.BindingMember" /> strings for <paramref name="a" /> and <paramref name="b" /> are not equal; otherwise false.</returns>
            <param name="a">The first <see cref="T:Wisej.Web.BindingMemberInfo" /> to compare for inequality.</param>
            <param name="b">The second <see cref="T:Wisej.Web.BindingMemberInfo" /> to compare for inequality.</param>
        </member>
        <member name="T:Wisej.Web.BindingSource">
            <summary>
            Encapsulates the data source for a data-bound component.
            </summary>
        </member>
        <member name="M:Wisej.Web.BindingSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Wisej.Web.BindingSource" /> class to the default property values.
            </summary>
        </member>
        <member name="M:Wisej.Web.BindingSource.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Wisej.Web.BindingSource" /> class with the specified data source and data member.
            </summary>
            <param name="dataSource">The data source for the <see cref="T:Wisej.Web.BindingSource" />.</param>
            <param name="dataMember">The specific column or list name within the data source to bind to.</param>
        </member>
        <member name="M:Wisej.Web.BindingSource.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Wisej.Web.BindingSource" /> class and adds the <see cref="T:Wisej.Web.BindingSource" /> to the specified container.
            </summary>
            <param name="container">The <see cref="T:System.ComponentModel.IContainer" /> to add the current <see cref="T:Wisej.Web.BindingSource" /> to.</param>
        </member>
        <member name="E:Wisej.Web.BindingSource.BindingComplete">
            <summary>
            Fired when all the clients have been bound to this <see cref="T:Wisej.Web.BindingSource" />.
            </summary>
        </member>
        <member name="E:Wisej.Web.BindingSource.DataError">
            <summary>
            Fired when a currency-related exception is silently handled by the <see cref="T:Wisej.Web.BindingSource" />.
            </summary>
        </member>
        <member name="M:Wisej.Web.BindingSource.OnBindingComplete(Wisej.Web.BindingCompleteEventArgs)">
            <summary>
            Fires the <see cref="E:Wisej.Web.BindingSource.BindingComplete" /> event.
            </summary>
            <param name="e">A <see cref="T:Wisej.Web.BindingCompleteEventArgs" />  that contains the event data. </param>
        </member>
        <member name="M:Wisej.Web.BindingSource.OnDataError(Wisej.Web.BindingManagerDataErrorEventArgs)">
            <summary>
            Fires the <see cref="E:Wisej.Web.BindingSource.DataError" /> event.
            </summary>
            <param name="e">A <see cref="T:Wisej.Web.BindingManagerDataErrorEventArgs" /> that contains the event data. </param>
        </member>
        <member name="P:Wisej.Web.BindingSource.RefreshValueOnChange">
            <summary>
            Enables the automatic refresh of the source property after a data-bound value has been updated in the data source.
            </summary>
            <remarks>
            This option fixes a long standing "feature" of the default BindingSource where the property that is the source of a value
            change is not refreshed automatically after it updates the bound data source. In a scenario where the data source
            "transforms" the value received from a data-bound control, the source property is not updated while all other bound properties are.
            </remarks>
        </member>
        <member name="P:Wisej.Web.BindingSource.AllowEdit">
            <summary>
            Returns whether items in the underlying list can be edited.
            </summary>
            <returns>true indicates that list items can be edited; otherwise, false.</returns>
        </member>
        <member name="P:Wisej.Web.BindingSource.AllowNew">
            <summary>
            Returns or sets whether the <see cref="M:Wisej.Web.BindingSource.AddNew" /> method can be used to add items to the list.
            </summary>
            <returns>true when <see cref="M:Wisej.Web.BindingSource.AddNew" /> can be used to add items to the list; otherwise, false.</returns>
            <exception cref="T:System.InvalidOperationException">This property is set to true when the underlying list represented by the <see cref="P:Wisej.Web.BindingSource.List" /> property has a fixed size or is read-only.</exception>
            <exception cref="T:System.MissingMethodException">The property is set to true and the <see cref="E:Wisej.Web.BindingSource.AddingNew" /> event is not handled when the underlying list type does not have a default constructor.</exception>
        </member>
        <member name="P:Wisej.Web.BindingSource.AllowRemove">
            <summary>
            Returns whether the items can be removed from the underlying list.
            </summary>
            <returns>true indicates that list items can be removed from the list; otherwise, false.</returns>
        </member>
        <member name="P:Wisej.Web.BindingSource.Count">
            <summary>
            Returns the total number of items in the underlying list, filtered using the current
            <see cref="P:Wisej.Web.BindingSource.Filter" /> value.
            </summary>
            <returns>The total number of filtered items in the list.</returns>
        </member>
        <member name="P:Wisej.Web.BindingSource.Current">
            <summary>Returns the current item in the list.
            </summary>
            <returns>An <see cref="T:System.Object" /> that represents the current item in the underlying list, or null if the list has no items.</returns>
        </member>
        <member name="P:Wisej.Web.BindingSource.DataMember">
            <summary>
            Returns or sets the list in the data source to which the connector currently binds to.
            </summary>
            <returns>The name of a list (or row) in the <see cref="P:Wisej.Web.BindingSource.DataSource" />. The default is an empty string ("").</returns>
        </member>
        <member name="P:Wisej.Web.BindingSource.DataSource">
            <summary>
            Returns or sets the data source that the connector binds to.
            </summary>
            <returns>An <see cref="T:System.Object" /> that acts as a data source. The default is null.</returns>
        </member>
        <member name="P:Wisej.Web.BindingSource.Filter">
            <summary>
            Returns or sets the expression used to filter the items in the underlying list.
            </summary>
            <returns>A string that specifies how items are filtered. The default is null.</returns>
        </member>
        <member name="P:Wisej.Web.BindingSource.CurrencyManager">
            <summary>
            Returns the currency manager associated with this 
            <see cref="T:Wisej.Web.BindingSource" />.
            </summary>
            <returns>The <see cref="T:Wisej.Web.CurrencyManager" /> associated with this <see cref="T:System.Windows.Forms.BindingSource" />.</returns>
        </member>
        <member name="M:Wisej.Web.BindingSource.GetRelatedCurrencyManager(System.String)">
            <summary>
            Returns the related <see cref="T:Wisej.Web.CurrencyManager"/> for the specified data member.
            </summary>
            <returns>The related <see cref="T:Wisej.Web.CurrencyManager" /> for the specified data member.</returns>
            <param name="dataMember">The name of column or list, within the data source to retrieve the currency manager for.</param>
        </member>
        <member name="T:Wisej.Web.ControlBindingsCollection">
            <summary>
            Represents the collection of data bindings for a control.
            </summary>
        </member>
        <member name="M:Wisej.Web.ControlBindingsCollection.#ctor(Wisej.Web.IBindableComponent)">
            <summary>
            Initializes a new instance of the <see cref="T:Wisej.Web.ControlBindingsCollection" /> class with the specified bindable control.
            </summary>
            <param name="control">The <see cref="T:Wisej.Web.IBindableComponent" /> the binding collection belongs to.</param>
        </member>
        <member name="E:Wisej.Web.ControlBindingsCollection.CollectionChanged">
            <summary>
            Fired when the collection has changed.
            </summary>
        </member>
        <member name="E:Wisej.Web.ControlBindingsCollection.CollectionChanging">
            <summary>
            Fired when the collection is about to change.
            </summary>
        </member>
        <member name="M:Wisej.Web.ControlBindingsCollection.OnCollectionChanged(System.ComponentModel.CollectionChangeEventArgs)">
            <summary>
            Fires the <see cref="E:Wisej.Web.BindingsCollection.CollectionChanged" /> event.
            </summary>
            <param name="e">A <see cref="T:System.ComponentModel.CollectionChangeEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:Wisej.Web.ControlBindingsCollection.OnCollectionChanging(System.ComponentModel.CollectionChangeEventArgs)">
            <summary>
            Fires the <see cref="E:Wisej.Web.BindingsCollection.CollectionChanging" /> event.
            </summary>
            <param name="e">A <see cref="T:System.ComponentModel.CollectionChangeEventArgs" /> that contains event data.</param>
        </member>
        <member name="P:Wisej.Web.ControlBindingsCollection.Control">
            <summary>
            Returns the control that the collection belongs to.
            </summary>
            <returns>The <see cref="T:Wisej.Base.ControlBase" /> that the collection belongs to.</returns>
        </member>
        <member name="P:Wisej.Web.ControlBindingsCollection.DefaultDataSourceUpdateMode">
            <summary>
            Returns or sets the default <see cref="P:Wisej.Web.DataSourceUpdateMode" /> for a <see cref="T:Wisej.Web.Binding" /> in the collection.
            </summary>
            <returns>One of the <see cref="T:Wisej.Web.DataSourceUpdateMode" /> values.</returns>
        </member>
        <member name="P:Wisej.Web.ControlBindingsCollection.Item(System.String)">
            <summary>
            Returns the <see cref="T:Wisej.Web.Binding" /> specified by the control's property name.
            </summary>
            <returns>The <see cref="T:Wisej.Web.Binding" /> that binds the specified control property to a data source.</returns>
            <param name="name">The name of the property on the data-bound control. </param>
        </member>
        <member name="P:Wisej.Web.ControlBindingsCollection.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:Wisej.Web.Binding" /> at the specified index.
            </summary>
            <returns>The <see cref="T:Wisej.Web.Binding" /> at the specified index.</returns>
            <param name="index">The index of the <see cref="T:Wisej.Web.Binding" /> to find. </param>
            <exception cref="T:System.IndexOutOfRangeException">The collection doesn't contain an item at the specified index. </exception>
        </member>
        <member name="M:Wisej.Web.ControlBindingsCollection.Add(Wisej.Web.Binding)">
            <summary>
            Adds the specified <see cref="T:Wisej.Web.Binding" /> to the collection.</summary>
            <param name="binding">The <see cref="T:Wisej.Web.Binding" /> to add. </param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="binding" /> is null. </exception>
            <exception cref="T:System.ArgumentException">The control property is already data-bound. </exception>
            <exception cref="T:System.ArgumentException">The <see cref="T:Wisej.Web.Binding" /> does not specify a valid column. </exception>
        </member>
        <member name="M:Wisej.Web.ControlBindingsCollection.Add(System.String,System.Object,System.String)">
            <summary>
            Creates a <see cref="T:Wisej.Web.Binding" /> using the specified control property name, data source, and data member, and adds it to the collection.
            </summary>
            <returns>The newly created <see cref="T:Wisej.Web.Binding" />.</returns>
            <param name="propertyName">The name of the control property to bind. </param>
            <param name="dataSource">An <see cref="T:System.Object" /> that represents the data source. </param>
            <param name="dataMember">The property or list to bind to. </param>
            <exception cref="T:System.Exception">The <paramref name="propertyName" /> is already data-bound. </exception>
            <exception cref="T:System.Exception">The <paramref name="dataMember" /> doesn't specify a valid member of the <paramref name="dataSource" />. </exception>
        </member>
        <member name="M:Wisej.Web.ControlBindingsCollection.Add(System.String,System.Object,System.String,System.Boolean)">
            <summary>
            Creates a binding with the specified control property name, data source, data member, and information about whether 
            formatting is enabled, and adds the binding to the collection.
            </summary>
            <returns>The newly created <see cref="T:Wisej.Web.Binding" />.</returns>
            <param name="propertyName">The name of the control property to bind.</param>
            <param name="dataSource">An <see cref="T:System.Object" /> representing the data source. </param>
            <param name="dataMember">The property or list to bind to.</param>
            <param name="formattingEnabled">true to format the displayed data; otherwise, false</param>
            <exception cref="T:System.ArgumentException">The property given by <paramref name="propertyName" /> does not exist on the control.-or-The property given is a read-only property.</exception>
            <exception cref="T:System.Exception">If formatting is disabled and the <paramref name="propertyName" /> is neither a valid property of a control nor an empty string (""). </exception>
        </member>
        <member name="M:Wisej.Web.ControlBindingsCollection.Add(System.String,System.Object,System.String,System.Boolean,Wisej.Web.DataSourceUpdateMode)">
            <summary>
            Creates a binding that binds the specified control property to the specified data member of the specified data source, optionally 
            enabling formatting, propagating values to the data source based on the specified update setting, and adding the binding to the collection.
            </summary>
            <returns>The newly created <see cref="T:Wisej.Web.Binding" />.</returns>
            <param name="propertyName">The name of the control property to bind. </param>
            <param name="dataSource">An <see cref="T:System.Object" /> representing the data source. </param>
            <param name="dataMember">The property or list to bind to.</param>
            <param name="formattingEnabled">true to format the displayed data; otherwise, false.</param>
            <param name="updateMode">One of the <see cref="T:Wisej.Web.DataSourceUpdateMode" /> values.</param>
            <exception cref="T:System.ArgumentException">The property given by <paramref name="propertyName" /> does not exist on the control or is read-only.-or-The specified data member does not exist on the data source.-or-The data source, data member, or control property specified are associated with another binding in the collection.</exception>
        </member>
        <member name="M:Wisej.Web.ControlBindingsCollection.Add(System.String,System.Object,System.String,System.Boolean,Wisej.Web.DataSourceUpdateMode,System.Object)">
            <summary>
            Creates a binding that binds the specified control property to the specified data member of the specified data source, optionally 
            enabling formatting, propagating values to the data source based on the specified update setting, setting the property to the 
            specified value when <see cref="T:System.DBNull" /> is returned from the data source, and adding the binding to the collection.
            </summary>
            <returns>The newly created <see cref="T:Wisej.Web.Binding" /></returns>
            <param name="propertyName">The name of the control property to bind. </param>
            <param name="dataSource">An <see cref="T:System.Object" /> representing the data source. </param>
            <param name="dataMember">The property or list to bind to.</param>
            <param name="formattingEnabled">true to format the displayed data; otherwise, false.</param>
            <param name="updateMode">One of the <see cref="T:Wisej.Web.DataSourceUpdateMode" /> values.</param>
            <param name="nullValue">The <see cref="T:System.Object" /> to be applied to the bound control property if the data source value is <see cref="T:System.DBNull" />.</param>
            <exception cref="T:System.ArgumentException">The property given by <paramref name="propertyName" /> does not exist on the control or is read-only.-or-The specified data member does not exist on the data source.-or-The data source, data member, or control property specified are associated with another binding in the collection.</exception>
        </member>
        <member name="M:Wisej.Web.ControlBindingsCollection.Add(System.String,System.Object,System.String,System.Boolean,Wisej.Web.DataSourceUpdateMode,System.Object,System.String)">
            <summary>
            Creates a binding that binds the specified control property to the specified data member of the specified data source, optionally enabling 
            formatting with the specified format string, propagating values to the data source based on the specified update setting, setting the 
            property to the specified value when <see cref="T:System.DBNull" /> is returned from the data source, and adding the binding to the collection.
            </summary>
            <returns>The newly created <see cref="T:Wisej.Web.Binding" /></returns>
            <param name="propertyName">The name of the control property to bind. </param>
            <param name="dataSource">An <see cref="T:System.Object" /> representing the data source. </param>
            <param name="dataMember">The property or list to bind to.</param>
            <param name="formattingEnabled">true to format the displayed data; otherwise, false.</param>
            <param name="updateMode">One of the <see cref="T:Wisej.Web.DataSourceUpdateMode" /> values.</param>
            <param name="nullValue">The <see cref="T:System.Object" /> to be applied to the bound control property if the data source value is <see cref="T:System.DBNull" />.</param>
            <param name="formatString">One or more format specifier characters that indicate how a value is to be displayed.</param>
            <exception cref="T:System.ArgumentException">The property given by <paramref name="propertyName" /> does not exist on the control or is read-only.-or-The specified data member does not exist on the data source.-or-The data source, data member, or control property specified are associated with another binding in the collection.</exception>
        </member>
        <member name="M:Wisej.Web.ControlBindingsCollection.Add(System.String,System.Object,System.String,System.Boolean,Wisej.Web.DataSourceUpdateMode,System.Object,System.String,System.IFormatProvider)">
            <summary>
            Creates a binding that binds the specified control property to the specified data member of the specified data source, optionally
            enabling formatting with the specified format string, propagating values to the data source based on the specified update setting, setting 
            the property to the specified value when <see cref="T:System.DBNull" /> is returned from the data source, setting the specified format
            provider, and adding the binding to the collection.
            </summary>
            <returns>The newly created <see cref="T:Wisej.Web.Binding" />.</returns>
            <param name="propertyName">The name of the control property to bind. </param>
            <param name="dataSource">An <see cref="T:System.Object" /> representing the data source. </param>
            <param name="dataMember">The property or list to bind to.</param>
            <param name="formattingEnabled">true to format the displayed data; otherwise, false.</param>
            <param name="updateMode">One of the <see cref="T:Wisej.Web.DataSourceUpdateMode" /> values.</param>
            <param name="nullValue">The <see cref="T:System.Object" /> to be applied to the bound control property if the data source value is <see cref="T:System.DBNull" />.</param>
            <param name="formatString">One or more format specifier characters that indicate how a value is to be displayed</param>
            <param name="formatInfo">An implementation of <see cref="T:System.IFormatProvider" /> to override default formatting behavior.</param>
            <exception cref="T:System.ArgumentException">The property given by <paramref name="propertyName" /> does not exist on the control or is read-only.-or-The specified data member does not exist on the data source.-or-The data source, data member, or control property specified are associated with another binding in the collection.</exception>
        </member>
        <member name="M:Wisej.Web.ControlBindingsCollection.AddCore(System.Windows.Forms.Binding)">
            <summary>
            Adds a <see cref="T:Wisej.Web.Binding" /> to the collection.
            </summary>
            <param name="binding">The <see cref="T:Wisej.Web.Binding" /> to add to the collection.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="binding" /> argument was null. </exception>
        </member>
        <member name="M:Wisej.Web.ControlBindingsCollection.Clear">
            <summary>
            Removes all bindings in the collection.
            </summary>
        </member>
        <member name="M:Wisej.Web.ControlBindingsCollection.Remove(Wisej.Web.Binding)">
            <summary>
            Removes the specified <see cref="T:Wisej.Web.Binding" /> from the collection.
            </summary>
            <param name="binding">The <see cref="T:Wisej.Web.Binding" /> to remove. </param>
            <exception cref="T:System.NullReferenceException">The <paramref name="binding" /> is null. </exception>
        </member>
        <member name="M:Wisej.Web.ControlBindingsCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:Wisej.Web.Binding" /> at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove. </param>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> value is less than 0, or it is greater than the number of bindings in the collection. </exception>
        </member>
        <member name="T:Wisej.Web.ControlUpdateMode">
            <summary>
            Determines when changes to a data source value are updated in the data-bound control.
            </summary>
        </member>
        <member name="F:Wisej.Web.ControlUpdateMode.OnPropertyChanged">
            <summary>
            The corresponding property of the bound control is updated when the data source value changes, or the data source position (current record) changes.
            </summary>
        </member>
        <member name="F:Wisej.Web.ControlUpdateMode.Never">
            <summary>
            The bound control is never updated when a data source value changes.
            </summary>
        </member>
        <member name="T:Wisej.Web.DataSourceUpdateMode">
            <summary>
            Specifies when a data source is updated when the bound control properties are changed.
            </summary>
        </member>
        <member name="F:Wisej.Web.DataSourceUpdateMode.OnValidation">
            <summary>
            The data source is updated when the control property is validated.
            </summary>
        </member>
        <member name="F:Wisej.Web.DataSourceUpdateMode.OnPropertyChanged">
            <summary>
            The data source is updated whenever the value of the control property changes.
            </summary>
        </member>
        <member name="F:Wisej.Web.DataSourceUpdateMode.Never">
            <summary>
            The data source is never updated and values entered into the control are not parsed, or re-formatted.
            </summary>
        </member>
        <member name="T:Wisej.Web.IBindableComponent">
            <summary>
            Bindable components implement this interface.
            </summary>
        </member>
        <member name="P:Wisej.Web.IBindableComponent.BindingContext">
            <summary>
            Returns or sets the collection of currency managers for the <see cref="T:Wisej.Web.IBindableComponent" />.
            </summary>
            <returns>The collection of <see cref="T:Wisej.Web.BindingManagerBase" /> objects for this <see cref="T:Wisej.Web.IBindableComponent" />.</returns>
        </member>
        <member name="P:Wisej.Web.IBindableComponent.DataBindings">
            <summary>
            Returns the collection of data-binding objects for this <see cref="T:Wisej.Web.IBindableComponent" />.
            </summary>
            <returns>The <see cref="T:Wisej.Web.ControlBindingsCollection" /> for this <see cref="T:Wisej.Web.IBindableComponent" />. </returns>
        </member>
        <member name="T:Wisej.Web.ListBindingConverter">
            <summary>
            Provides a type converter to convert <see cref="T:Wisej.Web.Binding" /> objects to and from various other representations.
            </summary>
        </member>
        <member name="M:Wisej.Web.ListBindingConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Wisej.Web.ListBindingConverter" /> class.
            </summary>
        </member>
        <member name="M:Wisej.Web.ListBindingConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether changing a value on this object requires a call to the 
            <see cref="M:System.ComponentModel.TypeConverter.CreateInstance"/> method to create a new value.
            </summary>
            <returns>true if changing a property on this object requires a call to <see cref="M:System.ComponentModel.TypeConverter.CreateInstance" /> to create a new value; otherwise, false.</returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </param>
        </member>
        <member name="M:Wisej.Web.ListBindingConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
             Returns whether this converter can convert the object to the specified type using the specified context.
            </summary>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </param>
            <param name="destinationType">A <see cref="T:System.Type" /> that represents the type you want to convert to. </param>
        </member>
        <member name="M:Wisej.Web.ListBindingConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo" />. If null is passed, the current culture is assumed. </param>
            <param name="value">The <see cref="T:System.Object" /> to convert. </param>
            <param name="destinationType">The <see cref="T:System.Type" /> to convert the <paramref name="value" /> parameter to. </param>
        </member>
        <member name="M:Wisej.Web.ListBindingConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates an instance of the type that this <see cref="T:System.ComponentModel.TypeConverter" /> is associated with, using the specified context, given a set of property values for the object.
            </summary>
            <returns>An <see cref="T:System.Object" /> representing the given <see cref="T:System.Collections.IDictionary" />, or null if the object cannot be created. This method always returns null.</returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </param>
            <param name="propertyValues">An <see cref="T:System.Collections.IDictionary" /> of new property values. </param>
        </member>
        <member name="T:System.JSON">
            <summary>
            Provides JSON serialization and parsing functionality and extends every
            <see cref="T:System.Object"/> with the <see cref="M:System.JSON.ToJSON(System.Object,System.Boolean)"/> method.
            </summary>
        </member>
        <member name="M:System.JSON.ToJSON(System.Object,System.Boolean)">
            <summary>
            Serializes the object to a JSON string.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="formatted">True to format the output JSON string.</param>
            <returns>A <see cref="T:System.String"/> representing the serialized object.</returns>
        </member>
        <member name="M:System.JSON.Stringify(System.Object,System.Boolean)">
            <summary>
            Serializes the object to a JSON string.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="formatted">True to format the output JSON string.</param>
            <returns>A <see cref="T:System.String"/> representing the serialized object.</returns>
        </member>
        <member name="M:System.JSON.Parse(System.String)">
            <summary>
            Parses a JSON string to a dynamic object, similar to a 
            JavaScript "expando" object.
            </summary>
            <param name="json">The JSON string to parse.</param>
            <returns>An instance of <see cref="T:Wisej.Core.DynamicObject"/> containing all the
            values parsed from the <paramref name="json"/> string.</returns>
        </member>
        <member name="M:System.JSON.Parse(System.IO.Stream)">
            <summary>
            Parses a JSON string to a dynamic object, similar to a 
            JavaScript "expando" object.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/> providing the JSON string to parse.</param>
            <returns>An instance of <see cref="T:Wisej.Core.DynamicObject"/> containing all the
            values parsed from the <paramref name="stream"/> stream.</returns>
        </member>
        <member name="T:System.DateTimeExtensions">
            <summary>
            Extends <see cref="T:System.DateTime"/> with methods
            to adjust the server-side time to the client's timezone.
            </summary>
        </member>
        <member name="M:System.DateTimeExtensions.ToClientTime(System.DateTime)">
            <summary>
            Converts the <see cref="T:System.DateTime"/> value to the
            time zone of the client's browser. When the timezone of the server
            doesn't match the time zone of the client, you should convert to the
            client's timezone when using <see cref="P:System.DateTime.Now"/>.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> to adjust to the client's time zone.</param>
            <returns></returns>
        </member>
        <member name="M:System.DateTimeExtensions.ToClientTime(System.DateTime,System.Int32)">
            <summary>
            Converts the <see cref="T:System.DateTime"/> value to the
            time zone of the client's browser. When the timezone of the server
            doesn't match the time zone of the client, you should convert to the
            client's timezone when using <see cref="P:System.DateTime.Now"/>.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> to adjust to the client's time zone.</param>
            <param name="timezoneOffset">The time-zone offset in minutes.</param>
            <returns></returns>
        </member>
        <member name="T:System.CollectionExtensions">
            <summary>
            Extends IEnumerable&lt;T&gt; with the Flatten method that
            returns a single collection of all the items and child items 
            returned by callback method.
            </summary>
            <exclude/>
        </member>
        <member name="M:System.CollectionExtensions.Flatten``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Flattens a hierarchical object structure.
            </summary>
            <typeparam name="T">The type of the elements inside the structure.</typeparam>
            <param name="e">The collection to flatten.</param>
            <param name="f">Method that returns a list of child elements.</param>
            <returns>A collection with all the elements in <paramref name="e"/> and all the element returned by <paramref name="f"/> recursively.</returns>
        </member>
    </members>
</doc>
